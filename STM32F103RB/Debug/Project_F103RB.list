
Project_F103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ce8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  08004df4  08004df4  00014df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005110  08005110  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  08005110  08005110  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005110  08005110  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005110  08005110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005114  08005114  00015114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08005118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000010c  08005224  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08005224  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001497e  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b61  00000000  00000000  00034ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00037618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  000383e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ebd  00000000  00000000  00039090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011065  00000000  00000000  00051f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b411  00000000  00000000  00062fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee3c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003afc  00000000  00000000  000ee418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000010c 	.word	0x2000010c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004ddc 	.word	0x08004ddc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000110 	.word	0x20000110
 8000148:	08004ddc 	.word	0x08004ddc

0800014c <isButtonPressed>:

int TimeOutForKeyPress[4] = { 200, 200, 200, 200 };
int button_flag[4] = {0,0,0,0};


int isButtonPressed(int num){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[num] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[num] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000128 	.word	0x20000128

08000180 <subKeyProcess>:
void subKeyProcess(int num){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	//TODO
	button_flag[num]=1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000128 	.word	0x20000128

080001a0 <getKeyInput>:


void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e06d      	b.n	8000288 <getKeyInput+0xe8>
		KeyReg2[i] = KeyReg1[i];
 80001ac:	4a3a      	ldr	r2, [pc, #232]	; (8000298 <getKeyInput+0xf8>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4939      	ldr	r1, [pc, #228]	; (800029c <getKeyInput+0xfc>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001bc:	4a38      	ldr	r2, [pc, #224]	; (80002a0 <getKeyInput+0x100>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4934      	ldr	r1, [pc, #208]	; (8000298 <getKeyInput+0xf8>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Add your button here
		KeyReg0[i] = HAL_GPIO_ReadPin(port[i], mode[i]);
 80001cc:	4a35      	ldr	r2, [pc, #212]	; (80002a4 <getKeyInput+0x104>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4934      	ldr	r1, [pc, #208]	; (80002a8 <getKeyInput+0x108>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001dc:	4619      	mov	r1, r3
 80001de:	4610      	mov	r0, r2
 80001e0:	f001 ffb8 	bl	8002154 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a2d      	ldr	r2, [pc, #180]	; (80002a0 <getKeyInput+0x100>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001f0:	4a29      	ldr	r2, [pc, #164]	; (8000298 <getKeyInput+0xf8>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4929      	ldr	r1, [pc, #164]	; (80002a0 <getKeyInput+0x100>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d13e      	bne.n	8000282 <getKeyInput+0xe2>
 8000204:	4a24      	ldr	r2, [pc, #144]	; (8000298 <getKeyInput+0xf8>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4923      	ldr	r1, [pc, #140]	; (800029c <getKeyInput+0xfc>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d134      	bne.n	8000282 <getKeyInput+0xe2>
			if (KeyReg2[i] != KeyReg3[i]){
 8000218:	4a20      	ldr	r2, [pc, #128]	; (800029c <getKeyInput+0xfc>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4922      	ldr	r1, [pc, #136]	; (80002ac <getKeyInput+0x10c>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d016      	beq.n	800025a <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 800022c:	4a1b      	ldr	r2, [pc, #108]	; (800029c <getKeyInput+0xfc>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	491d      	ldr	r1, [pc, #116]	; (80002ac <getKeyInput+0x10c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 800023c:	4a1b      	ldr	r2, [pc, #108]	; (80002ac <getKeyInput+0x10c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d11c      	bne.n	8000282 <getKeyInput+0xe2>
					TimeOutForKeyPress[i] = 200;
 8000248:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <getKeyInput+0x110>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	21c8      	movs	r1, #200	; 0xc8
 800024e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f7ff ff94 	bl	8000180 <subKeyProcess>
 8000258:	e013      	b.n	8000282 <getKeyInput+0xe2>
				}
			}

			else{ //press without release
				TimeOutForKeyPress[i]--;
 800025a:	4a15      	ldr	r2, [pc, #84]	; (80002b0 <getKeyInput+0x110>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	1e5a      	subs	r2, r3, #1
 8000264:	4912      	ldr	r1, [pc, #72]	; (80002b0 <getKeyInput+0x110>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 800026c:	4a10      	ldr	r2, [pc, #64]	; (80002b0 <getKeyInput+0x110>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d104      	bne.n	8000282 <getKeyInput+0xe2>
					KeyReg3[i] = NORMAL_STATE;
 8000278:	4a0c      	ldr	r2, [pc, #48]	; (80002ac <getKeyInput+0x10c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2101      	movs	r1, #1
 800027e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 4; i++){
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	3301      	adds	r3, #1
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b03      	cmp	r3, #3
 800028c:	dd8e      	ble.n	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000028 	.word	0x20000028
 800029c:	20000038 	.word	0x20000038
 80002a0:	20000018 	.word	0x20000018
 80002a4:	20000008 	.word	0x20000008
 80002a8:	20000000 	.word	0x20000000
 80002ac:	20000048 	.word	0x20000048
 80002b0:	20000058 	.word	0x20000058

080002b4 <auto_man>:
#include "stdlib.h"

char str[40];

void auto_man()
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1)
 80002b8:	2000      	movs	r0, #0
 80002ba:	f7ff ff47 	bl	800014c <isButtonPressed>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d113      	bne.n	80002ec <auto_man+0x38>
	{
		resetLED();
 80002c4:	f000 fd5c 	bl	8000d80 <resetLED>
		//		reset7SEG();
		state = MAN_RG;
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <auto_man+0x3c>)
 80002ca:	2205      	movs	r2, #5
 80002cc:	701a      	strb	r2, [r3, #0]
		onRed1();
 80002ce:	f000 fd75 	bl	8000dbc <onRed1>
		onGreen2();
 80002d2:	f000 fdcf 	bl	8000e74 <onGreen2>
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Manual: Road 1: Red\r\nRoad 2: Green\r\n"), 200);
 80002d6:	4907      	ldr	r1, [pc, #28]	; (80002f4 <auto_man+0x40>)
 80002d8:	4807      	ldr	r0, [pc, #28]	; (80002f8 <auto_man+0x44>)
 80002da:	f004 f9fb 	bl	80046d4 <siprintf>
 80002de:	4603      	mov	r3, r0
 80002e0:	b29a      	uxth	r2, r3
 80002e2:	23c8      	movs	r3, #200	; 0xc8
 80002e4:	4904      	ldr	r1, [pc, #16]	; (80002f8 <auto_man+0x44>)
 80002e6:	4805      	ldr	r0, [pc, #20]	; (80002fc <auto_man+0x48>)
 80002e8:	f003 fb28 	bl	800393c <HAL_UART_Transmit>
	}
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000138 	.word	0x20000138
 80002f4:	08004df4 	.word	0x08004df4
 80002f8:	2000028c 	.word	0x2000028c
 80002fc:	20000240 	.word	0x20000240

08000300 <man_tuning>:
void man_tuning()
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1)
 8000304:	2000      	movs	r0, #0
 8000306:	f7ff ff21 	bl	800014c <isButtonPressed>
 800030a:	4603      	mov	r3, r0
 800030c:	2b01      	cmp	r3, #1
 800030e:	d11a      	bne.n	8000346 <man_tuning+0x46>
	{
		resetLED();
 8000310:	f000 fd36 	bl	8000d80 <resetLED>
		//		reset7SEG();
		state = MOD_RED;
 8000314:	4b0d      	ldr	r3, [pc, #52]	; (800034c <man_tuning+0x4c>)
 8000316:	2207      	movs	r2, #7
 8000318:	701a      	strb	r2, [r3, #0]
		onRed1();
 800031a:	f000 fd4f 	bl	8000dbc <onRed1>
		onRed2();
 800031e:	f000 fd89 	bl	8000e34 <onRed2>
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Tuning: Red\r\nTime: %d\r\n", timeRed/timeCycle), 200);
 8000322:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <man_tuning+0x50>)
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <man_tuning+0x54>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	fb92 f3f3 	sdiv	r3, r2, r3
 800032e:	461a      	mov	r2, r3
 8000330:	4909      	ldr	r1, [pc, #36]	; (8000358 <man_tuning+0x58>)
 8000332:	480a      	ldr	r0, [pc, #40]	; (800035c <man_tuning+0x5c>)
 8000334:	f004 f9ce 	bl	80046d4 <siprintf>
 8000338:	4603      	mov	r3, r0
 800033a:	b29a      	uxth	r2, r3
 800033c:	23c8      	movs	r3, #200	; 0xc8
 800033e:	4907      	ldr	r1, [pc, #28]	; (800035c <man_tuning+0x5c>)
 8000340:	4807      	ldr	r0, [pc, #28]	; (8000360 <man_tuning+0x60>)
 8000342:	f003 fafb 	bl	800393c <HAL_UART_Transmit>
	}
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000138 	.word	0x20000138
 8000350:	20000068 	.word	0x20000068
 8000354:	080050ac 	.word	0x080050ac
 8000358:	08004e1c 	.word	0x08004e1c
 800035c:	2000028c 	.word	0x2000028c
 8000360:	20000240 	.word	0x20000240

08000364 <fsm_auto>:

void fsm_auto()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	switch (state)
 8000368:	4b7b      	ldr	r3, [pc, #492]	; (8000558 <fsm_auto+0x1f4>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b04      	cmp	r3, #4
 800036e:	f200 81d8 	bhi.w	8000722 <fsm_auto+0x3be>
 8000372:	a201      	add	r2, pc, #4	; (adr r2, 8000378 <fsm_auto+0x14>)
 8000374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000378:	0800038d 	.word	0x0800038d
 800037c:	080003cd 	.word	0x080003cd
 8000380:	0800047f 	.word	0x0800047f
 8000384:	08000591 	.word	0x08000591
 8000388:	08000649 	.word	0x08000649
	{
	case INIT:
		resetLED();
 800038c:	f000 fcf8 	bl	8000d80 <resetLED>
		timeWay1 = timeRed / timeCycle;
 8000390:	4b72      	ldr	r3, [pc, #456]	; (800055c <fsm_auto+0x1f8>)
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	4b72      	ldr	r3, [pc, #456]	; (8000560 <fsm_auto+0x1fc>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	fb92 f3f3 	sdiv	r3, r2, r3
 800039c:	4a71      	ldr	r2, [pc, #452]	; (8000564 <fsm_auto+0x200>)
 800039e:	6013      	str	r3, [r2, #0]
		timeWay2 = timeGreen / timeCycle;
 80003a0:	4b71      	ldr	r3, [pc, #452]	; (8000568 <fsm_auto+0x204>)
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	4b6e      	ldr	r3, [pc, #440]	; (8000560 <fsm_auto+0x1fc>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80003ac:	4a6f      	ldr	r2, [pc, #444]	; (800056c <fsm_auto+0x208>)
 80003ae:	6013      	str	r3, [r2, #0]
		state = RED1_GREEN2;
 80003b0:	4b69      	ldr	r3, [pc, #420]	; (8000558 <fsm_auto+0x1f4>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	701a      	strb	r2, [r3, #0]
		setTimer(0, timeGreen);
 80003b6:	4b6c      	ldr	r3, [pc, #432]	; (8000568 <fsm_auto+0x204>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4619      	mov	r1, r3
 80003bc:	2000      	movs	r0, #0
 80003be:	f001 f949 	bl	8001654 <setTimer>
		setTimer(1, 100);
 80003c2:	2164      	movs	r1, #100	; 0x64
 80003c4:	2001      	movs	r0, #1
 80003c6:	f001 f945 	bl	8001654 <setTimer>
		break;
 80003ca:	e1ab      	b.n	8000724 <fsm_auto+0x3c0>
	case RED1_GREEN2:
		onRed1();
 80003cc:	f000 fcf6 	bl	8000dbc <onRed1>
		onGreen2();
 80003d0:	f000 fd50 	bl	8000e74 <onGreen2>
		if (timer_flag[1])
 80003d4:	4b66      	ldr	r3, [pc, #408]	; (8000570 <fsm_auto+0x20c>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d037      	beq.n	800044c <fsm_auto+0xe8>
		{
			setTimer(1, 100);
 80003dc:	2164      	movs	r1, #100	; 0x64
 80003de:	2001      	movs	r0, #1
 80003e0:	f001 f938 	bl	8001654 <setTimer>
			clearScreen();
 80003e4:	f000 fcb4 	bl	8000d50 <clearScreen>
			timeWay1--;
 80003e8:	4b5e      	ldr	r3, [pc, #376]	; (8000564 <fsm_auto+0x200>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	3b01      	subs	r3, #1
 80003ee:	4a5d      	ldr	r2, [pc, #372]	; (8000564 <fsm_auto+0x200>)
 80003f0:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Road 1: Red\r\nTime:%d\r\n", timeWay1), 200);
 80003f2:	4b5c      	ldr	r3, [pc, #368]	; (8000564 <fsm_auto+0x200>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	461a      	mov	r2, r3
 80003f8:	495e      	ldr	r1, [pc, #376]	; (8000574 <fsm_auto+0x210>)
 80003fa:	485f      	ldr	r0, [pc, #380]	; (8000578 <fsm_auto+0x214>)
 80003fc:	f004 f96a 	bl	80046d4 <siprintf>
 8000400:	4603      	mov	r3, r0
 8000402:	b29a      	uxth	r2, r3
 8000404:	23c8      	movs	r3, #200	; 0xc8
 8000406:	495c      	ldr	r1, [pc, #368]	; (8000578 <fsm_auto+0x214>)
 8000408:	485c      	ldr	r0, [pc, #368]	; (800057c <fsm_auto+0x218>)
 800040a:	f003 fa97 	bl	800393c <HAL_UART_Transmit>
			timeWay2--;
 800040e:	4b57      	ldr	r3, [pc, #348]	; (800056c <fsm_auto+0x208>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	3b01      	subs	r3, #1
 8000414:	4a55      	ldr	r2, [pc, #340]	; (800056c <fsm_auto+0x208>)
 8000416:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Road 2: Green\r\nTime:%d\r\n", timeWay2), 200);
 8000418:	4b54      	ldr	r3, [pc, #336]	; (800056c <fsm_auto+0x208>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	461a      	mov	r2, r3
 800041e:	4958      	ldr	r1, [pc, #352]	; (8000580 <fsm_auto+0x21c>)
 8000420:	4855      	ldr	r0, [pc, #340]	; (8000578 <fsm_auto+0x214>)
 8000422:	f004 f957 	bl	80046d4 <siprintf>
 8000426:	4603      	mov	r3, r0
 8000428:	b29a      	uxth	r2, r3
 800042a:	23c8      	movs	r3, #200	; 0xc8
 800042c:	4952      	ldr	r1, [pc, #328]	; (8000578 <fsm_auto+0x214>)
 800042e:	4853      	ldr	r0, [pc, #332]	; (800057c <fsm_auto+0x218>)
 8000430:	f003 fa84 	bl	800393c <HAL_UART_Transmit>
			if (timeWay2 <= 0)
 8000434:	4b4d      	ldr	r3, [pc, #308]	; (800056c <fsm_auto+0x208>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	dc07      	bgt.n	800044c <fsm_auto+0xe8>
				timeWay2 = timeYellow / timeCycle;
 800043c:	4b51      	ldr	r3, [pc, #324]	; (8000584 <fsm_auto+0x220>)
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	4b47      	ldr	r3, [pc, #284]	; (8000560 <fsm_auto+0x1fc>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	fb92 f3f3 	sdiv	r3, r2, r3
 8000448:	4a48      	ldr	r2, [pc, #288]	; (800056c <fsm_auto+0x208>)
 800044a:	6013      	str	r3, [r2, #0]
		}
		if (timer_flag[0])
 800044c:	4b48      	ldr	r3, [pc, #288]	; (8000570 <fsm_auto+0x20c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d008      	beq.n	8000466 <fsm_auto+0x102>
		{
			state = RED1_YELLOW2;
 8000454:	4b40      	ldr	r3, [pc, #256]	; (8000558 <fsm_auto+0x1f4>)
 8000456:	2202      	movs	r2, #2
 8000458:	701a      	strb	r2, [r3, #0]
			setTimer(0, timeYellow);
 800045a:	4b4a      	ldr	r3, [pc, #296]	; (8000584 <fsm_auto+0x220>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4619      	mov	r1, r3
 8000460:	2000      	movs	r0, #0
 8000462:	f001 f8f7 	bl	8001654 <setTimer>
		}
		if (isButtonPressed(3))
 8000466:	2003      	movs	r0, #3
 8000468:	f7ff fe70 	bl	800014c <isButtonPressed>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d002      	beq.n	8000478 <fsm_auto+0x114>
		{
			ped_flag = 1;
 8000472:	4b45      	ldr	r3, [pc, #276]	; (8000588 <fsm_auto+0x224>)
 8000474:	2201      	movs	r2, #1
 8000476:	601a      	str	r2, [r3, #0]
		}
		auto_man();
 8000478:	f7ff ff1c 	bl	80002b4 <auto_man>
		break;
 800047c:	e152      	b.n	8000724 <fsm_auto+0x3c0>
	case RED1_YELLOW2:
		onRed1();
 800047e:	f000 fc9d 	bl	8000dbc <onRed1>
		onYellow2();
 8000482:	f000 fce7 	bl	8000e54 <onYellow2>
		if (timer_flag[1])
 8000486:	4b3a      	ldr	r3, [pc, #232]	; (8000570 <fsm_auto+0x20c>)
 8000488:	685b      	ldr	r3, [r3, #4]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d04b      	beq.n	8000526 <fsm_auto+0x1c2>
		{
			setTimer(1, 100);
 800048e:	2164      	movs	r1, #100	; 0x64
 8000490:	2001      	movs	r0, #1
 8000492:	f001 f8df 	bl	8001654 <setTimer>
			clearScreen();
 8000496:	f000 fc5b 	bl	8000d50 <clearScreen>
			timeWay1--;
 800049a:	4b32      	ldr	r3, [pc, #200]	; (8000564 <fsm_auto+0x200>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a30      	ldr	r2, [pc, #192]	; (8000564 <fsm_auto+0x200>)
 80004a2:	6013      	str	r3, [r2, #0]
			if (timeWay1 <= 0)
 80004a4:	4b2f      	ldr	r3, [pc, #188]	; (8000564 <fsm_auto+0x200>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	dc07      	bgt.n	80004bc <fsm_auto+0x158>
				timeWay1 = timeGreen / timeCycle;
 80004ac:	4b2e      	ldr	r3, [pc, #184]	; (8000568 <fsm_auto+0x204>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	4b2b      	ldr	r3, [pc, #172]	; (8000560 <fsm_auto+0x1fc>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80004b8:	4a2a      	ldr	r2, [pc, #168]	; (8000564 <fsm_auto+0x200>)
 80004ba:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Road 1: Red\r\nTime:%d\r\n", timeWay1), 200);
 80004bc:	4b29      	ldr	r3, [pc, #164]	; (8000564 <fsm_auto+0x200>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	461a      	mov	r2, r3
 80004c2:	492c      	ldr	r1, [pc, #176]	; (8000574 <fsm_auto+0x210>)
 80004c4:	482c      	ldr	r0, [pc, #176]	; (8000578 <fsm_auto+0x214>)
 80004c6:	f004 f905 	bl	80046d4 <siprintf>
 80004ca:	4603      	mov	r3, r0
 80004cc:	b29a      	uxth	r2, r3
 80004ce:	23c8      	movs	r3, #200	; 0xc8
 80004d0:	4929      	ldr	r1, [pc, #164]	; (8000578 <fsm_auto+0x214>)
 80004d2:	482a      	ldr	r0, [pc, #168]	; (800057c <fsm_auto+0x218>)
 80004d4:	f003 fa32 	bl	800393c <HAL_UART_Transmit>
			timeWay2--;
 80004d8:	4b24      	ldr	r3, [pc, #144]	; (800056c <fsm_auto+0x208>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	3b01      	subs	r3, #1
 80004de:	4a23      	ldr	r2, [pc, #140]	; (800056c <fsm_auto+0x208>)
 80004e0:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Road 2: Yellow\r\nTime:%d\r\n", timeWay2), 200);
 80004e2:	4b22      	ldr	r3, [pc, #136]	; (800056c <fsm_auto+0x208>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	461a      	mov	r2, r3
 80004e8:	4928      	ldr	r1, [pc, #160]	; (800058c <fsm_auto+0x228>)
 80004ea:	4823      	ldr	r0, [pc, #140]	; (8000578 <fsm_auto+0x214>)
 80004ec:	f004 f8f2 	bl	80046d4 <siprintf>
 80004f0:	4603      	mov	r3, r0
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	23c8      	movs	r3, #200	; 0xc8
 80004f6:	4920      	ldr	r1, [pc, #128]	; (8000578 <fsm_auto+0x214>)
 80004f8:	4820      	ldr	r0, [pc, #128]	; (800057c <fsm_auto+0x218>)
 80004fa:	f003 fa1f 	bl	800393c <HAL_UART_Transmit>
			if (timeWay2 <= 0)
 80004fe:	4b1b      	ldr	r3, [pc, #108]	; (800056c <fsm_auto+0x208>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	dc0f      	bgt.n	8000526 <fsm_auto+0x1c2>
			{
				timeWay1 = timeGreen / timeCycle;
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <fsm_auto+0x204>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	4b15      	ldr	r3, [pc, #84]	; (8000560 <fsm_auto+0x1fc>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000512:	4a14      	ldr	r2, [pc, #80]	; (8000564 <fsm_auto+0x200>)
 8000514:	6013      	str	r3, [r2, #0]
				timeWay2 = timeRed / timeCycle;
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <fsm_auto+0x1f8>)
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <fsm_auto+0x1fc>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000522:	4a12      	ldr	r2, [pc, #72]	; (800056c <fsm_auto+0x208>)
 8000524:	6013      	str	r3, [r2, #0]
			}
		}
		if (timer_flag[0])
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <fsm_auto+0x20c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d008      	beq.n	8000540 <fsm_auto+0x1dc>
		{
			state = GREEN1_RED2;
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <fsm_auto+0x1f4>)
 8000530:	2203      	movs	r2, #3
 8000532:	701a      	strb	r2, [r3, #0]
			setTimer(0, timeGreen);
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <fsm_auto+0x204>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4619      	mov	r1, r3
 800053a:	2000      	movs	r0, #0
 800053c:	f001 f88a 	bl	8001654 <setTimer>
		}
		if (isButtonPressed(3))
 8000540:	2003      	movs	r0, #3
 8000542:	f7ff fe03 	bl	800014c <isButtonPressed>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d002      	beq.n	8000552 <fsm_auto+0x1ee>
		{
			ped_flag = 1;
 800054c:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <fsm_auto+0x224>)
 800054e:	2201      	movs	r2, #1
 8000550:	601a      	str	r2, [r3, #0]
		}
		auto_man();
 8000552:	f7ff feaf 	bl	80002b4 <auto_man>
		break;
 8000556:	e0e5      	b.n	8000724 <fsm_auto+0x3c0>
 8000558:	20000138 	.word	0x20000138
 800055c:	20000068 	.word	0x20000068
 8000560:	080050ac 	.word	0x080050ac
 8000564:	2000013c 	.word	0x2000013c
 8000568:	2000006c 	.word	0x2000006c
 800056c:	20000140 	.word	0x20000140
 8000570:	20000150 	.word	0x20000150
 8000574:	08004e34 	.word	0x08004e34
 8000578:	2000028c 	.word	0x2000028c
 800057c:	20000240 	.word	0x20000240
 8000580:	08004e4c 	.word	0x08004e4c
 8000584:	20000070 	.word	0x20000070
 8000588:	20000148 	.word	0x20000148
 800058c:	08004e68 	.word	0x08004e68
	case GREEN1_RED2:
		onGreen1();
 8000590:	f000 fc3c 	bl	8000e0c <onGreen1>
		onRed2();
 8000594:	f000 fc4e 	bl	8000e34 <onRed2>
		if (timer_flag[1])
 8000598:	4b63      	ldr	r3, [pc, #396]	; (8000728 <fsm_auto+0x3c4>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d037      	beq.n	8000610 <fsm_auto+0x2ac>
		{
			setTimer(1, 100);
 80005a0:	2164      	movs	r1, #100	; 0x64
 80005a2:	2001      	movs	r0, #1
 80005a4:	f001 f856 	bl	8001654 <setTimer>
			clearScreen();
 80005a8:	f000 fbd2 	bl	8000d50 <clearScreen>
			timeWay1--;
 80005ac:	4b5f      	ldr	r3, [pc, #380]	; (800072c <fsm_auto+0x3c8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	4a5e      	ldr	r2, [pc, #376]	; (800072c <fsm_auto+0x3c8>)
 80005b4:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Road 1: Green\r\nTime:%d\r\n", timeWay1), 200);
 80005b6:	4b5d      	ldr	r3, [pc, #372]	; (800072c <fsm_auto+0x3c8>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	461a      	mov	r2, r3
 80005bc:	495c      	ldr	r1, [pc, #368]	; (8000730 <fsm_auto+0x3cc>)
 80005be:	485d      	ldr	r0, [pc, #372]	; (8000734 <fsm_auto+0x3d0>)
 80005c0:	f004 f888 	bl	80046d4 <siprintf>
 80005c4:	4603      	mov	r3, r0
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	23c8      	movs	r3, #200	; 0xc8
 80005ca:	495a      	ldr	r1, [pc, #360]	; (8000734 <fsm_auto+0x3d0>)
 80005cc:	485a      	ldr	r0, [pc, #360]	; (8000738 <fsm_auto+0x3d4>)
 80005ce:	f003 f9b5 	bl	800393c <HAL_UART_Transmit>
			timeWay2--;
 80005d2:	4b5a      	ldr	r3, [pc, #360]	; (800073c <fsm_auto+0x3d8>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	4a58      	ldr	r2, [pc, #352]	; (800073c <fsm_auto+0x3d8>)
 80005da:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Road 2: Red\r\nTime:%d\r\n", timeWay2), 200);
 80005dc:	4b57      	ldr	r3, [pc, #348]	; (800073c <fsm_auto+0x3d8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4957      	ldr	r1, [pc, #348]	; (8000740 <fsm_auto+0x3dc>)
 80005e4:	4853      	ldr	r0, [pc, #332]	; (8000734 <fsm_auto+0x3d0>)
 80005e6:	f004 f875 	bl	80046d4 <siprintf>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	23c8      	movs	r3, #200	; 0xc8
 80005f0:	4950      	ldr	r1, [pc, #320]	; (8000734 <fsm_auto+0x3d0>)
 80005f2:	4851      	ldr	r0, [pc, #324]	; (8000738 <fsm_auto+0x3d4>)
 80005f4:	f003 f9a2 	bl	800393c <HAL_UART_Transmit>
			if (timeWay1 <= 0)
 80005f8:	4b4c      	ldr	r3, [pc, #304]	; (800072c <fsm_auto+0x3c8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	dc07      	bgt.n	8000610 <fsm_auto+0x2ac>
				timeWay1 = timeYellow / timeCycle;
 8000600:	4b50      	ldr	r3, [pc, #320]	; (8000744 <fsm_auto+0x3e0>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	4b50      	ldr	r3, [pc, #320]	; (8000748 <fsm_auto+0x3e4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	fb92 f3f3 	sdiv	r3, r2, r3
 800060c:	4a47      	ldr	r2, [pc, #284]	; (800072c <fsm_auto+0x3c8>)
 800060e:	6013      	str	r3, [r2, #0]
		}
		if (timer_flag[0])
 8000610:	4b45      	ldr	r3, [pc, #276]	; (8000728 <fsm_auto+0x3c4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d00b      	beq.n	8000630 <fsm_auto+0x2cc>
		{
			i = 50;
 8000618:	4b4c      	ldr	r3, [pc, #304]	; (800074c <fsm_auto+0x3e8>)
 800061a:	2232      	movs	r2, #50	; 0x32
 800061c:	601a      	str	r2, [r3, #0]
			state = YELLOW1_RED2;
 800061e:	4b4c      	ldr	r3, [pc, #304]	; (8000750 <fsm_auto+0x3ec>)
 8000620:	2204      	movs	r2, #4
 8000622:	701a      	strb	r2, [r3, #0]
			setTimer(0, timeYellow);
 8000624:	4b47      	ldr	r3, [pc, #284]	; (8000744 <fsm_auto+0x3e0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4619      	mov	r1, r3
 800062a:	2000      	movs	r0, #0
 800062c:	f001 f812 	bl	8001654 <setTimer>
		}
		if (isButtonPressed(3))
 8000630:	2003      	movs	r0, #3
 8000632:	f7ff fd8b 	bl	800014c <isButtonPressed>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d002      	beq.n	8000642 <fsm_auto+0x2de>
		{
			ped_flag = 1;
 800063c:	4b45      	ldr	r3, [pc, #276]	; (8000754 <fsm_auto+0x3f0>)
 800063e:	2201      	movs	r2, #1
 8000640:	601a      	str	r2, [r3, #0]
		}
		auto_man();
 8000642:	f7ff fe37 	bl	80002b4 <auto_man>
		break;
 8000646:	e06d      	b.n	8000724 <fsm_auto+0x3c0>
	case YELLOW1_RED2:
		onYellow1();
 8000648:	f000 fbcc 	bl	8000de4 <onYellow1>
		onRed2();
 800064c:	f000 fbf2 	bl	8000e34 <onRed2>
		if (timer_flag[1])
 8000650:	4b35      	ldr	r3, [pc, #212]	; (8000728 <fsm_auto+0x3c4>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d04b      	beq.n	80006f0 <fsm_auto+0x38c>
		{
			setTimer(1, 100);
 8000658:	2164      	movs	r1, #100	; 0x64
 800065a:	2001      	movs	r0, #1
 800065c:	f000 fffa 	bl	8001654 <setTimer>
			clearScreen();
 8000660:	f000 fb76 	bl	8000d50 <clearScreen>
			timeWay1--;
 8000664:	4b31      	ldr	r3, [pc, #196]	; (800072c <fsm_auto+0x3c8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	3b01      	subs	r3, #1
 800066a:	4a30      	ldr	r2, [pc, #192]	; (800072c <fsm_auto+0x3c8>)
 800066c:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Road 1: Yellow\r\nTime:%d\r\n", timeWay1), 200);
 800066e:	4b2f      	ldr	r3, [pc, #188]	; (800072c <fsm_auto+0x3c8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	4938      	ldr	r1, [pc, #224]	; (8000758 <fsm_auto+0x3f4>)
 8000676:	482f      	ldr	r0, [pc, #188]	; (8000734 <fsm_auto+0x3d0>)
 8000678:	f004 f82c 	bl	80046d4 <siprintf>
 800067c:	4603      	mov	r3, r0
 800067e:	b29a      	uxth	r2, r3
 8000680:	23c8      	movs	r3, #200	; 0xc8
 8000682:	492c      	ldr	r1, [pc, #176]	; (8000734 <fsm_auto+0x3d0>)
 8000684:	482c      	ldr	r0, [pc, #176]	; (8000738 <fsm_auto+0x3d4>)
 8000686:	f003 f959 	bl	800393c <HAL_UART_Transmit>
			if (timeWay1 <= 0)
 800068a:	4b28      	ldr	r3, [pc, #160]	; (800072c <fsm_auto+0x3c8>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	dc07      	bgt.n	80006a2 <fsm_auto+0x33e>
				timeWay1 = timeRed / timeCycle;
 8000692:	4b32      	ldr	r3, [pc, #200]	; (800075c <fsm_auto+0x3f8>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <fsm_auto+0x3e4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	fb92 f3f3 	sdiv	r3, r2, r3
 800069e:	4a23      	ldr	r2, [pc, #140]	; (800072c <fsm_auto+0x3c8>)
 80006a0:	6013      	str	r3, [r2, #0]
			timeWay2--;
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <fsm_auto+0x3d8>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	4a24      	ldr	r2, [pc, #144]	; (800073c <fsm_auto+0x3d8>)
 80006aa:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Road 2: Red\r\nTime:%d\r\n", timeWay2), 200);
 80006ac:	4b23      	ldr	r3, [pc, #140]	; (800073c <fsm_auto+0x3d8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	4923      	ldr	r1, [pc, #140]	; (8000740 <fsm_auto+0x3dc>)
 80006b4:	481f      	ldr	r0, [pc, #124]	; (8000734 <fsm_auto+0x3d0>)
 80006b6:	f004 f80d 	bl	80046d4 <siprintf>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b29a      	uxth	r2, r3
 80006be:	23c8      	movs	r3, #200	; 0xc8
 80006c0:	491c      	ldr	r1, [pc, #112]	; (8000734 <fsm_auto+0x3d0>)
 80006c2:	481d      	ldr	r0, [pc, #116]	; (8000738 <fsm_auto+0x3d4>)
 80006c4:	f003 f93a 	bl	800393c <HAL_UART_Transmit>
			if (timeWay2 <= 0)
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <fsm_auto+0x3d8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	dc0f      	bgt.n	80006f0 <fsm_auto+0x38c>
			{
				timeWay1 = timeRed / timeCycle;
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <fsm_auto+0x3f8>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <fsm_auto+0x3e4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80006dc:	4a13      	ldr	r2, [pc, #76]	; (800072c <fsm_auto+0x3c8>)
 80006de:	6013      	str	r3, [r2, #0]
				timeWay2 = timeGreen / timeCycle;
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <fsm_auto+0x3fc>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <fsm_auto+0x3e4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80006ec:	4a13      	ldr	r2, [pc, #76]	; (800073c <fsm_auto+0x3d8>)
 80006ee:	6013      	str	r3, [r2, #0]
			}
		}
		if (timer_flag[0])
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <fsm_auto+0x3c4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d008      	beq.n	800070a <fsm_auto+0x3a6>
		{

			state = RED1_GREEN2;
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <fsm_auto+0x3ec>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
			setTimer(0, timeGreen);
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <fsm_auto+0x3fc>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4619      	mov	r1, r3
 8000704:	2000      	movs	r0, #0
 8000706:	f000 ffa5 	bl	8001654 <setTimer>
		}
		if (isButtonPressed(3))
 800070a:	2003      	movs	r0, #3
 800070c:	f7ff fd1e 	bl	800014c <isButtonPressed>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <fsm_auto+0x3b8>
		{
			ped_flag = 1;
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <fsm_auto+0x3f0>)
 8000718:	2201      	movs	r2, #1
 800071a:	601a      	str	r2, [r3, #0]
		//							i = 1;
		//						}
		//					}
		//				}
		//			}
		auto_man();
 800071c:	f7ff fdca 	bl	80002b4 <auto_man>
		break;
 8000720:	e000      	b.n	8000724 <fsm_auto+0x3c0>
	default:
		break;
 8000722:	bf00      	nop
	}
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000150 	.word	0x20000150
 800072c:	2000013c 	.word	0x2000013c
 8000730:	08004e84 	.word	0x08004e84
 8000734:	2000028c 	.word	0x2000028c
 8000738:	20000240 	.word	0x20000240
 800073c:	20000140 	.word	0x20000140
 8000740:	08004ea0 	.word	0x08004ea0
 8000744:	20000070 	.word	0x20000070
 8000748:	080050ac 	.word	0x080050ac
 800074c:	20000088 	.word	0x20000088
 8000750:	20000138 	.word	0x20000138
 8000754:	20000148 	.word	0x20000148
 8000758:	08004eb8 	.word	0x08004eb8
 800075c:	20000068 	.word	0x20000068
 8000760:	2000006c 	.word	0x2000006c

08000764 <fsm_manual>:
void fsm_manual()
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	switch (state)
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <fsm_manual+0x84>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b05      	cmp	r3, #5
 800076e:	d002      	beq.n	8000776 <fsm_manual+0x12>
 8000770:	2b06      	cmp	r3, #6
 8000772:	d01b      	beq.n	80007ac <fsm_manual+0x48>
		}
		man_tuning();

		break;
	default:
		break;
 8000774:	e035      	b.n	80007e2 <fsm_manual+0x7e>
		if (isButtonPressed(1))
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff fce8 	bl	800014c <isButtonPressed>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d011      	beq.n	80007a6 <fsm_manual+0x42>
			state = MAN_GR;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <fsm_manual+0x84>)
 8000784:	2206      	movs	r2, #6
 8000786:	701a      	strb	r2, [r3, #0]
			onRed2();
 8000788:	f000 fb54 	bl	8000e34 <onRed2>
			onGreen1();
 800078c:	f000 fb3e 	bl	8000e0c <onGreen1>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Manual: Road 1: Green\r\nRoad 2: Red\r\n"), 200);
 8000790:	4916      	ldr	r1, [pc, #88]	; (80007ec <fsm_manual+0x88>)
 8000792:	4817      	ldr	r0, [pc, #92]	; (80007f0 <fsm_manual+0x8c>)
 8000794:	f003 ff9e 	bl	80046d4 <siprintf>
 8000798:	4603      	mov	r3, r0
 800079a:	b29a      	uxth	r2, r3
 800079c:	23c8      	movs	r3, #200	; 0xc8
 800079e:	4914      	ldr	r1, [pc, #80]	; (80007f0 <fsm_manual+0x8c>)
 80007a0:	4814      	ldr	r0, [pc, #80]	; (80007f4 <fsm_manual+0x90>)
 80007a2:	f003 f8cb 	bl	800393c <HAL_UART_Transmit>
		man_tuning();
 80007a6:	f7ff fdab 	bl	8000300 <man_tuning>
		break;
 80007aa:	e01a      	b.n	80007e2 <fsm_manual+0x7e>
		if (isButtonPressed(1))
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff fccd 	bl	800014c <isButtonPressed>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d011      	beq.n	80007dc <fsm_manual+0x78>
			state = MAN_RG;
 80007b8:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <fsm_manual+0x84>)
 80007ba:	2205      	movs	r2, #5
 80007bc:	701a      	strb	r2, [r3, #0]
			onRed1();
 80007be:	f000 fafd 	bl	8000dbc <onRed1>
			onGreen2();
 80007c2:	f000 fb57 	bl	8000e74 <onGreen2>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Manual: Road 1: Red\r\nRoad 2: Green\r\n"), 200);
 80007c6:	490c      	ldr	r1, [pc, #48]	; (80007f8 <fsm_manual+0x94>)
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <fsm_manual+0x8c>)
 80007ca:	f003 ff83 	bl	80046d4 <siprintf>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	23c8      	movs	r3, #200	; 0xc8
 80007d4:	4906      	ldr	r1, [pc, #24]	; (80007f0 <fsm_manual+0x8c>)
 80007d6:	4807      	ldr	r0, [pc, #28]	; (80007f4 <fsm_manual+0x90>)
 80007d8:	f003 f8b0 	bl	800393c <HAL_UART_Transmit>
		man_tuning();
 80007dc:	f7ff fd90 	bl	8000300 <man_tuning>
		break;
 80007e0:	bf00      	nop
	}
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000138 	.word	0x20000138
 80007ec:	08004ed4 	.word	0x08004ed4
 80007f0:	2000028c 	.word	0x2000028c
 80007f4:	20000240 	.word	0x20000240
 80007f8:	08004df4 	.word	0x08004df4

080007fc <syncLED>:
#include "fsm_pedestrian.h"

int change;

void syncLED()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	if (state == RED1_GREEN2 || state == RED1_YELLOW2)
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <syncLED+0x84>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d003      	beq.n	8000810 <syncLED+0x14>
 8000808:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <syncLED+0x84>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b02      	cmp	r3, #2
 800080e:	d106      	bne.n	800081e <syncLED+0x22>
	{
		pedRed();
 8000810:	f000 fb40 	bl	8000e94 <pedRed>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <syncLED+0x88>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2200      	movs	r2, #0
 800081a:	635a      	str	r2, [r3, #52]	; 0x34
				change -= 1;
				setTimer(9, 15);
			}
		}
	}
}
 800081c:	e02d      	b.n	800087a <syncLED+0x7e>
	else if (state == GREEN1_RED2 || state == YELLOW1_RED2)
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <syncLED+0x84>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b03      	cmp	r3, #3
 8000824:	d003      	beq.n	800082e <syncLED+0x32>
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <syncLED+0x84>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b04      	cmp	r3, #4
 800082c:	d125      	bne.n	800087a <syncLED+0x7e>
		pedGreen();
 800082e:	f000 fb45 	bl	8000ebc <pedGreen>
		if (timeWay2 <= 3)
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <syncLED+0x8c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b03      	cmp	r3, #3
 8000838:	dc1f      	bgt.n	800087a <syncLED+0x7e>
			if (timer_flag[3] == 1)
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <syncLED+0x90>)
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d10e      	bne.n	8000860 <syncLED+0x64>
				buzzer(volume[timeWay2 - 1]);
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <syncLED+0x8c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	3b01      	subs	r3, #1
 8000848:	4a11      	ldr	r2, [pc, #68]	; (8000890 <syncLED+0x94>)
 800084a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f86c 	bl	800092c <buzzer>
				setTimer(3, change);
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <syncLED+0x98>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	2003      	movs	r0, #3
 800085c:	f000 fefa 	bl	8001654 <setTimer>
			if (timer_flag[9])
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <syncLED+0x90>)
 8000862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000864:	2b00      	cmp	r3, #0
 8000866:	d008      	beq.n	800087a <syncLED+0x7e>
				change -= 1;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <syncLED+0x98>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	3b01      	subs	r3, #1
 800086e:	4a09      	ldr	r2, [pc, #36]	; (8000894 <syncLED+0x98>)
 8000870:	6013      	str	r3, [r2, #0]
				setTimer(9, 15);
 8000872:	210f      	movs	r1, #15
 8000874:	2009      	movs	r0, #9
 8000876:	f000 feed 	bl	8001654 <setTimer>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000138 	.word	0x20000138
 8000884:	200001ac 	.word	0x200001ac
 8000888:	20000140 	.word	0x20000140
 800088c:	20000150 	.word	0x20000150
 8000890:	2000008c 	.word	0x2000008c
 8000894:	200001f4 	.word	0x200001f4

08000898 <fsm_pedestrian>:
void fsm_pedestrian()
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	switch (ped_state)
 800089c:	4b1f      	ldr	r3, [pc, #124]	; (800091c <fsm_pedestrian+0x84>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b0c      	cmp	r3, #12
 80008a2:	d006      	beq.n	80008b2 <fsm_pedestrian+0x1a>
 80008a4:	2b0c      	cmp	r3, #12
 80008a6:	dc31      	bgt.n	800090c <fsm_pedestrian+0x74>
 80008a8:	2b0a      	cmp	r3, #10
 80008aa:	d00e      	beq.n	80008ca <fsm_pedestrian+0x32>
 80008ac:	2b0b      	cmp	r3, #11
 80008ae:	d020      	beq.n	80008f2 <fsm_pedestrian+0x5a>
			ped_state = PED_OFF;
			ped_flag = 0;
		}
		break;
	default:
		break;
 80008b0:	e02c      	b.n	800090c <fsm_pedestrian+0x74>
		pedReset();
 80008b2:	f000 fb17 	bl	8000ee4 <pedReset>
		buzzer_off();
 80008b6:	f000 f85d 	bl	8000974 <buzzer_off>
		if (ped_flag)
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <fsm_pedestrian+0x88>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d026      	beq.n	8000910 <fsm_pedestrian+0x78>
			ped_state = PED_INIT;
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <fsm_pedestrian+0x84>)
 80008c4:	220a      	movs	r2, #10
 80008c6:	601a      	str	r2, [r3, #0]
		break;
 80008c8:	e022      	b.n	8000910 <fsm_pedestrian+0x78>
		setTimer(2, 1000);
 80008ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008ce:	2002      	movs	r0, #2
 80008d0:	f000 fec0 	bl	8001654 <setTimer>
		change = 20;
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <fsm_pedestrian+0x8c>)
 80008d6:	2214      	movs	r2, #20
 80008d8:	601a      	str	r2, [r3, #0]
		setTimer(9, 2);
 80008da:	2102      	movs	r1, #2
 80008dc:	2009      	movs	r0, #9
 80008de:	f000 feb9 	bl	8001654 <setTimer>
		setTimer(3, 2);
 80008e2:	2102      	movs	r1, #2
 80008e4:	2003      	movs	r0, #3
 80008e6:	f000 feb5 	bl	8001654 <setTimer>
		ped_state = PED_ACTIVE;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <fsm_pedestrian+0x84>)
 80008ec:	220b      	movs	r2, #11
 80008ee:	601a      	str	r2, [r3, #0]
		break;
 80008f0:	e011      	b.n	8000916 <fsm_pedestrian+0x7e>
		syncLED();
 80008f2:	f7ff ff83 	bl	80007fc <syncLED>
		if (timer_flag[2])
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <fsm_pedestrian+0x90>)
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d00a      	beq.n	8000914 <fsm_pedestrian+0x7c>
			ped_state = PED_OFF;
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <fsm_pedestrian+0x84>)
 8000900:	220c      	movs	r2, #12
 8000902:	601a      	str	r2, [r3, #0]
			ped_flag = 0;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <fsm_pedestrian+0x88>)
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
		break;
 800090a:	e003      	b.n	8000914 <fsm_pedestrian+0x7c>
		break;
 800090c:	bf00      	nop
 800090e:	e002      	b.n	8000916 <fsm_pedestrian+0x7e>
		break;
 8000910:	bf00      	nop
 8000912:	e000      	b.n	8000916 <fsm_pedestrian+0x7e>
		break;
 8000914:	bf00      	nop
	}
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000080 	.word	0x20000080
 8000920:	20000148 	.word	0x20000148
 8000924:	200001f4 	.word	0x200001f4
 8000928:	20000150 	.word	0x20000150

0800092c <buzzer>:
void buzzer(int vol)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	if (buzzer_flag == 1)
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <buzzer+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d104      	bne.n	8000946 <buzzer+0x1a>
	{
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, vol);
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <buzzer+0x44>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	635a      	str	r2, [r3, #52]	; 0x34
 8000944:	e007      	b.n	8000956 <buzzer+0x2a>
	}
	else if (buzzer_flag == 0)
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <buzzer+0x40>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d103      	bne.n	8000956 <buzzer+0x2a>
	{
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <buzzer+0x44>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2200      	movs	r2, #0
 8000954:	635a      	str	r2, [r3, #52]	; 0x34
	}
	buzzer_flag = 1 - buzzer_flag;
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <buzzer+0x40>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f1c3 0301 	rsb	r3, r3, #1
 800095e:	4a03      	ldr	r2, [pc, #12]	; (800096c <buzzer+0x40>)
 8000960:	6013      	str	r3, [r2, #0]
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	20000084 	.word	0x20000084
 8000970:	200001ac 	.word	0x200001ac

08000974 <buzzer_off>:
void buzzer_off()
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <buzzer_off+0x14>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2200      	movs	r2, #0
 800097e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	200001ac 	.word	0x200001ac

0800098c <tuning_auto>:
#include "stdio.h"
#include "stdlib.h"

char str[40];

void tuning_auto(){
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	if(isButtonPressed(0) == 1){
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff fbdb 	bl	800014c <isButtonPressed>
 8000996:	4603      	mov	r3, r0
 8000998:	2b01      	cmp	r3, #1
 800099a:	d10f      	bne.n	80009bc <tuning_auto+0x30>
		resetLED();
 800099c:	f000 f9f0 	bl	8000d80 <resetLED>
//		reset7SEG();
		timeYellow = timeRed - timeGreen;
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <tuning_auto+0x34>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <tuning_auto+0x38>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <tuning_auto+0x3c>)
 80009ac:	6013      	str	r3, [r2, #0]
		state = RED1_GREEN2;
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <tuning_auto+0x40>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	701a      	strb	r2, [r3, #0]
		setTimer(4,2);
 80009b4:	2102      	movs	r1, #2
 80009b6:	2004      	movs	r0, #4
 80009b8:	f000 fe4c 	bl	8001654 <setTimer>
//		onRed1();
//		onGreen2();
	}
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000068 	.word	0x20000068
 80009c4:	2000006c 	.word	0x2000006c
 80009c8:	20000070 	.word	0x20000070
 80009cc:	20000138 	.word	0x20000138

080009d0 <fsm_tuning>:

void fsm_tuning(){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	switch(state){
 80009d4:	4b8b      	ldr	r3, [pc, #556]	; (8000c04 <fsm_tuning+0x234>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b09      	cmp	r3, #9
 80009da:	f000 80fe 	beq.w	8000bda <fsm_tuning+0x20a>
 80009de:	2b09      	cmp	r3, #9
 80009e0:	f300 819b 	bgt.w	8000d1a <fsm_tuning+0x34a>
 80009e4:	2b07      	cmp	r3, #7
 80009e6:	d002      	beq.n	80009ee <fsm_tuning+0x1e>
 80009e8:	2b08      	cmp	r3, #8
 80009ea:	d07b      	beq.n	8000ae4 <fsm_tuning+0x114>
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Green\r\nTime set to: %d\r\n",time_green), 200);
			}
			tuning_auto();
			break;
	}
}
 80009ec:	e195      	b.n	8000d1a <fsm_tuning+0x34a>
			if(timer_flag[4] == 1){
 80009ee:	4b86      	ldr	r3, [pc, #536]	; (8000c08 <fsm_tuning+0x238>)
 80009f0:	691b      	ldr	r3, [r3, #16]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d114      	bne.n	8000a20 <fsm_tuning+0x50>
				setTimer(4,25);
 80009f6:	2119      	movs	r1, #25
 80009f8:	2004      	movs	r0, #4
 80009fa:	f000 fe2b 	bl	8001654 <setTimer>
				if(blink == 0){
 80009fe:	4b83      	ldr	r3, [pc, #524]	; (8000c0c <fsm_tuning+0x23c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d107      	bne.n	8000a16 <fsm_tuning+0x46>
					onRed1(); // MOD_RED
 8000a06:	f000 f9d9 	bl	8000dbc <onRed1>
					onRed2();
 8000a0a:	f000 fa13 	bl	8000e34 <onRed2>
					blink = 1;
 8000a0e:	4b7f      	ldr	r3, [pc, #508]	; (8000c0c <fsm_tuning+0x23c>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	e004      	b.n	8000a20 <fsm_tuning+0x50>
					resetLED();
 8000a16:	f000 f9b3 	bl	8000d80 <resetLED>
					blink = 0;
 8000a1a:	4b7c      	ldr	r3, [pc, #496]	; (8000c0c <fsm_tuning+0x23c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(1)){
 8000a20:	2001      	movs	r0, #1
 8000a22:	f7ff fb93 	bl	800014c <isButtonPressed>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d018      	beq.n	8000a5e <fsm_tuning+0x8e>
				state = MOD_YELLOW;
 8000a2c:	4b75      	ldr	r3, [pc, #468]	; (8000c04 <fsm_tuning+0x234>)
 8000a2e:	2208      	movs	r2, #8
 8000a30:	701a      	strb	r2, [r3, #0]
				setTimer(4,25);
 8000a32:	2119      	movs	r1, #25
 8000a34:	2004      	movs	r0, #4
 8000a36:	f000 fe0d 	bl	8001654 <setTimer>
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Yellow\r\nTime: %d\r\n",timeYellow/timeCycle), 200);
 8000a3a:	4b75      	ldr	r3, [pc, #468]	; (8000c10 <fsm_tuning+0x240>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	4b75      	ldr	r3, [pc, #468]	; (8000c14 <fsm_tuning+0x244>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a46:	461a      	mov	r2, r3
 8000a48:	4973      	ldr	r1, [pc, #460]	; (8000c18 <fsm_tuning+0x248>)
 8000a4a:	4874      	ldr	r0, [pc, #464]	; (8000c1c <fsm_tuning+0x24c>)
 8000a4c:	f003 fe42 	bl	80046d4 <siprintf>
 8000a50:	4603      	mov	r3, r0
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	23c8      	movs	r3, #200	; 0xc8
 8000a56:	4971      	ldr	r1, [pc, #452]	; (8000c1c <fsm_tuning+0x24c>)
 8000a58:	4871      	ldr	r0, [pc, #452]	; (8000c20 <fsm_tuning+0x250>)
 8000a5a:	f002 ff6f 	bl	800393c <HAL_UART_Transmit>
			if(isButtonPressed(2) == 1){
 8000a5e:	2002      	movs	r0, #2
 8000a60:	f7ff fb74 	bl	800014c <isButtonPressed>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d11d      	bne.n	8000aa6 <fsm_tuning+0xd6>
				time_red++;
 8000a6a:	4b6e      	ldr	r3, [pc, #440]	; (8000c24 <fsm_tuning+0x254>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	4a6c      	ldr	r2, [pc, #432]	; (8000c24 <fsm_tuning+0x254>)
 8000a72:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Red\r\nIncrease time to: %d\r\n",time_red), 200);
 8000a74:	4b6b      	ldr	r3, [pc, #428]	; (8000c24 <fsm_tuning+0x254>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	496b      	ldr	r1, [pc, #428]	; (8000c28 <fsm_tuning+0x258>)
 8000a7c:	4867      	ldr	r0, [pc, #412]	; (8000c1c <fsm_tuning+0x24c>)
 8000a7e:	f003 fe29 	bl	80046d4 <siprintf>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	23c8      	movs	r3, #200	; 0xc8
 8000a88:	4964      	ldr	r1, [pc, #400]	; (8000c1c <fsm_tuning+0x24c>)
 8000a8a:	4865      	ldr	r0, [pc, #404]	; (8000c20 <fsm_tuning+0x250>)
 8000a8c:	f002 ff56 	bl	800393c <HAL_UART_Transmit>
				if(time_red >= 10) time_red =  5;
 8000a90:	4b64      	ldr	r3, [pc, #400]	; (8000c24 <fsm_tuning+0x254>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b09      	cmp	r3, #9
 8000a96:	dd02      	ble.n	8000a9e <fsm_tuning+0xce>
 8000a98:	4b62      	ldr	r3, [pc, #392]	; (8000c24 <fsm_tuning+0x254>)
 8000a9a:	2205      	movs	r2, #5
 8000a9c:	601a      	str	r2, [r3, #0]
				timeWay1 = time_red;
 8000a9e:	4b61      	ldr	r3, [pc, #388]	; (8000c24 <fsm_tuning+0x254>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a62      	ldr	r2, [pc, #392]	; (8000c2c <fsm_tuning+0x25c>)
 8000aa4:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3)){
 8000aa6:	2003      	movs	r0, #3
 8000aa8:	f7ff fb50 	bl	800014c <isButtonPressed>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d015      	beq.n	8000ade <fsm_tuning+0x10e>
				timeRed = time_red*timeCycle;
 8000ab2:	4b5c      	ldr	r3, [pc, #368]	; (8000c24 <fsm_tuning+0x254>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a57      	ldr	r2, [pc, #348]	; (8000c14 <fsm_tuning+0x244>)
 8000ab8:	6812      	ldr	r2, [r2, #0]
 8000aba:	fb02 f303 	mul.w	r3, r2, r3
 8000abe:	4a5c      	ldr	r2, [pc, #368]	; (8000c30 <fsm_tuning+0x260>)
 8000ac0:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Red\r\nTime set to: %d\r\n",time_red), 200);
 8000ac2:	4b58      	ldr	r3, [pc, #352]	; (8000c24 <fsm_tuning+0x254>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	495a      	ldr	r1, [pc, #360]	; (8000c34 <fsm_tuning+0x264>)
 8000aca:	4854      	ldr	r0, [pc, #336]	; (8000c1c <fsm_tuning+0x24c>)
 8000acc:	f003 fe02 	bl	80046d4 <siprintf>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	23c8      	movs	r3, #200	; 0xc8
 8000ad6:	4951      	ldr	r1, [pc, #324]	; (8000c1c <fsm_tuning+0x24c>)
 8000ad8:	4851      	ldr	r0, [pc, #324]	; (8000c20 <fsm_tuning+0x250>)
 8000ada:	f002 ff2f 	bl	800393c <HAL_UART_Transmit>
			tuning_auto();
 8000ade:	f7ff ff55 	bl	800098c <tuning_auto>
			break;
 8000ae2:	e11a      	b.n	8000d1a <fsm_tuning+0x34a>
			if(timer_flag[4] == 1){
 8000ae4:	4b48      	ldr	r3, [pc, #288]	; (8000c08 <fsm_tuning+0x238>)
 8000ae6:	691b      	ldr	r3, [r3, #16]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d114      	bne.n	8000b16 <fsm_tuning+0x146>
				setTimer(4,25);
 8000aec:	2119      	movs	r1, #25
 8000aee:	2004      	movs	r0, #4
 8000af0:	f000 fdb0 	bl	8001654 <setTimer>
				if(blink == 0){
 8000af4:	4b45      	ldr	r3, [pc, #276]	; (8000c0c <fsm_tuning+0x23c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d107      	bne.n	8000b0c <fsm_tuning+0x13c>
					onYellow1(); // MOD_YELLOW
 8000afc:	f000 f972 	bl	8000de4 <onYellow1>
					onYellow2();
 8000b00:	f000 f9a8 	bl	8000e54 <onYellow2>
					blink = 1;
 8000b04:	4b41      	ldr	r3, [pc, #260]	; (8000c0c <fsm_tuning+0x23c>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	e004      	b.n	8000b16 <fsm_tuning+0x146>
					resetLED();
 8000b0c:	f000 f938 	bl	8000d80 <resetLED>
					blink = 0;
 8000b10:	4b3e      	ldr	r3, [pc, #248]	; (8000c0c <fsm_tuning+0x23c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(1)){
 8000b16:	2001      	movs	r0, #1
 8000b18:	f7ff fb18 	bl	800014c <isButtonPressed>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d018      	beq.n	8000b54 <fsm_tuning+0x184>
				state = MOD_GREEN;
 8000b22:	4b38      	ldr	r3, [pc, #224]	; (8000c04 <fsm_tuning+0x234>)
 8000b24:	2209      	movs	r2, #9
 8000b26:	701a      	strb	r2, [r3, #0]
				setTimer(4,25);
 8000b28:	2119      	movs	r1, #25
 8000b2a:	2004      	movs	r0, #4
 8000b2c:	f000 fd92 	bl	8001654 <setTimer>
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Green\r\nTime: %d\r\n",timeGreen/timeCycle), 200);
 8000b30:	4b41      	ldr	r3, [pc, #260]	; (8000c38 <fsm_tuning+0x268>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b37      	ldr	r3, [pc, #220]	; (8000c14 <fsm_tuning+0x244>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	493f      	ldr	r1, [pc, #252]	; (8000c3c <fsm_tuning+0x26c>)
 8000b40:	4836      	ldr	r0, [pc, #216]	; (8000c1c <fsm_tuning+0x24c>)
 8000b42:	f003 fdc7 	bl	80046d4 <siprintf>
 8000b46:	4603      	mov	r3, r0
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	23c8      	movs	r3, #200	; 0xc8
 8000b4c:	4933      	ldr	r1, [pc, #204]	; (8000c1c <fsm_tuning+0x24c>)
 8000b4e:	4834      	ldr	r0, [pc, #208]	; (8000c20 <fsm_tuning+0x250>)
 8000b50:	f002 fef4 	bl	800393c <HAL_UART_Transmit>
			if(isButtonPressed(2) == 1){
 8000b54:	2002      	movs	r0, #2
 8000b56:	f7ff faf9 	bl	800014c <isButtonPressed>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d11d      	bne.n	8000b9c <fsm_tuning+0x1cc>
				time_yellow++;
 8000b60:	4b37      	ldr	r3, [pc, #220]	; (8000c40 <fsm_tuning+0x270>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3301      	adds	r3, #1
 8000b66:	4a36      	ldr	r2, [pc, #216]	; (8000c40 <fsm_tuning+0x270>)
 8000b68:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Yellow\r\nIncrease time to: %d\r\n",time_yellow), 200);
 8000b6a:	4b35      	ldr	r3, [pc, #212]	; (8000c40 <fsm_tuning+0x270>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4934      	ldr	r1, [pc, #208]	; (8000c44 <fsm_tuning+0x274>)
 8000b72:	482a      	ldr	r0, [pc, #168]	; (8000c1c <fsm_tuning+0x24c>)
 8000b74:	f003 fdae 	bl	80046d4 <siprintf>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	23c8      	movs	r3, #200	; 0xc8
 8000b7e:	4927      	ldr	r1, [pc, #156]	; (8000c1c <fsm_tuning+0x24c>)
 8000b80:	4827      	ldr	r0, [pc, #156]	; (8000c20 <fsm_tuning+0x250>)
 8000b82:	f002 fedb 	bl	800393c <HAL_UART_Transmit>
				if(time_yellow >= 10) time_yellow =  2;
 8000b86:	4b2e      	ldr	r3, [pc, #184]	; (8000c40 <fsm_tuning+0x270>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b09      	cmp	r3, #9
 8000b8c:	dd02      	ble.n	8000b94 <fsm_tuning+0x1c4>
 8000b8e:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <fsm_tuning+0x270>)
 8000b90:	2202      	movs	r2, #2
 8000b92:	601a      	str	r2, [r3, #0]
				timeWay1 = time_yellow;
 8000b94:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <fsm_tuning+0x270>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a24      	ldr	r2, [pc, #144]	; (8000c2c <fsm_tuning+0x25c>)
 8000b9a:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3)){
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f7ff fad5 	bl	800014c <isButtonPressed>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d015      	beq.n	8000bd4 <fsm_tuning+0x204>
				timeYellow = time_yellow*timeCycle;
 8000ba8:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <fsm_tuning+0x270>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <fsm_tuning+0x244>)
 8000bae:	6812      	ldr	r2, [r2, #0]
 8000bb0:	fb02 f303 	mul.w	r3, r2, r3
 8000bb4:	4a16      	ldr	r2, [pc, #88]	; (8000c10 <fsm_tuning+0x240>)
 8000bb6:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Yellow\r\nTime set to: %d\r\n",time_yellow), 200);
 8000bb8:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <fsm_tuning+0x270>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4922      	ldr	r1, [pc, #136]	; (8000c48 <fsm_tuning+0x278>)
 8000bc0:	4816      	ldr	r0, [pc, #88]	; (8000c1c <fsm_tuning+0x24c>)
 8000bc2:	f003 fd87 	bl	80046d4 <siprintf>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	23c8      	movs	r3, #200	; 0xc8
 8000bcc:	4913      	ldr	r1, [pc, #76]	; (8000c1c <fsm_tuning+0x24c>)
 8000bce:	4814      	ldr	r0, [pc, #80]	; (8000c20 <fsm_tuning+0x250>)
 8000bd0:	f002 feb4 	bl	800393c <HAL_UART_Transmit>
			tuning_auto();
 8000bd4:	f7ff feda 	bl	800098c <tuning_auto>
			break;
 8000bd8:	e09f      	b.n	8000d1a <fsm_tuning+0x34a>
			if(timer_flag[4] == 1){
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <fsm_tuning+0x238>)
 8000bdc:	691b      	ldr	r3, [r3, #16]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d139      	bne.n	8000c56 <fsm_tuning+0x286>
				setTimer(4,25);
 8000be2:	2119      	movs	r1, #25
 8000be4:	2004      	movs	r0, #4
 8000be6:	f000 fd35 	bl	8001654 <setTimer>
				if(blink == 0){
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <fsm_tuning+0x23c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d12c      	bne.n	8000c4c <fsm_tuning+0x27c>
					onGreen1(); // MOD_GREEN
 8000bf2:	f000 f90b 	bl	8000e0c <onGreen1>
					onGreen2();
 8000bf6:	f000 f93d 	bl	8000e74 <onGreen2>
					blink = 1;
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <fsm_tuning+0x23c>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	e029      	b.n	8000c56 <fsm_tuning+0x286>
 8000c02:	bf00      	nop
 8000c04:	20000138 	.word	0x20000138
 8000c08:	20000150 	.word	0x20000150
 8000c0c:	20000144 	.word	0x20000144
 8000c10:	20000070 	.word	0x20000070
 8000c14:	080050ac 	.word	0x080050ac
 8000c18:	08004efc 	.word	0x08004efc
 8000c1c:	2000028c 	.word	0x2000028c
 8000c20:	20000240 	.word	0x20000240
 8000c24:	20000074 	.word	0x20000074
 8000c28:	08004f18 	.word	0x08004f18
 8000c2c:	2000013c 	.word	0x2000013c
 8000c30:	20000068 	.word	0x20000068
 8000c34:	08004f3c 	.word	0x08004f3c
 8000c38:	2000006c 	.word	0x2000006c
 8000c3c:	08004f5c 	.word	0x08004f5c
 8000c40:	2000007c 	.word	0x2000007c
 8000c44:	08004f78 	.word	0x08004f78
 8000c48:	08004fa0 	.word	0x08004fa0
					resetLED();
 8000c4c:	f000 f898 	bl	8000d80 <resetLED>
					blink = 0;
 8000c50:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <fsm_tuning+0x350>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(1)){
 8000c56:	2001      	movs	r0, #1
 8000c58:	f7ff fa78 	bl	800014c <isButtonPressed>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d018      	beq.n	8000c94 <fsm_tuning+0x2c4>
				state = MOD_RED;
 8000c62:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <fsm_tuning+0x354>)
 8000c64:	2207      	movs	r2, #7
 8000c66:	701a      	strb	r2, [r3, #0]
				setTimer(4,25);
 8000c68:	2119      	movs	r1, #25
 8000c6a:	2004      	movs	r0, #4
 8000c6c:	f000 fcf2 	bl	8001654 <setTimer>
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Red\r\nTime: %d\r\n",timeRed/timeCycle), 200);
 8000c70:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <fsm_tuning+0x358>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <fsm_tuning+0x35c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	492c      	ldr	r1, [pc, #176]	; (8000d30 <fsm_tuning+0x360>)
 8000c80:	482c      	ldr	r0, [pc, #176]	; (8000d34 <fsm_tuning+0x364>)
 8000c82:	f003 fd27 	bl	80046d4 <siprintf>
 8000c86:	4603      	mov	r3, r0
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	23c8      	movs	r3, #200	; 0xc8
 8000c8c:	4929      	ldr	r1, [pc, #164]	; (8000d34 <fsm_tuning+0x364>)
 8000c8e:	482a      	ldr	r0, [pc, #168]	; (8000d38 <fsm_tuning+0x368>)
 8000c90:	f002 fe54 	bl	800393c <HAL_UART_Transmit>
			if(isButtonPressed(2) == 1){
 8000c94:	2002      	movs	r0, #2
 8000c96:	f7ff fa59 	bl	800014c <isButtonPressed>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d11d      	bne.n	8000cdc <fsm_tuning+0x30c>
				time_green++;
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <fsm_tuning+0x36c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	4a25      	ldr	r2, [pc, #148]	; (8000d3c <fsm_tuning+0x36c>)
 8000ca8:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Green\r\nIncrease time to: %d\r\n",time_green), 200);
 8000caa:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <fsm_tuning+0x36c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4923      	ldr	r1, [pc, #140]	; (8000d40 <fsm_tuning+0x370>)
 8000cb2:	4820      	ldr	r0, [pc, #128]	; (8000d34 <fsm_tuning+0x364>)
 8000cb4:	f003 fd0e 	bl	80046d4 <siprintf>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	23c8      	movs	r3, #200	; 0xc8
 8000cbe:	491d      	ldr	r1, [pc, #116]	; (8000d34 <fsm_tuning+0x364>)
 8000cc0:	481d      	ldr	r0, [pc, #116]	; (8000d38 <fsm_tuning+0x368>)
 8000cc2:	f002 fe3b 	bl	800393c <HAL_UART_Transmit>
				if(time_green >= 10) time_green =  3;
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <fsm_tuning+0x36c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b09      	cmp	r3, #9
 8000ccc:	dd02      	ble.n	8000cd4 <fsm_tuning+0x304>
 8000cce:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <fsm_tuning+0x36c>)
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	601a      	str	r2, [r3, #0]
				timeWay1 = time_green;
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <fsm_tuning+0x36c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a1a      	ldr	r2, [pc, #104]	; (8000d44 <fsm_tuning+0x374>)
 8000cda:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3)){
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f7ff fa35 	bl	800014c <isButtonPressed>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d015      	beq.n	8000d14 <fsm_tuning+0x344>
				timeGreen = time_green*timeCycle;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <fsm_tuning+0x36c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <fsm_tuning+0x35c>)
 8000cee:	6812      	ldr	r2, [r2, #0]
 8000cf0:	fb02 f303 	mul.w	r3, r2, r3
 8000cf4:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <fsm_tuning+0x378>)
 8000cf6:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Green\r\nTime set to: %d\r\n",time_green), 200);
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <fsm_tuning+0x36c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4913      	ldr	r1, [pc, #76]	; (8000d4c <fsm_tuning+0x37c>)
 8000d00:	480c      	ldr	r0, [pc, #48]	; (8000d34 <fsm_tuning+0x364>)
 8000d02:	f003 fce7 	bl	80046d4 <siprintf>
 8000d06:	4603      	mov	r3, r0
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	23c8      	movs	r3, #200	; 0xc8
 8000d0c:	4909      	ldr	r1, [pc, #36]	; (8000d34 <fsm_tuning+0x364>)
 8000d0e:	480a      	ldr	r0, [pc, #40]	; (8000d38 <fsm_tuning+0x368>)
 8000d10:	f002 fe14 	bl	800393c <HAL_UART_Transmit>
			tuning_auto();
 8000d14:	f7ff fe3a 	bl	800098c <tuning_auto>
			break;
 8000d18:	bf00      	nop
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000144 	.word	0x20000144
 8000d24:	20000138 	.word	0x20000138
 8000d28:	20000068 	.word	0x20000068
 8000d2c:	080050ac 	.word	0x080050ac
 8000d30:	08004fc4 	.word	0x08004fc4
 8000d34:	2000028c 	.word	0x2000028c
 8000d38:	20000240 	.word	0x20000240
 8000d3c:	20000078 	.word	0x20000078
 8000d40:	08004fdc 	.word	0x08004fdc
 8000d44:	2000013c 	.word	0x2000013c
 8000d48:	2000006c 	.word	0x2000006c
 8000d4c:	08005004 	.word	0x08005004

08000d50 <clearScreen>:
	buffer7SEG[1] = a%10;
	buffer7SEG[2] = b/10;
	buffer7SEG[3] = b%10;
}

void clearScreen() {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
    // ANSI escape code for clearing the screen
    HAL_UART_Transmit(&huart2, (uint8_t*)"\033[2J", 4, HAL_MAX_DELAY);
 8000d54:	f04f 33ff 	mov.w	r3, #4294967295
 8000d58:	2204      	movs	r2, #4
 8000d5a:	4906      	ldr	r1, [pc, #24]	; (8000d74 <clearScreen+0x24>)
 8000d5c:	4806      	ldr	r0, [pc, #24]	; (8000d78 <clearScreen+0x28>)
 8000d5e:	f002 fded 	bl	800393c <HAL_UART_Transmit>
    // Move the cursor to the top-left corner
    HAL_UART_Transmit(&huart2, (uint8_t*)"\033[H", 3, HAL_MAX_DELAY);
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	2203      	movs	r2, #3
 8000d68:	4904      	ldr	r1, [pc, #16]	; (8000d7c <clearScreen+0x2c>)
 8000d6a:	4803      	ldr	r0, [pc, #12]	; (8000d78 <clearScreen+0x28>)
 8000d6c:	f002 fde6 	bl	800393c <HAL_UART_Transmit>
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	08005028 	.word	0x08005028
 8000d78:	20000240 	.word	0x20000240
 8000d7c:	08005030 	.word	0x08005030

08000d80 <resetLED>:
 *  Created on: Nov 28, 2023
 *      Author: Lenovo
 */

#include "led_control.h"
void resetLED(){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d8a:	480a      	ldr	r0, [pc, #40]	; (8000db4 <resetLED+0x34>)
 8000d8c:	f001 f9f9 	bl	8002182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2108      	movs	r1, #8
 8000d94:	4808      	ldr	r0, [pc, #32]	; (8000db8 <resetLED+0x38>)
 8000d96:	f001 f9f4 	bl	8002182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2120      	movs	r1, #32
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <resetLED+0x38>)
 8000da0:	f001 f9ef 	bl	8002182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2110      	movs	r1, #16
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <resetLED+0x38>)
 8000daa:	f001 f9ea 	bl	8002182 <HAL_GPIO_WritePin>
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40010800 	.word	0x40010800
 8000db8:	40010c00 	.word	0x40010c00

08000dbc <onRed1>:
void onRed1(){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, 1);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <onRed1+0x20>)
 8000dc8:	f001 f9db 	bl	8002182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2108      	movs	r1, #8
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <onRed1+0x24>)
 8000dd2:	f001 f9d6 	bl	8002182 <HAL_GPIO_WritePin>
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40010800 	.word	0x40010800
 8000de0:	40010c00 	.word	0x40010c00

08000de4 <onYellow1>:
void onYellow1(){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, 1);
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <onYellow1+0x20>)
 8000df0:	f001 f9c7 	bl	8002182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, 1);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2108      	movs	r1, #8
 8000df8:	4803      	ldr	r0, [pc, #12]	; (8000e08 <onYellow1+0x24>)
 8000dfa:	f001 f9c2 	bl	8002182 <HAL_GPIO_WritePin>
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40010800 	.word	0x40010800
 8000e08:	40010c00 	.word	0x40010c00

08000e0c <onGreen1>:
void onGreen1(){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <onGreen1+0x20>)
 8000e18:	f001 f9b3 	bl	8002182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, 1);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2108      	movs	r1, #8
 8000e20:	4803      	ldr	r0, [pc, #12]	; (8000e30 <onGreen1+0x24>)
 8000e22:	f001 f9ae 	bl	8002182 <HAL_GPIO_WritePin>
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40010800 	.word	0x40010800
 8000e30:	40010c00 	.word	0x40010c00

08000e34 <onRed2>:

void onRed2(){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, 1);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2120      	movs	r1, #32
 8000e3c:	4804      	ldr	r0, [pc, #16]	; (8000e50 <onRed2+0x1c>)
 8000e3e:	f001 f9a0 	bl	8002182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2110      	movs	r1, #16
 8000e46:	4802      	ldr	r0, [pc, #8]	; (8000e50 <onRed2+0x1c>)
 8000e48:	f001 f99b 	bl	8002182 <HAL_GPIO_WritePin>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40010c00 	.word	0x40010c00

08000e54 <onYellow2>:
void onYellow2(){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, 1);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2120      	movs	r1, #32
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <onYellow2+0x1c>)
 8000e5e:	f001 f990 	bl	8002182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, 1);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2110      	movs	r1, #16
 8000e66:	4802      	ldr	r0, [pc, #8]	; (8000e70 <onYellow2+0x1c>)
 8000e68:	f001 f98b 	bl	8002182 <HAL_GPIO_WritePin>
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40010c00 	.word	0x40010c00

08000e74 <onGreen2>:
void onGreen2(){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2120      	movs	r1, #32
 8000e7c:	4804      	ldr	r0, [pc, #16]	; (8000e90 <onGreen2+0x1c>)
 8000e7e:	f001 f980 	bl	8002182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, 1);
 8000e82:	2201      	movs	r2, #1
 8000e84:	2110      	movs	r1, #16
 8000e86:	4802      	ldr	r0, [pc, #8]	; (8000e90 <onGreen2+0x1c>)
 8000e88:	f001 f97b 	bl	8002182 <HAL_GPIO_WritePin>
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40010c00 	.word	0x40010c00

08000e94 <pedRed>:
void pedRed() {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_0_GPIO_Port, PED_0_Pin, 1);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <pedRed+0x20>)
 8000ea0:	f001 f96f 	bl	8002182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_1_GPIO_Port, PED_1_Pin, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eaa:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <pedRed+0x24>)
 8000eac:	f001 f969 	bl	8002182 <HAL_GPIO_WritePin>
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40010c00 	.word	0x40010c00
 8000eb8:	40010800 	.word	0x40010800

08000ebc <pedGreen>:
void pedGreen() {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_0_GPIO_Port, PED_0_Pin, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <pedGreen+0x20>)
 8000ec8:	f001 f95b 	bl	8002182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_1_GPIO_Port, PED_1_Pin, 1);	
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed2:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <pedGreen+0x24>)
 8000ed4:	f001 f955 	bl	8002182 <HAL_GPIO_WritePin>
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40010c00 	.word	0x40010c00
 8000ee0:	40010800 	.word	0x40010800

08000ee4 <pedReset>:
void pedReset() {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_0_GPIO_Port, PED_0_Pin, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <pedReset+0x20>)
 8000ef0:	f001 f947 	bl	8002182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_1_GPIO_Port, PED_1_Pin, 0);	
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efa:	4803      	ldr	r0, [pc, #12]	; (8000f08 <pedReset+0x24>)
 8000efc:	f001 f941 	bl	8002182 <HAL_GPIO_WritePin>
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40010c00 	.word	0x40010c00
 8000f08:	40010800 	.word	0x40010800

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f10:	f000 fd7a 	bl	8001a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f14:	f000 f844 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f18:	f000 f970 	bl	80011fc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f1c:	f000 f882 	bl	8001024 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f20:	f000 f8cc 	bl	80010bc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000f24:	f000 f940 	bl	80011a8 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000f28:	4815      	ldr	r0, [pc, #84]	; (8000f80 <main+0x74>)
 8000f2a:	f001 fda1 	bl	8002a70 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4814      	ldr	r0, [pc, #80]	; (8000f84 <main+0x78>)
 8000f32:	f001 fe47 	bl	8002bc4 <HAL_TIM_PWM_Start>
//  HAL_UART_Receive_IT(&huart2, &temp, 1)
  setTimer(0, 23);
 8000f36:	2117      	movs	r1, #23
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f000 fb8b 	bl	8001654 <setTimer>
//  setTimer(3, 10);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(&fsm_auto, 0, 10);
 8000f3e:	220a      	movs	r2, #10
 8000f40:	2100      	movs	r1, #0
 8000f42:	4811      	ldr	r0, [pc, #68]	; (8000f88 <main+0x7c>)
 8000f44:	f000 fa34 	bl	80013b0 <SCH_Add_Task>
  SCH_Add_Task(&fsm_pedestrian, 0, 10);
 8000f48:	220a      	movs	r2, #10
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	480f      	ldr	r0, [pc, #60]	; (8000f8c <main+0x80>)
 8000f4e:	f000 fa2f 	bl	80013b0 <SCH_Add_Task>
  SCH_Add_Task(&fsm_manual, 0, 20);
 8000f52:	2214      	movs	r2, #20
 8000f54:	2100      	movs	r1, #0
 8000f56:	480e      	ldr	r0, [pc, #56]	; (8000f90 <main+0x84>)
 8000f58:	f000 fa2a 	bl	80013b0 <SCH_Add_Task>
  SCH_Add_Task(&fsm_tuning, 0, 20);
 8000f5c:	2214      	movs	r2, #20
 8000f5e:	2100      	movs	r1, #0
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <main+0x88>)
 8000f62:	f000 fa25 	bl	80013b0 <SCH_Add_Task>
  SCH_Add_Task(&timerRun, 0, 10);
 8000f66:	220a      	movs	r2, #10
 8000f68:	2100      	movs	r1, #0
 8000f6a:	480b      	ldr	r0, [pc, #44]	; (8000f98 <main+0x8c>)
 8000f6c:	f000 fa20 	bl	80013b0 <SCH_Add_Task>
  SCH_Add_Task(&getKeyInput, 0, 10);
 8000f70:	220a      	movs	r2, #10
 8000f72:	2100      	movs	r1, #0
 8000f74:	4809      	ldr	r0, [pc, #36]	; (8000f9c <main+0x90>)
 8000f76:	f000 fa1b 	bl	80013b0 <SCH_Add_Task>

//  int i = 50;
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000f7a:	f000 fae9 	bl	8001550 <SCH_Dispatch_Tasks>
 8000f7e:	e7fc      	b.n	8000f7a <main+0x6e>
 8000f80:	200001f8 	.word	0x200001f8
 8000f84:	200001ac 	.word	0x200001ac
 8000f88:	08000365 	.word	0x08000365
 8000f8c:	08000899 	.word	0x08000899
 8000f90:	08000765 	.word	0x08000765
 8000f94:	080009d1 	.word	0x080009d1
 8000f98:	080016d5 	.word	0x080016d5
 8000f9c:	080001a1 	.word	0x080001a1

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b090      	sub	sp, #64	; 0x40
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 0318 	add.w	r3, r7, #24
 8000faa:	2228      	movs	r2, #40	; 0x28
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 fad2 	bl	8004558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fca:	2310      	movs	r3, #16
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000fd6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fdc:	f107 0318 	add.w	r3, r7, #24
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 f8e7 	bl	80021b4 <HAL_RCC_OscConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000fec:	f000 f97e 	bl	80012ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001000:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2102      	movs	r1, #2
 800100a:	4618      	mov	r0, r3
 800100c:	f001 fb52 	bl	80026b4 <HAL_RCC_ClockConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001016:	f000 f969 	bl	80012ec <Error_Handler>
  }
}
 800101a:	bf00      	nop
 800101c:	3740      	adds	r7, #64	; 0x40
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	463b      	mov	r3, r7
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001042:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001046:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <MX_TIM2_Init+0x94>)
 800104a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800104e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001058:	224f      	movs	r2, #79	; 0x4f
 800105a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_TIM2_Init+0x94>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001068:	4813      	ldr	r0, [pc, #76]	; (80010b8 <MX_TIM2_Init+0x94>)
 800106a:	f001 fcb1 	bl	80029d0 <HAL_TIM_Base_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001074:	f000 f93a 	bl	80012ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	4619      	mov	r1, r3
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001086:	f002 f809 	bl	800309c <HAL_TIM_ConfigClockSource>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001090:	f000 f92c 	bl	80012ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_TIM2_Init+0x94>)
 80010a2:	f002 fb8b 	bl	80037bc <HAL_TIMEx_MasterConfigSynchronization>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010ac:	f000 f91e 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200001f8 	.word	0x200001f8

080010bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08e      	sub	sp, #56	; 0x38
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d0:	f107 0320 	add.w	r3, r7, #32
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
 80010e8:	615a      	str	r2, [r3, #20]
 80010ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ec:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <MX_TIM3_Init+0xe4>)
 80010ee:	4a2d      	ldr	r2, [pc, #180]	; (80011a4 <MX_TIM3_Init+0xe8>)
 80010f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80010f2:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <MX_TIM3_Init+0xe4>)
 80010f4:	224f      	movs	r2, #79	; 0x4f
 80010f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f8:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <MX_TIM3_Init+0xe4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <MX_TIM3_Init+0xe4>)
 8001100:	224f      	movs	r2, #79	; 0x4f
 8001102:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001104:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <MX_TIM3_Init+0xe4>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <MX_TIM3_Init+0xe4>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001110:	4823      	ldr	r0, [pc, #140]	; (80011a0 <MX_TIM3_Init+0xe4>)
 8001112:	f001 fc5d 	bl	80029d0 <HAL_TIM_Base_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800111c:	f000 f8e6 	bl	80012ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001126:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112a:	4619      	mov	r1, r3
 800112c:	481c      	ldr	r0, [pc, #112]	; (80011a0 <MX_TIM3_Init+0xe4>)
 800112e:	f001 ffb5 	bl	800309c <HAL_TIM_ConfigClockSource>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001138:	f000 f8d8 	bl	80012ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800113c:	4818      	ldr	r0, [pc, #96]	; (80011a0 <MX_TIM3_Init+0xe4>)
 800113e:	f001 fce9 	bl	8002b14 <HAL_TIM_PWM_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001148:	f000 f8d0 	bl	80012ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001154:	f107 0320 	add.w	r3, r7, #32
 8001158:	4619      	mov	r1, r3
 800115a:	4811      	ldr	r0, [pc, #68]	; (80011a0 <MX_TIM3_Init+0xe4>)
 800115c:	f002 fb2e 	bl	80037bc <HAL_TIMEx_MasterConfigSynchronization>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001166:	f000 f8c1 	bl	80012ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800116a:	2360      	movs	r3, #96	; 0x60
 800116c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	4619      	mov	r1, r3
 8001180:	4807      	ldr	r0, [pc, #28]	; (80011a0 <MX_TIM3_Init+0xe4>)
 8001182:	f001 fec9 	bl	8002f18 <HAL_TIM_PWM_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800118c:	f000 f8ae 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001190:	4803      	ldr	r0, [pc, #12]	; (80011a0 <MX_TIM3_Init+0xe4>)
 8001192:	f000 fb1f 	bl	80017d4 <HAL_TIM_MspPostInit>

}
 8001196:	bf00      	nop
 8001198:	3738      	adds	r7, #56	; 0x38
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200001ac 	.word	0x200001ac
 80011a4:	40000400 	.word	0x40000400

080011a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <MX_USART2_UART_Init+0x50>)
 80011b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011e0:	f002 fb5c 	bl	800389c <HAL_UART_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ea:	f000 f87f 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000240 	.word	0x20000240
 80011f8:	40004400 	.word	0x40004400

080011fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <MX_GPIO_Init+0xd0>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a2d      	ldr	r2, [pc, #180]	; (80012cc <MX_GPIO_Init+0xd0>)
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <MX_GPIO_Init+0xd0>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001228:	4b28      	ldr	r3, [pc, #160]	; (80012cc <MX_GPIO_Init+0xd0>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a27      	ldr	r2, [pc, #156]	; (80012cc <MX_GPIO_Init+0xd0>)
 800122e:	f043 0308 	orr.w	r3, r3, #8
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <MX_GPIO_Init+0xd0>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PED_0_Pin|LED_01_Pin|LED_11_Pin|LED_10_Pin, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001246:	4822      	ldr	r0, [pc, #136]	; (80012d0 <MX_GPIO_Init+0xd4>)
 8001248:	f000 ff9b 	bl	8002182 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PED_1_Pin|LED_00_Pin, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001252:	4820      	ldr	r0, [pc, #128]	; (80012d4 <MX_GPIO_Init+0xd8>)
 8001254:	f000 ff95 	bl	8002182 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN3_Pin BTN0_Pin BTN1_Pin */
  GPIO_InitStruct.Pin = BTN3_Pin|BTN0_Pin|BTN1_Pin;
 8001258:	2313      	movs	r3, #19
 800125a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001260:	2301      	movs	r3, #1
 8001262:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	4619      	mov	r1, r3
 800126a:	481a      	ldr	r0, [pc, #104]	; (80012d4 <MX_GPIO_Init+0xd8>)
 800126c:	f000 fdee 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8001270:	2301      	movs	r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001278:	2301      	movs	r3, #1
 800127a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	4619      	mov	r1, r3
 8001282:	4813      	ldr	r0, [pc, #76]	; (80012d0 <MX_GPIO_Init+0xd4>)
 8001284:	f000 fde2 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PED_0_Pin LED_01_Pin LED_11_Pin LED_10_Pin */
  GPIO_InitStruct.Pin = PED_0_Pin|LED_01_Pin|LED_11_Pin|LED_10_Pin;
 8001288:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800128c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2302      	movs	r3, #2
 8001298:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	4619      	mov	r1, r3
 80012a0:	480b      	ldr	r0, [pc, #44]	; (80012d0 <MX_GPIO_Init+0xd4>)
 80012a2:	f000 fdd3 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PED_1_Pin LED_00_Pin */
  GPIO_InitStruct.Pin = PED_1_Pin|LED_00_Pin;
 80012a6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2302      	movs	r3, #2
 80012b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	4619      	mov	r1, r3
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_GPIO_Init+0xd8>)
 80012c0:	f000 fdc4 	bl	8001e4c <HAL_GPIO_Init>

}
 80012c4:	bf00      	nop
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010c00 	.word	0x40010c00
 80012d4:	40010800 	.word	0x40010800

080012d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80012e0:	f000 f90a 	bl	80014f8 <SCH_Update>
//	timerRun();
//	getKeyInput();
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <Error_Handler+0x8>
	...

080012f8 <SCH_Find_Position>:
}*sTaskList = 0;

char str[100];
uint8_t tracker[MAX_SCHEDULER_TASKS], mutex_lock;

void SCH_Find_Position(struct sTask *index){
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	if(index == sTaskList){
 8001300:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <SCH_Find_Position+0xb4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	429a      	cmp	r2, r3
 8001308:	d04b      	beq.n	80013a2 <SCH_Find_Position+0xaa>
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "FIND POSITION: only 1 task\r\n"), 200);
		return;
	}
	struct sTask *iterator = sTaskList;
 800130a:	4b28      	ldr	r3, [pc, #160]	; (80013ac <SCH_Find_Position+0xb4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	60fb      	str	r3, [r7, #12]
	//Not yet found position
	uint8_t check = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	72fb      	strb	r3, [r7, #11]
	while(iterator->delay <= index->delay){
 8001314:	e014      	b.n	8001340 <SCH_Find_Position+0x48>
		if(iterator == sTaskList) check += 1;
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <SCH_Find_Position+0xb4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d102      	bne.n	8001326 <SCH_Find_Position+0x2e>
 8001320:	7afb      	ldrb	r3, [r7, #11]
 8001322:	3301      	adds	r3, #1
 8001324:	72fb      	strb	r3, [r7, #11]
		if(check == 2) break;
 8001326:	7afb      	ldrb	r3, [r7, #11]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d010      	beq.n	800134e <SCH_Find_Position+0x56>
		index->delay -= iterator->delay;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	1ad2      	subs	r2, r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	60da      	str	r2, [r3, #12]
		iterator = iterator->right;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	60fb      	str	r3, [r7, #12]
	while(iterator->delay <= index->delay){
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	429a      	cmp	r2, r3
 800134a:	d9e4      	bls.n	8001316 <SCH_Find_Position+0x1e>
 800134c:	e000      	b.n	8001350 <SCH_Find_Position+0x58>
		if(check == 2) break;
 800134e:	bf00      	nop
	}
	//Found position
	if(index->delay == 0) index->run_flag = 1;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <SCH_Find_Position+0x66>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	761a      	strb	r2, [r3, #24]
	index->right = iterator;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	605a      	str	r2, [r3, #4]
	index->left = iterator->left;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	601a      	str	r2, [r3, #0]
	iterator->left->right = index;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	605a      	str	r2, [r3, #4]
	iterator->left = index;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	601a      	str	r2, [r3, #0]
	//Update the immediately after
	if(iterator != sTaskList){
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <SCH_Find_Position+0xb4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	429a      	cmp	r2, r3
 8001382:	d00f      	beq.n	80013a4 <SCH_Find_Position+0xac>
		iterator->delay -= index->delay;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	1ad2      	subs	r2, r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	60da      	str	r2, [r3, #12]
		if(iterator->delay == 0) iterator->run_flag = 1;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d104      	bne.n	80013a4 <SCH_Find_Position+0xac>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2201      	movs	r2, #1
 800139e:	761a      	strb	r2, [r3, #24]
 80013a0:	e000      	b.n	80013a4 <SCH_Find_Position+0xac>
		return;
 80013a2:	bf00      	nop
	}
	//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "FIND POSITION: %lu %lu\r\n", index->taskID, index->delay), 200);
	//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "FIND POSITION: Before %lu %lu\r\n", index->left->taskID, index->left->delay), 200);
	//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "FIND POSITION: After %lu %lu\r\n", index->right->taskID, index->right->delay), 200);
}
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	2000014c 	.word	0x2000014c

080013b0 <SCH_Add_Task>:

int SCH_Add_Task(void (*funcPointer)(), uint32_t delay, uint32_t period){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
	if(!funcPointer){
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10d      	bne.n	80013de <SCH_Add_Task+0x2e>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Function pointer invalid\r\n"), 200);
 80013c2:	4943      	ldr	r1, [pc, #268]	; (80014d0 <SCH_Add_Task+0x120>)
 80013c4:	4843      	ldr	r0, [pc, #268]	; (80014d4 <SCH_Add_Task+0x124>)
 80013c6:	f003 f985 	bl	80046d4 <siprintf>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	23c8      	movs	r3, #200	; 0xc8
 80013d0:	4940      	ldr	r1, [pc, #256]	; (80014d4 <SCH_Add_Task+0x124>)
 80013d2:	4841      	ldr	r0, [pc, #260]	; (80014d8 <SCH_Add_Task+0x128>)
 80013d4:	f002 fab2 	bl	800393c <HAL_UART_Transmit>
		return -1;
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
 80013dc:	e074      	b.n	80014c8 <SCH_Add_Task+0x118>
	}
	uint32_t runnerID = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
	while((runnerID < MAX_SCHEDULER_TASKS) && (tracker[runnerID])){
 80013e2:	e002      	b.n	80013ea <SCH_Add_Task+0x3a>
		runnerID += 1;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
	while((runnerID < MAX_SCHEDULER_TASKS) && (tracker[runnerID])){
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	2b27      	cmp	r3, #39	; 0x27
 80013ee:	d805      	bhi.n	80013fc <SCH_Add_Task+0x4c>
 80013f0:	4a3a      	ldr	r2, [pc, #232]	; (80014dc <SCH_Add_Task+0x12c>)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	4413      	add	r3, r2
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f3      	bne.n	80013e4 <SCH_Add_Task+0x34>
	}
	if(runnerID == MAX_SCHEDULER_TASKS){
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2b28      	cmp	r3, #40	; 0x28
 8001400:	d10d      	bne.n	800141e <SCH_Add_Task+0x6e>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Scheduler full\r\n"), 200);
 8001402:	4937      	ldr	r1, [pc, #220]	; (80014e0 <SCH_Add_Task+0x130>)
 8001404:	4833      	ldr	r0, [pc, #204]	; (80014d4 <SCH_Add_Task+0x124>)
 8001406:	f003 f965 	bl	80046d4 <siprintf>
 800140a:	4603      	mov	r3, r0
 800140c:	b29a      	uxth	r2, r3
 800140e:	23c8      	movs	r3, #200	; 0xc8
 8001410:	4930      	ldr	r1, [pc, #192]	; (80014d4 <SCH_Add_Task+0x124>)
 8001412:	4831      	ldr	r0, [pc, #196]	; (80014d8 <SCH_Add_Task+0x128>)
 8001414:	f002 fa92 	bl	800393c <HAL_UART_Transmit>
		return -1;
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
 800141c:	e054      	b.n	80014c8 <SCH_Add_Task+0x118>
	}else tracker[runnerID] = 1;
 800141e:	4a2f      	ldr	r2, [pc, #188]	; (80014dc <SCH_Add_Task+0x12c>)
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	4413      	add	r3, r2
 8001424:	2201      	movs	r2, #1
 8001426:	701a      	strb	r2, [r3, #0]
	mutex_lock = 1;
 8001428:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <SCH_Add_Task+0x134>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
	struct sTask *curTask = (struct sTask*)malloc(sizeof(struct sTask));
 800142e:	201c      	movs	r0, #28
 8001430:	f003 f882 	bl	8004538 <malloc>
 8001434:	4603      	mov	r3, r0
 8001436:	613b      	str	r3, [r7, #16]
	curTask->delay = delay/TIMER_INTERRUPT_PERIOD;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4a2b      	ldr	r2, [pc, #172]	; (80014e8 <SCH_Add_Task+0x138>)
 800143c:	fba2 2303 	umull	r2, r3, r2, r3
 8001440:	08da      	lsrs	r2, r3, #3
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	60da      	str	r2, [r3, #12]
	curTask->period = period/TIMER_INTERRUPT_PERIOD;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a27      	ldr	r2, [pc, #156]	; (80014e8 <SCH_Add_Task+0x138>)
 800144a:	fba2 2303 	umull	r2, r3, r2, r3
 800144e:	08da      	lsrs	r2, r3, #3
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	611a      	str	r2, [r3, #16]
	curTask->funcPointer = funcPointer;
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	609a      	str	r2, [r3, #8]
	curTask->taskID = runnerID;
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	615a      	str	r2, [r3, #20]
	curTask->run_flag = 0;
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	2200      	movs	r2, #0
 8001464:	761a      	strb	r2, [r3, #24]
	if(sTaskList){
 8001466:	4b21      	ldr	r3, [pc, #132]	; (80014ec <SCH_Add_Task+0x13c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d011      	beq.n	8001492 <SCH_Add_Task+0xe2>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Added %lu\r\n", curTask->taskID), 200);
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	461a      	mov	r2, r3
 8001474:	491e      	ldr	r1, [pc, #120]	; (80014f0 <SCH_Add_Task+0x140>)
 8001476:	4817      	ldr	r0, [pc, #92]	; (80014d4 <SCH_Add_Task+0x124>)
 8001478:	f003 f92c 	bl	80046d4 <siprintf>
 800147c:	4603      	mov	r3, r0
 800147e:	b29a      	uxth	r2, r3
 8001480:	23c8      	movs	r3, #200	; 0xc8
 8001482:	4914      	ldr	r1, [pc, #80]	; (80014d4 <SCH_Add_Task+0x124>)
 8001484:	4814      	ldr	r0, [pc, #80]	; (80014d8 <SCH_Add_Task+0x128>)
 8001486:	f002 fa59 	bl	800393c <HAL_UART_Transmit>
		SCH_Find_Position(curTask);
 800148a:	6938      	ldr	r0, [r7, #16]
 800148c:	f7ff ff34 	bl	80012f8 <SCH_Find_Position>
 8001490:	e016      	b.n	80014c0 <SCH_Add_Task+0x110>
	}else{
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Added first %lu\r\n", curTask->taskID), 200);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	461a      	mov	r2, r3
 8001498:	4916      	ldr	r1, [pc, #88]	; (80014f4 <SCH_Add_Task+0x144>)
 800149a:	480e      	ldr	r0, [pc, #56]	; (80014d4 <SCH_Add_Task+0x124>)
 800149c:	f003 f91a 	bl	80046d4 <siprintf>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	23c8      	movs	r3, #200	; 0xc8
 80014a6:	490b      	ldr	r1, [pc, #44]	; (80014d4 <SCH_Add_Task+0x124>)
 80014a8:	480b      	ldr	r0, [pc, #44]	; (80014d8 <SCH_Add_Task+0x128>)
 80014aa:	f002 fa47 	bl	800393c <HAL_UART_Transmit>
		curTask->left = curTask;
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	601a      	str	r2, [r3, #0]
		curTask->right = curTask;
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	605a      	str	r2, [r3, #4]
		sTaskList = curTask;
 80014ba:	4a0c      	ldr	r2, [pc, #48]	; (80014ec <SCH_Add_Task+0x13c>)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	6013      	str	r3, [r2, #0]
	}
	mutex_lock = 0;
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <SCH_Add_Task+0x134>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
	return runnerID;
 80014c6:	697b      	ldr	r3, [r7, #20]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	08005034 	.word	0x08005034
 80014d4:	2000028c 	.word	0x2000028c
 80014d8:	20000240 	.word	0x20000240
 80014dc:	200002f0 	.word	0x200002f0
 80014e0:	0800505c 	.word	0x0800505c
 80014e4:	20000288 	.word	0x20000288
 80014e8:	cccccccd 	.word	0xcccccccd
 80014ec:	2000014c 	.word	0x2000014c
 80014f0:	08005078 	.word	0x08005078
 80014f4:	08005090 	.word	0x08005090

080014f8 <SCH_Update>:

void SCH_Update(){
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
	if((sTaskList) && (!sTaskList->run_flag) && (!mutex_lock)){
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <SCH_Update+0x50>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d01d      	beq.n	8001540 <SCH_Update+0x48>
 8001504:	4b10      	ldr	r3, [pc, #64]	; (8001548 <SCH_Update+0x50>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	7e1b      	ldrb	r3, [r3, #24]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d118      	bne.n	8001540 <SCH_Update+0x48>
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <SCH_Update+0x54>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d114      	bne.n	8001540 <SCH_Update+0x48>
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "UPDATE: %lu\r\n", sTaskList->taskID), 50);
		if(sTaskList->delay > 0) sTaskList->delay -= 1;
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <SCH_Update+0x50>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d006      	beq.n	800152e <SCH_Update+0x36>
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <SCH_Update+0x50>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <SCH_Update+0x50>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	3a01      	subs	r2, #1
 800152c:	60da      	str	r2, [r3, #12]
		if(sTaskList->delay <= 0) sTaskList->run_flag = 1;
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <SCH_Update+0x50>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d103      	bne.n	8001540 <SCH_Update+0x48>
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <SCH_Update+0x50>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2201      	movs	r2, #1
 800153e:	761a      	strb	r2, [r3, #24]
	}
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	2000014c 	.word	0x2000014c
 800154c:	20000288 	.word	0x20000288

08001550 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(){
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
	mutex_lock = 1;
 8001556:	4b25      	ldr	r3, [pc, #148]	; (80015ec <SCH_Dispatch_Tasks+0x9c>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
	while((sTaskList) && (sTaskList->run_flag)){
 800155c:	e036      	b.n	80015cc <SCH_Dispatch_Tasks+0x7c>
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "DISPATCH: Task executing %lu\r\n", sTaskList->taskID), 200);
		(*sTaskList->funcPointer)();
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <SCH_Dispatch_Tasks+0xa0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	4798      	blx	r3
		if(sTaskList->period == 0){
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <SCH_Dispatch_Tasks+0xa0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10d      	bne.n	800158c <SCH_Dispatch_Tasks+0x3c>
			struct sTask *toDelete = sTaskList;
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <SCH_Dispatch_Tasks+0xa0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	603b      	str	r3, [r7, #0]
			sTaskList = sTaskList->right;
 8001576:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <SCH_Dispatch_Tasks+0xa0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <SCH_Dispatch_Tasks+0xa0>)
 800157e:	6013      	str	r3, [r2, #0]
			SCH_Delete_Task(toDelete->taskID);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	4618      	mov	r0, r3
 8001586:	f000 f835 	bl	80015f4 <SCH_Delete_Task>
 800158a:	e01f      	b.n	80015cc <SCH_Dispatch_Tasks+0x7c>
		}else{
			struct sTask *toFind = sTaskList;
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <SCH_Dispatch_Tasks+0xa0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	607b      	str	r3, [r7, #4]
			sTaskList->right->left = sTaskList->left;
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <SCH_Dispatch_Tasks+0xa0>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <SCH_Dispatch_Tasks+0xa0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	601a      	str	r2, [r3, #0]
			sTaskList->left->right = sTaskList->right;
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <SCH_Dispatch_Tasks+0xa0>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <SCH_Dispatch_Tasks+0xa0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6852      	ldr	r2, [r2, #4]
 80015ac:	605a      	str	r2, [r3, #4]
			sTaskList = sTaskList->right;
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <SCH_Dispatch_Tasks+0xa0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <SCH_Dispatch_Tasks+0xa0>)
 80015b6:	6013      	str	r3, [r2, #0]
			toFind->run_flag = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	761a      	strb	r2, [r3, #24]
			toFind->delay = toFind->period;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60da      	str	r2, [r3, #12]
			SCH_Find_Position(toFind);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fe96 	bl	80012f8 <SCH_Find_Position>
	while((sTaskList) && (sTaskList->run_flag)){
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <SCH_Dispatch_Tasks+0xa0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d004      	beq.n	80015de <SCH_Dispatch_Tasks+0x8e>
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <SCH_Dispatch_Tasks+0xa0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	7e1b      	ldrb	r3, [r3, #24]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1bf      	bne.n	800155e <SCH_Dispatch_Tasks+0xe>
		}
	}
	mutex_lock = 0;
 80015de:	4b03      	ldr	r3, [pc, #12]	; (80015ec <SCH_Dispatch_Tasks+0x9c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000288 	.word	0x20000288
 80015f0:	2000014c 	.word	0x2000014c

080015f4 <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t index){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	if(tracker[index]){
 80015fc:	4a13      	ldr	r2, [pc, #76]	; (800164c <SCH_Delete_Task+0x58>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d01d      	beq.n	8001644 <SCH_Delete_Task+0x50>
		tracker[index] = 0;
 8001608:	4a10      	ldr	r2, [pc, #64]	; (800164c <SCH_Delete_Task+0x58>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
		struct sTask *iterator = sTaskList;
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <SCH_Delete_Task+0x5c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	60fb      	str	r3, [r7, #12]
		while(iterator->taskID != index){
 8001618:	e002      	b.n	8001620 <SCH_Delete_Task+0x2c>
			iterator = iterator->right;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	60fb      	str	r3, [r7, #12]
		while(iterator->taskID != index){
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	429a      	cmp	r2, r3
 8001628:	d1f7      	bne.n	800161a <SCH_Delete_Task+0x26>
		}
		iterator->right->left = iterator->left;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	601a      	str	r2, [r3, #0]
		iterator->left->right = iterator->right;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	6852      	ldr	r2, [r2, #4]
 800163c:	605a      	str	r2, [r3, #4]
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "DELETE: Free %lu\r\n", iterator->taskID), 200);
		free(iterator);
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f002 ff82 	bl	8004548 <free>
	}else{
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "DELETE: Position empty\r\n"), 200);
	}
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200002f0 	.word	0x200002f0
 8001650:	2000014c 	.word	0x2000014c

08001654 <setTimer>:
#include "software_timer.h"

int timer_flag[10] = {0};
int timer_cnt[10] = {0};

void setTimer(int i, int duration){
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
	timer_flag[i] = 0;
 800165e:	4a07      	ldr	r2, [pc, #28]	; (800167c <setTimer+0x28>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2100      	movs	r1, #0
 8001664:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_cnt[i] = duration;
 8001668:	4905      	ldr	r1, [pc, #20]	; (8001680 <setTimer+0x2c>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	20000150 	.word	0x20000150
 8001680:	20000178 	.word	0x20000178

08001684 <timer_run>:

void timer_run(int i){
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	if(timer_cnt[i] > 0){
 800168c:	4a0f      	ldr	r2, [pc, #60]	; (80016cc <timer_run+0x48>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001694:	2b00      	cmp	r3, #0
 8001696:	dd13      	ble.n	80016c0 <timer_run+0x3c>
		timer_cnt[i]--;
 8001698:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <timer_run+0x48>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a0:	1e5a      	subs	r2, r3, #1
 80016a2:	490a      	ldr	r1, [pc, #40]	; (80016cc <timer_run+0x48>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_cnt[i] <= 0) timer_flag[i] = 1;
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <timer_run+0x48>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	dc04      	bgt.n	80016c0 <timer_run+0x3c>
 80016b6:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <timer_run+0x4c>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2101      	movs	r1, #1
 80016bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000178 	.word	0x20000178
 80016d0:	20000150 	.word	0x20000150

080016d4 <timerRun>:

void timerRun(){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	timer_run(0);
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff ffd3 	bl	8001684 <timer_run>
	timer_run(1);
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff ffd0 	bl	8001684 <timer_run>
	timer_run(2);
 80016e4:	2002      	movs	r0, #2
 80016e6:	f7ff ffcd 	bl	8001684 <timer_run>
	timer_run(3);
 80016ea:	2003      	movs	r0, #3
 80016ec:	f7ff ffca 	bl	8001684 <timer_run>
	timer_run(4);
 80016f0:	2004      	movs	r0, #4
 80016f2:	f7ff ffc7 	bl	8001684 <timer_run>
	timer_run(9);
 80016f6:	2009      	movs	r0, #9
 80016f8:	f7ff ffc4 	bl	8001684 <timer_run>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_MspInit+0x5c>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	4a14      	ldr	r2, [pc, #80]	; (800175c <HAL_MspInit+0x5c>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6193      	str	r3, [r2, #24]
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_MspInit+0x5c>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <HAL_MspInit+0x5c>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a0e      	ldr	r2, [pc, #56]	; (800175c <HAL_MspInit+0x5c>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	61d3      	str	r3, [r2, #28]
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_MspInit+0x5c>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_MspInit+0x60>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_MspInit+0x60>)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	40021000 	.word	0x40021000
 8001760:	40010000 	.word	0x40010000

08001764 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001774:	d114      	bne.n	80017a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_TIM_Base_MspInit+0x68>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	4a14      	ldr	r2, [pc, #80]	; (80017cc <HAL_TIM_Base_MspInit+0x68>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	61d3      	str	r3, [r2, #28]
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_TIM_Base_MspInit+0x68>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	201c      	movs	r0, #28
 8001794:	f000 fa71 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001798:	201c      	movs	r0, #28
 800179a:	f000 fa8a 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800179e:	e010      	b.n	80017c2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <HAL_TIM_Base_MspInit+0x6c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d10b      	bne.n	80017c2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_TIM_Base_MspInit+0x68>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	4a07      	ldr	r2, [pc, #28]	; (80017cc <HAL_TIM_Base_MspInit+0x68>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	61d3      	str	r3, [r2, #28]
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_TIM_Base_MspInit+0x68>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
}
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40000400 	.word	0x40000400

080017d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a0f      	ldr	r2, [pc, #60]	; (800182c <HAL_TIM_MspPostInit+0x58>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d117      	bne.n	8001824 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_TIM_MspPostInit+0x5c>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <HAL_TIM_MspPostInit+0x5c>)
 80017fa:	f043 0304 	orr.w	r3, r3, #4
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_TIM_MspPostInit+0x5c>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800180c:	2340      	movs	r3, #64	; 0x40
 800180e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2302      	movs	r3, #2
 8001816:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	4619      	mov	r1, r3
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <HAL_TIM_MspPostInit+0x60>)
 8001820:	f000 fb14 	bl	8001e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001824:	bf00      	nop
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40000400 	.word	0x40000400
 8001830:	40021000 	.word	0x40021000
 8001834:	40010800 	.word	0x40010800

08001838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a1b      	ldr	r2, [pc, #108]	; (80018c0 <HAL_UART_MspInit+0x88>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d12f      	bne.n	80018b8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <HAL_UART_MspInit+0x8c>)
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <HAL_UART_MspInit+0x8c>)
 800185e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001862:	61d3      	str	r3, [r2, #28]
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <HAL_UART_MspInit+0x8c>)
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HAL_UART_MspInit+0x8c>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	4a13      	ldr	r2, [pc, #76]	; (80018c4 <HAL_UART_MspInit+0x8c>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	6193      	str	r3, [r2, #24]
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_UART_MspInit+0x8c>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001888:	2304      	movs	r3, #4
 800188a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	4619      	mov	r1, r3
 800189a:	480b      	ldr	r0, [pc, #44]	; (80018c8 <HAL_UART_MspInit+0x90>)
 800189c:	f000 fad6 	bl	8001e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018a0:	2308      	movs	r3, #8
 80018a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 0310 	add.w	r3, r7, #16
 80018b0:	4619      	mov	r1, r3
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <HAL_UART_MspInit+0x90>)
 80018b4:	f000 faca 	bl	8001e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018b8:	bf00      	nop
 80018ba:	3720      	adds	r7, #32
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40004400 	.word	0x40004400
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010800 	.word	0x40010800

080018cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <NMI_Handler+0x4>

080018d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <HardFault_Handler+0x4>

080018d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <MemManage_Handler+0x4>

080018de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <BusFault_Handler+0x4>

080018e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <UsageFault_Handler+0x4>

080018ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001912:	f000 f8bf 	bl	8001a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <TIM2_IRQHandler+0x10>)
 8001922:	f001 f9f1 	bl	8002d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200001f8 	.word	0x200001f8

08001930 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <USART2_IRQHandler+0x10>)
 8001936:	f002 f885 	bl	8003a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000240 	.word	0x20000240

08001944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <_sbrk+0x5c>)
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <_sbrk+0x60>)
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d102      	bne.n	8001966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <_sbrk+0x64>)
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <_sbrk+0x68>)
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	429a      	cmp	r2, r3
 8001972:	d207      	bcs.n	8001984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001974:	f002 fdb6 	bl	80044e4 <__errno>
 8001978:	4603      	mov	r3, r0
 800197a:	220c      	movs	r2, #12
 800197c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	e009      	b.n	8001998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <_sbrk+0x64>)
 8001994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20005000 	.word	0x20005000
 80019a4:	00000400 	.word	0x00000400
 80019a8:	200001a0 	.word	0x200001a0
 80019ac:	20000330 	.word	0x20000330

080019b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019bc:	f7ff fff8 	bl	80019b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c0:	480b      	ldr	r0, [pc, #44]	; (80019f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019c2:	490c      	ldr	r1, [pc, #48]	; (80019f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019c4:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c8:	e002      	b.n	80019d0 <LoopCopyDataInit>

080019ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ce:	3304      	adds	r3, #4

080019d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d4:	d3f9      	bcc.n	80019ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d6:	4a09      	ldr	r2, [pc, #36]	; (80019fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019d8:	4c09      	ldr	r4, [pc, #36]	; (8001a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019dc:	e001      	b.n	80019e2 <LoopFillZerobss>

080019de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e0:	3204      	adds	r2, #4

080019e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e4:	d3fb      	bcc.n	80019de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019e6:	f002 fd83 	bl	80044f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ea:	f7ff fa8f 	bl	8000f0c <main>
  bx lr
 80019ee:	4770      	bx	lr
  ldr r0, =_sdata
 80019f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f4:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80019f8:	08005118 	.word	0x08005118
  ldr r2, =_sbss
 80019fc:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8001a00:	2000032c 	.word	0x2000032c

08001a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <ADC1_2_IRQHandler>
	...

08001a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_Init+0x28>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <HAL_Init+0x28>)
 8001a12:	f043 0310 	orr.w	r3, r3, #16
 8001a16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a18:	2003      	movs	r0, #3
 8001a1a:	f000 f923 	bl	8001c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1e:	200f      	movs	r0, #15
 8001a20:	f000 f808 	bl	8001a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a24:	f7ff fe6c 	bl	8001700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40022000 	.word	0x40022000

08001a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_InitTick+0x54>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_InitTick+0x58>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f93b 	bl	8001cce <HAL_SYSTICK_Config>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00e      	b.n	8001a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b0f      	cmp	r3, #15
 8001a66:	d80a      	bhi.n	8001a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f000 f903 	bl	8001c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a74:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <HAL_InitTick+0x5c>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e000      	b.n	8001a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	2000009c 	.word	0x2000009c
 8001a8c:	200000a4 	.word	0x200000a4
 8001a90:	200000a0 	.word	0x200000a0

08001a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_IncTick+0x1c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_IncTick+0x20>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4a03      	ldr	r2, [pc, #12]	; (8001ab4 <HAL_IncTick+0x20>)
 8001aa6:	6013      	str	r3, [r2, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	200000a4 	.word	0x200000a4
 8001ab4:	20000318 	.word	0x20000318

08001ab8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;
 8001abc:	4b02      	ldr	r3, [pc, #8]	; (8001ac8 <HAL_GetTick+0x10>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	20000318 	.word	0x20000318

08001acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afe:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	60d3      	str	r3, [r2, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <__NVIC_GetPriorityGrouping+0x18>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	f003 0307 	and.w	r3, r3, #7
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	db0b      	blt.n	8001b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	f003 021f 	and.w	r2, r3, #31
 8001b48:	4906      	ldr	r1, [pc, #24]	; (8001b64 <__NVIC_EnableIRQ+0x34>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	2001      	movs	r0, #1
 8001b52:	fa00 f202 	lsl.w	r2, r0, r2
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	; (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
         );
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c30:	d301      	bcc.n	8001c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00f      	b.n	8001c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <SysTick_Config+0x40>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3e:	210f      	movs	r1, #15
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f7ff ff90 	bl	8001b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <SysTick_Config+0x40>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <SysTick_Config+0x40>)
 8001c50:	2207      	movs	r2, #7
 8001c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	e000e010 	.word	0xe000e010

08001c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff2d 	bl	8001acc <__NVIC_SetPriorityGrouping>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8c:	f7ff ff42 	bl	8001b14 <__NVIC_GetPriorityGrouping>
 8001c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff ff90 	bl	8001bbc <NVIC_EncodePriority>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff5f 	bl	8001b68 <__NVIC_SetPriority>
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff35 	bl	8001b30 <__NVIC_EnableIRQ>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffa2 	bl	8001c20 <SysTick_Config>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b085      	sub	sp, #20
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d008      	beq.n	8001d10 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2204      	movs	r2, #4
 8001d02:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e020      	b.n	8001d52 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 020e 	bic.w	r2, r2, #14
 8001d1e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d38:	2101      	movs	r1, #1
 8001d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d005      	beq.n	8001d80 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2204      	movs	r2, #4
 8001d78:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	73fb      	strb	r3, [r7, #15]
 8001d7e:	e051      	b.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 020e 	bic.w	r2, r2, #14
 8001d8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0201 	bic.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a22      	ldr	r2, [pc, #136]	; (8001e30 <HAL_DMA_Abort_IT+0xd4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d029      	beq.n	8001dfe <HAL_DMA_Abort_IT+0xa2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a21      	ldr	r2, [pc, #132]	; (8001e34 <HAL_DMA_Abort_IT+0xd8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d022      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x9e>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a1f      	ldr	r2, [pc, #124]	; (8001e38 <HAL_DMA_Abort_IT+0xdc>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01a      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x98>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1e      	ldr	r2, [pc, #120]	; (8001e3c <HAL_DMA_Abort_IT+0xe0>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d012      	beq.n	8001dee <HAL_DMA_Abort_IT+0x92>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1c      	ldr	r2, [pc, #112]	; (8001e40 <HAL_DMA_Abort_IT+0xe4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00a      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x8c>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a1b      	ldr	r2, [pc, #108]	; (8001e44 <HAL_DMA_Abort_IT+0xe8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d102      	bne.n	8001de2 <HAL_DMA_Abort_IT+0x86>
 8001ddc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001de0:	e00e      	b.n	8001e00 <HAL_DMA_Abort_IT+0xa4>
 8001de2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001de6:	e00b      	b.n	8001e00 <HAL_DMA_Abort_IT+0xa4>
 8001de8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dec:	e008      	b.n	8001e00 <HAL_DMA_Abort_IT+0xa4>
 8001dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df2:	e005      	b.n	8001e00 <HAL_DMA_Abort_IT+0xa4>
 8001df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001df8:	e002      	b.n	8001e00 <HAL_DMA_Abort_IT+0xa4>
 8001dfa:	2310      	movs	r3, #16
 8001dfc:	e000      	b.n	8001e00 <HAL_DMA_Abort_IT+0xa4>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <HAL_DMA_Abort_IT+0xec>)
 8001e02:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	4798      	blx	r3
    } 
  }
  return status;
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40020008 	.word	0x40020008
 8001e34:	4002001c 	.word	0x4002001c
 8001e38:	40020030 	.word	0x40020030
 8001e3c:	40020044 	.word	0x40020044
 8001e40:	40020058 	.word	0x40020058
 8001e44:	4002006c 	.word	0x4002006c
 8001e48:	40020000 	.word	0x40020000

08001e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b08b      	sub	sp, #44	; 0x2c
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5e:	e169      	b.n	8002134 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e60:	2201      	movs	r2, #1
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	f040 8158 	bne.w	800212e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4a9a      	ldr	r2, [pc, #616]	; (80020ec <HAL_GPIO_Init+0x2a0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d05e      	beq.n	8001f46 <HAL_GPIO_Init+0xfa>
 8001e88:	4a98      	ldr	r2, [pc, #608]	; (80020ec <HAL_GPIO_Init+0x2a0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d875      	bhi.n	8001f7a <HAL_GPIO_Init+0x12e>
 8001e8e:	4a98      	ldr	r2, [pc, #608]	; (80020f0 <HAL_GPIO_Init+0x2a4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d058      	beq.n	8001f46 <HAL_GPIO_Init+0xfa>
 8001e94:	4a96      	ldr	r2, [pc, #600]	; (80020f0 <HAL_GPIO_Init+0x2a4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d86f      	bhi.n	8001f7a <HAL_GPIO_Init+0x12e>
 8001e9a:	4a96      	ldr	r2, [pc, #600]	; (80020f4 <HAL_GPIO_Init+0x2a8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d052      	beq.n	8001f46 <HAL_GPIO_Init+0xfa>
 8001ea0:	4a94      	ldr	r2, [pc, #592]	; (80020f4 <HAL_GPIO_Init+0x2a8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d869      	bhi.n	8001f7a <HAL_GPIO_Init+0x12e>
 8001ea6:	4a94      	ldr	r2, [pc, #592]	; (80020f8 <HAL_GPIO_Init+0x2ac>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d04c      	beq.n	8001f46 <HAL_GPIO_Init+0xfa>
 8001eac:	4a92      	ldr	r2, [pc, #584]	; (80020f8 <HAL_GPIO_Init+0x2ac>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d863      	bhi.n	8001f7a <HAL_GPIO_Init+0x12e>
 8001eb2:	4a92      	ldr	r2, [pc, #584]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d046      	beq.n	8001f46 <HAL_GPIO_Init+0xfa>
 8001eb8:	4a90      	ldr	r2, [pc, #576]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d85d      	bhi.n	8001f7a <HAL_GPIO_Init+0x12e>
 8001ebe:	2b12      	cmp	r3, #18
 8001ec0:	d82a      	bhi.n	8001f18 <HAL_GPIO_Init+0xcc>
 8001ec2:	2b12      	cmp	r3, #18
 8001ec4:	d859      	bhi.n	8001f7a <HAL_GPIO_Init+0x12e>
 8001ec6:	a201      	add	r2, pc, #4	; (adr r2, 8001ecc <HAL_GPIO_Init+0x80>)
 8001ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ecc:	08001f47 	.word	0x08001f47
 8001ed0:	08001f21 	.word	0x08001f21
 8001ed4:	08001f33 	.word	0x08001f33
 8001ed8:	08001f75 	.word	0x08001f75
 8001edc:	08001f7b 	.word	0x08001f7b
 8001ee0:	08001f7b 	.word	0x08001f7b
 8001ee4:	08001f7b 	.word	0x08001f7b
 8001ee8:	08001f7b 	.word	0x08001f7b
 8001eec:	08001f7b 	.word	0x08001f7b
 8001ef0:	08001f7b 	.word	0x08001f7b
 8001ef4:	08001f7b 	.word	0x08001f7b
 8001ef8:	08001f7b 	.word	0x08001f7b
 8001efc:	08001f7b 	.word	0x08001f7b
 8001f00:	08001f7b 	.word	0x08001f7b
 8001f04:	08001f7b 	.word	0x08001f7b
 8001f08:	08001f7b 	.word	0x08001f7b
 8001f0c:	08001f7b 	.word	0x08001f7b
 8001f10:	08001f29 	.word	0x08001f29
 8001f14:	08001f3d 	.word	0x08001f3d
 8001f18:	4a79      	ldr	r2, [pc, #484]	; (8002100 <HAL_GPIO_Init+0x2b4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f1e:	e02c      	b.n	8001f7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	623b      	str	r3, [r7, #32]
          break;
 8001f26:	e029      	b.n	8001f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	623b      	str	r3, [r7, #32]
          break;
 8001f30:	e024      	b.n	8001f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	3308      	adds	r3, #8
 8001f38:	623b      	str	r3, [r7, #32]
          break;
 8001f3a:	e01f      	b.n	8001f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	330c      	adds	r3, #12
 8001f42:	623b      	str	r3, [r7, #32]
          break;
 8001f44:	e01a      	b.n	8001f7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d102      	bne.n	8001f54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f4e:	2304      	movs	r3, #4
 8001f50:	623b      	str	r3, [r7, #32]
          break;
 8001f52:	e013      	b.n	8001f7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d105      	bne.n	8001f68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	611a      	str	r2, [r3, #16]
          break;
 8001f66:	e009      	b.n	8001f7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f68:	2308      	movs	r3, #8
 8001f6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	615a      	str	r2, [r3, #20]
          break;
 8001f72:	e003      	b.n	8001f7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f74:	2300      	movs	r3, #0
 8001f76:	623b      	str	r3, [r7, #32]
          break;
 8001f78:	e000      	b.n	8001f7c <HAL_GPIO_Init+0x130>
          break;
 8001f7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	2bff      	cmp	r3, #255	; 0xff
 8001f80:	d801      	bhi.n	8001f86 <HAL_GPIO_Init+0x13a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	e001      	b.n	8001f8a <HAL_GPIO_Init+0x13e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	2bff      	cmp	r3, #255	; 0xff
 8001f90:	d802      	bhi.n	8001f98 <HAL_GPIO_Init+0x14c>
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	e002      	b.n	8001f9e <HAL_GPIO_Init+0x152>
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	3b08      	subs	r3, #8
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	210f      	movs	r1, #15
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	401a      	ands	r2, r3
 8001fb0:	6a39      	ldr	r1, [r7, #32]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 80b1 	beq.w	800212e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fcc:	4b4d      	ldr	r3, [pc, #308]	; (8002104 <HAL_GPIO_Init+0x2b8>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	4a4c      	ldr	r2, [pc, #304]	; (8002104 <HAL_GPIO_Init+0x2b8>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6193      	str	r3, [r2, #24]
 8001fd8:	4b4a      	ldr	r3, [pc, #296]	; (8002104 <HAL_GPIO_Init+0x2b8>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fe4:	4a48      	ldr	r2, [pc, #288]	; (8002108 <HAL_GPIO_Init+0x2bc>)
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	089b      	lsrs	r3, r3, #2
 8001fea:	3302      	adds	r3, #2
 8001fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	220f      	movs	r2, #15
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4013      	ands	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a40      	ldr	r2, [pc, #256]	; (800210c <HAL_GPIO_Init+0x2c0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d013      	beq.n	8002038 <HAL_GPIO_Init+0x1ec>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a3f      	ldr	r2, [pc, #252]	; (8002110 <HAL_GPIO_Init+0x2c4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d00d      	beq.n	8002034 <HAL_GPIO_Init+0x1e8>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a3e      	ldr	r2, [pc, #248]	; (8002114 <HAL_GPIO_Init+0x2c8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d007      	beq.n	8002030 <HAL_GPIO_Init+0x1e4>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a3d      	ldr	r2, [pc, #244]	; (8002118 <HAL_GPIO_Init+0x2cc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d101      	bne.n	800202c <HAL_GPIO_Init+0x1e0>
 8002028:	2303      	movs	r3, #3
 800202a:	e006      	b.n	800203a <HAL_GPIO_Init+0x1ee>
 800202c:	2304      	movs	r3, #4
 800202e:	e004      	b.n	800203a <HAL_GPIO_Init+0x1ee>
 8002030:	2302      	movs	r3, #2
 8002032:	e002      	b.n	800203a <HAL_GPIO_Init+0x1ee>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_GPIO_Init+0x1ee>
 8002038:	2300      	movs	r3, #0
 800203a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203c:	f002 0203 	and.w	r2, r2, #3
 8002040:	0092      	lsls	r2, r2, #2
 8002042:	4093      	lsls	r3, r2
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800204a:	492f      	ldr	r1, [pc, #188]	; (8002108 <HAL_GPIO_Init+0x2bc>)
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	3302      	adds	r3, #2
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d006      	beq.n	8002072 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002064:	4b2d      	ldr	r3, [pc, #180]	; (800211c <HAL_GPIO_Init+0x2d0>)
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	492c      	ldr	r1, [pc, #176]	; (800211c <HAL_GPIO_Init+0x2d0>)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	608b      	str	r3, [r1, #8]
 8002070:	e006      	b.n	8002080 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002072:	4b2a      	ldr	r3, [pc, #168]	; (800211c <HAL_GPIO_Init+0x2d0>)
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	43db      	mvns	r3, r3
 800207a:	4928      	ldr	r1, [pc, #160]	; (800211c <HAL_GPIO_Init+0x2d0>)
 800207c:	4013      	ands	r3, r2
 800207e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d006      	beq.n	800209a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800208c:	4b23      	ldr	r3, [pc, #140]	; (800211c <HAL_GPIO_Init+0x2d0>)
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	4922      	ldr	r1, [pc, #136]	; (800211c <HAL_GPIO_Init+0x2d0>)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	60cb      	str	r3, [r1, #12]
 8002098:	e006      	b.n	80020a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <HAL_GPIO_Init+0x2d0>)
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	491e      	ldr	r1, [pc, #120]	; (800211c <HAL_GPIO_Init+0x2d0>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d006      	beq.n	80020c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_GPIO_Init+0x2d0>)
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	4918      	ldr	r1, [pc, #96]	; (800211c <HAL_GPIO_Init+0x2d0>)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
 80020c0:	e006      	b.n	80020d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020c2:	4b16      	ldr	r3, [pc, #88]	; (800211c <HAL_GPIO_Init+0x2d0>)
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	4914      	ldr	r1, [pc, #80]	; (800211c <HAL_GPIO_Init+0x2d0>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d021      	beq.n	8002120 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <HAL_GPIO_Init+0x2d0>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	490e      	ldr	r1, [pc, #56]	; (800211c <HAL_GPIO_Init+0x2d0>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]
 80020e8:	e021      	b.n	800212e <HAL_GPIO_Init+0x2e2>
 80020ea:	bf00      	nop
 80020ec:	10320000 	.word	0x10320000
 80020f0:	10310000 	.word	0x10310000
 80020f4:	10220000 	.word	0x10220000
 80020f8:	10210000 	.word	0x10210000
 80020fc:	10120000 	.word	0x10120000
 8002100:	10110000 	.word	0x10110000
 8002104:	40021000 	.word	0x40021000
 8002108:	40010000 	.word	0x40010000
 800210c:	40010800 	.word	0x40010800
 8002110:	40010c00 	.word	0x40010c00
 8002114:	40011000 	.word	0x40011000
 8002118:	40011400 	.word	0x40011400
 800211c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_GPIO_Init+0x304>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	43db      	mvns	r3, r3
 8002128:	4909      	ldr	r1, [pc, #36]	; (8002150 <HAL_GPIO_Init+0x304>)
 800212a:	4013      	ands	r3, r2
 800212c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	3301      	adds	r3, #1
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	fa22 f303 	lsr.w	r3, r2, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	f47f ae8e 	bne.w	8001e60 <HAL_GPIO_Init+0x14>
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	372c      	adds	r7, #44	; 0x2c
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	40010400 	.word	0x40010400

08002154 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	887b      	ldrh	r3, [r7, #2]
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	e001      	b.n	8002176 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	807b      	strh	r3, [r7, #2]
 800218e:	4613      	mov	r3, r2
 8002190:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002192:	787b      	ldrb	r3, [r7, #1]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002198:	887a      	ldrh	r2, [r7, #2]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800219e:	e003      	b.n	80021a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021a0:	887b      	ldrh	r3, [r7, #2]
 80021a2:	041a      	lsls	r2, r3, #16
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	611a      	str	r2, [r3, #16]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
	...

080021b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e26c      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 8087 	beq.w	80022e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d4:	4b92      	ldr	r3, [pc, #584]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d00c      	beq.n	80021fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e0:	4b8f      	ldr	r3, [pc, #572]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d112      	bne.n	8002212 <HAL_RCC_OscConfig+0x5e>
 80021ec:	4b8c      	ldr	r3, [pc, #560]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f8:	d10b      	bne.n	8002212 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fa:	4b89      	ldr	r3, [pc, #548]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d06c      	beq.n	80022e0 <HAL_RCC_OscConfig+0x12c>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d168      	bne.n	80022e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e246      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x76>
 800221c:	4b80      	ldr	r3, [pc, #512]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a7f      	ldr	r2, [pc, #508]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	e02e      	b.n	8002288 <HAL_RCC_OscConfig+0xd4>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0x98>
 8002232:	4b7b      	ldr	r3, [pc, #492]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a7a      	ldr	r2, [pc, #488]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b78      	ldr	r3, [pc, #480]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a77      	ldr	r2, [pc, #476]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e01d      	b.n	8002288 <HAL_RCC_OscConfig+0xd4>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0xbc>
 8002256:	4b72      	ldr	r3, [pc, #456]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a71      	ldr	r2, [pc, #452]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800225c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b6f      	ldr	r3, [pc, #444]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a6e      	ldr	r2, [pc, #440]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e00b      	b.n	8002288 <HAL_RCC_OscConfig+0xd4>
 8002270:	4b6b      	ldr	r3, [pc, #428]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a6a      	ldr	r2, [pc, #424]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b68      	ldr	r3, [pc, #416]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a67      	ldr	r2, [pc, #412]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002286:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7ff fc12 	bl	8001ab8 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002298:	f7ff fc0e 	bl	8001ab8 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	; 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e1fa      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	4b5d      	ldr	r3, [pc, #372]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0xe4>
 80022b6:	e014      	b.n	80022e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff fbfe 	bl	8001ab8 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7ff fbfa 	bl	8001ab8 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e1e6      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d2:	4b53      	ldr	r3, [pc, #332]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x10c>
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d063      	beq.n	80023b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ee:	4b4c      	ldr	r3, [pc, #304]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022fa:	4b49      	ldr	r3, [pc, #292]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b08      	cmp	r3, #8
 8002304:	d11c      	bne.n	8002340 <HAL_RCC_OscConfig+0x18c>
 8002306:	4b46      	ldr	r3, [pc, #280]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d116      	bne.n	8002340 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002312:	4b43      	ldr	r3, [pc, #268]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_RCC_OscConfig+0x176>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d001      	beq.n	800232a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e1ba      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232a:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4939      	ldr	r1, [pc, #228]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233e:	e03a      	b.n	80023b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002348:	4b36      	ldr	r3, [pc, #216]	; (8002424 <HAL_RCC_OscConfig+0x270>)
 800234a:	2201      	movs	r2, #1
 800234c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7ff fbb3 	bl	8001ab8 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002356:	f7ff fbaf 	bl	8001ab8 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e19b      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002368:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002374:	4b2a      	ldr	r3, [pc, #168]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4927      	ldr	r1, [pc, #156]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]
 8002388:	e015      	b.n	80023b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238a:	4b26      	ldr	r3, [pc, #152]	; (8002424 <HAL_RCC_OscConfig+0x270>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7ff fb92 	bl	8001ab8 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002398:	f7ff fb8e 	bl	8001ab8 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e17a      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d03a      	beq.n	8002438 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d019      	beq.n	80023fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ca:	4b17      	ldr	r3, [pc, #92]	; (8002428 <HAL_RCC_OscConfig+0x274>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d0:	f7ff fb72 	bl	8001ab8 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d8:	f7ff fb6e 	bl	8001ab8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e15a      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023f6:	2001      	movs	r0, #1
 80023f8:	f000 facc 	bl	8002994 <RCC_Delay>
 80023fc:	e01c      	b.n	8002438 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_RCC_OscConfig+0x274>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002404:	f7ff fb58 	bl	8001ab8 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240a:	e00f      	b.n	800242c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800240c:	f7ff fb54 	bl	8001ab8 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d908      	bls.n	800242c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e140      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	42420000 	.word	0x42420000
 8002428:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242c:	4b9e      	ldr	r3, [pc, #632]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1e9      	bne.n	800240c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80a6 	beq.w	8002592 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002446:	2300      	movs	r3, #0
 8002448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244a:	4b97      	ldr	r3, [pc, #604]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10d      	bne.n	8002472 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002456:	4b94      	ldr	r3, [pc, #592]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	4a93      	ldr	r2, [pc, #588]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002460:	61d3      	str	r3, [r2, #28]
 8002462:	4b91      	ldr	r3, [pc, #580]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800246e:	2301      	movs	r3, #1
 8002470:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002472:	4b8e      	ldr	r3, [pc, #568]	; (80026ac <HAL_RCC_OscConfig+0x4f8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247a:	2b00      	cmp	r3, #0
 800247c:	d118      	bne.n	80024b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800247e:	4b8b      	ldr	r3, [pc, #556]	; (80026ac <HAL_RCC_OscConfig+0x4f8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a8a      	ldr	r2, [pc, #552]	; (80026ac <HAL_RCC_OscConfig+0x4f8>)
 8002484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248a:	f7ff fb15 	bl	8001ab8 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002492:	f7ff fb11 	bl	8001ab8 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b64      	cmp	r3, #100	; 0x64
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e0fd      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	4b81      	ldr	r3, [pc, #516]	; (80026ac <HAL_RCC_OscConfig+0x4f8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_OscConfig+0x312>
 80024b8:	4b7b      	ldr	r3, [pc, #492]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4a7a      	ldr	r2, [pc, #488]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6213      	str	r3, [r2, #32]
 80024c4:	e02d      	b.n	8002522 <HAL_RCC_OscConfig+0x36e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x334>
 80024ce:	4b76      	ldr	r3, [pc, #472]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	4a75      	ldr	r2, [pc, #468]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	6213      	str	r3, [r2, #32]
 80024da:	4b73      	ldr	r3, [pc, #460]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4a72      	ldr	r2, [pc, #456]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	f023 0304 	bic.w	r3, r3, #4
 80024e4:	6213      	str	r3, [r2, #32]
 80024e6:	e01c      	b.n	8002522 <HAL_RCC_OscConfig+0x36e>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b05      	cmp	r3, #5
 80024ee:	d10c      	bne.n	800250a <HAL_RCC_OscConfig+0x356>
 80024f0:	4b6d      	ldr	r3, [pc, #436]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	4a6c      	ldr	r2, [pc, #432]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	f043 0304 	orr.w	r3, r3, #4
 80024fa:	6213      	str	r3, [r2, #32]
 80024fc:	4b6a      	ldr	r3, [pc, #424]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4a69      	ldr	r2, [pc, #420]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6213      	str	r3, [r2, #32]
 8002508:	e00b      	b.n	8002522 <HAL_RCC_OscConfig+0x36e>
 800250a:	4b67      	ldr	r3, [pc, #412]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	4a66      	ldr	r2, [pc, #408]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	6213      	str	r3, [r2, #32]
 8002516:	4b64      	ldr	r3, [pc, #400]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4a63      	ldr	r2, [pc, #396]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800251c:	f023 0304 	bic.w	r3, r3, #4
 8002520:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d015      	beq.n	8002556 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252a:	f7ff fac5 	bl	8001ab8 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	e00a      	b.n	8002548 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7ff fac1 	bl	8001ab8 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002540:	4293      	cmp	r3, r2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e0ab      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002548:	4b57      	ldr	r3, [pc, #348]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ee      	beq.n	8002532 <HAL_RCC_OscConfig+0x37e>
 8002554:	e014      	b.n	8002580 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002556:	f7ff faaf 	bl	8001ab8 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255e:	f7ff faab 	bl	8001ab8 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	; 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e095      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002574:	4b4c      	ldr	r3, [pc, #304]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1ee      	bne.n	800255e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002580:	7dfb      	ldrb	r3, [r7, #23]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d105      	bne.n	8002592 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002586:	4b48      	ldr	r3, [pc, #288]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4a47      	ldr	r2, [pc, #284]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002590:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 8081 	beq.w	800269e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800259c:	4b42      	ldr	r3, [pc, #264]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 030c 	and.w	r3, r3, #12
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d061      	beq.n	800266c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d146      	bne.n	800263e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b0:	4b3f      	ldr	r3, [pc, #252]	; (80026b0 <HAL_RCC_OscConfig+0x4fc>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7ff fa7f 	bl	8001ab8 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025be:	f7ff fa7b 	bl	8001ab8 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e067      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d0:	4b35      	ldr	r3, [pc, #212]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f0      	bne.n	80025be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e4:	d108      	bne.n	80025f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025e6:	4b30      	ldr	r3, [pc, #192]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	492d      	ldr	r1, [pc, #180]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f8:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a19      	ldr	r1, [r3, #32]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	430b      	orrs	r3, r1
 800260a:	4927      	ldr	r1, [pc, #156]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <HAL_RCC_OscConfig+0x4fc>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7ff fa4f 	bl	8001ab8 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261e:	f7ff fa4b 	bl	8001ab8 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e037      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002630:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x46a>
 800263c:	e02f      	b.n	800269e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263e:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <HAL_RCC_OscConfig+0x4fc>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7ff fa38 	bl	8001ab8 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264c:	f7ff fa34 	bl	8001ab8 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e020      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x498>
 800266a:	e018      	b.n	800269e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e013      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	429a      	cmp	r2, r3
 800268a:	d106      	bne.n	800269a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002696:	429a      	cmp	r2, r3
 8002698:	d001      	beq.n	800269e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40007000 	.word	0x40007000
 80026b0:	42420060 	.word	0x42420060

080026b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0d0      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026c8:	4b6a      	ldr	r3, [pc, #424]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d910      	bls.n	80026f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b67      	ldr	r3, [pc, #412]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 0207 	bic.w	r2, r3, #7
 80026de:	4965      	ldr	r1, [pc, #404]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b63      	ldr	r3, [pc, #396]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0b8      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d020      	beq.n	8002746 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002710:	4b59      	ldr	r3, [pc, #356]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a58      	ldr	r2, [pc, #352]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800271a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002728:	4b53      	ldr	r3, [pc, #332]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4a52      	ldr	r2, [pc, #328]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002732:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002734:	4b50      	ldr	r3, [pc, #320]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	494d      	ldr	r1, [pc, #308]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d040      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	4b47      	ldr	r3, [pc, #284]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d115      	bne.n	8002792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e07f      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d107      	bne.n	8002782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002772:	4b41      	ldr	r3, [pc, #260]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e073      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002782:	4b3d      	ldr	r3, [pc, #244]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e06b      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002792:	4b39      	ldr	r3, [pc, #228]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f023 0203 	bic.w	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4936      	ldr	r1, [pc, #216]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a4:	f7ff f988 	bl	8001ab8 <HAL_GetTick>
 80027a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027aa:	e00a      	b.n	80027c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ac:	f7ff f984 	bl	8001ab8 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e053      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c2:	4b2d      	ldr	r3, [pc, #180]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 020c 	and.w	r2, r3, #12
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d1eb      	bne.n	80027ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d210      	bcs.n	8002804 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 0207 	bic.w	r2, r3, #7
 80027ea:	4922      	ldr	r1, [pc, #136]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b20      	ldr	r3, [pc, #128]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e032      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002810:	4b19      	ldr	r3, [pc, #100]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4916      	ldr	r1, [pc, #88]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	490e      	ldr	r1, [pc, #56]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002842:	f000 f821 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8002846:	4602      	mov	r2, r0
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	490a      	ldr	r1, [pc, #40]	; (800287c <HAL_RCC_ClockConfig+0x1c8>)
 8002854:	5ccb      	ldrb	r3, [r1, r3]
 8002856:	fa22 f303 	lsr.w	r3, r2, r3
 800285a:	4a09      	ldr	r2, [pc, #36]	; (8002880 <HAL_RCC_ClockConfig+0x1cc>)
 800285c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_RCC_ClockConfig+0x1d0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff f8e6 	bl	8001a34 <HAL_InitTick>

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40022000 	.word	0x40022000
 8002878:	40021000 	.word	0x40021000
 800287c:	080050b0 	.word	0x080050b0
 8002880:	2000009c 	.word	0x2000009c
 8002884:	200000a0 	.word	0x200000a0

08002888 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	2300      	movs	r3, #0
 800289c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028a2:	4b1e      	ldr	r3, [pc, #120]	; (800291c <HAL_RCC_GetSysClockFreq+0x94>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d002      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0x30>
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d003      	beq.n	80028be <HAL_RCC_GetSysClockFreq+0x36>
 80028b6:	e027      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028b8:	4b19      	ldr	r3, [pc, #100]	; (8002920 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ba:	613b      	str	r3, [r7, #16]
      break;
 80028bc:	e027      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	0c9b      	lsrs	r3, r3, #18
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	4a17      	ldr	r2, [pc, #92]	; (8002924 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028c8:	5cd3      	ldrb	r3, [r2, r3]
 80028ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d010      	beq.n	80028f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028d6:	4b11      	ldr	r3, [pc, #68]	; (800291c <HAL_RCC_GetSysClockFreq+0x94>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	0c5b      	lsrs	r3, r3, #17
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	4a11      	ldr	r2, [pc, #68]	; (8002928 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028e2:	5cd3      	ldrb	r3, [r2, r3]
 80028e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a0d      	ldr	r2, [pc, #52]	; (8002920 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ea:	fb02 f203 	mul.w	r2, r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	e004      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a0c      	ldr	r2, [pc, #48]	; (800292c <HAL_RCC_GetSysClockFreq+0xa4>)
 80028fc:	fb02 f303 	mul.w	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	613b      	str	r3, [r7, #16]
      break;
 8002906:	e002      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_RCC_GetSysClockFreq+0x98>)
 800290a:	613b      	str	r3, [r7, #16]
      break;
 800290c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800290e:	693b      	ldr	r3, [r7, #16]
}
 8002910:	4618      	mov	r0, r3
 8002912:	371c      	adds	r7, #28
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
 8002920:	007a1200 	.word	0x007a1200
 8002924:	080050c8 	.word	0x080050c8
 8002928:	080050d8 	.word	0x080050d8
 800292c:	003d0900 	.word	0x003d0900

08002930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002934:	4b02      	ldr	r3, [pc, #8]	; (8002940 <HAL_RCC_GetHCLKFreq+0x10>)
 8002936:	681b      	ldr	r3, [r3, #0]
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	2000009c 	.word	0x2000009c

08002944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002948:	f7ff fff2 	bl	8002930 <HAL_RCC_GetHCLKFreq>
 800294c:	4602      	mov	r2, r0
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	0a1b      	lsrs	r3, r3, #8
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	4903      	ldr	r1, [pc, #12]	; (8002968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800295a:	5ccb      	ldrb	r3, [r1, r3]
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002960:	4618      	mov	r0, r3
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000
 8002968:	080050c0 	.word	0x080050c0

0800296c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002970:	f7ff ffde 	bl	8002930 <HAL_RCC_GetHCLKFreq>
 8002974:	4602      	mov	r2, r0
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	0adb      	lsrs	r3, r3, #11
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	4903      	ldr	r1, [pc, #12]	; (8002990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	080050c0 	.word	0x080050c0

08002994 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <RCC_Delay+0x34>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <RCC_Delay+0x38>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	0a5b      	lsrs	r3, r3, #9
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029b0:	bf00      	nop
  }
  while (Delay --);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1e5a      	subs	r2, r3, #1
 80029b6:	60fa      	str	r2, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f9      	bne.n	80029b0 <RCC_Delay+0x1c>
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	2000009c 	.word	0x2000009c
 80029cc:	10624dd3 	.word	0x10624dd3

080029d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e041      	b.n	8002a66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe feb4 	bl	8001764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4610      	mov	r0, r2
 8002a10:	f000 fc30 	bl	8003274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d001      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e03a      	b.n	8002afe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a18      	ldr	r2, [pc, #96]	; (8002b08 <HAL_TIM_Base_Start_IT+0x98>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00e      	beq.n	8002ac8 <HAL_TIM_Base_Start_IT+0x58>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab2:	d009      	beq.n	8002ac8 <HAL_TIM_Base_Start_IT+0x58>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <HAL_TIM_Base_Start_IT+0x9c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d004      	beq.n	8002ac8 <HAL_TIM_Base_Start_IT+0x58>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d111      	bne.n	8002aec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b06      	cmp	r3, #6
 8002ad8:	d010      	beq.n	8002afc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aea:	e007      	b.n	8002afc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr
 8002b08:	40012c00 	.word	0x40012c00
 8002b0c:	40000400 	.word	0x40000400
 8002b10:	40000800 	.word	0x40000800

08002b14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e041      	b.n	8002baa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f839 	bl	8002bb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3304      	adds	r3, #4
 8002b50:	4619      	mov	r1, r3
 8002b52:	4610      	mov	r0, r2
 8002b54:	f000 fb8e 	bl	8003274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d109      	bne.n	8002be8 <HAL_TIM_PWM_Start+0x24>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	bf14      	ite	ne
 8002be0:	2301      	movne	r3, #1
 8002be2:	2300      	moveq	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e022      	b.n	8002c2e <HAL_TIM_PWM_Start+0x6a>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d109      	bne.n	8002c02 <HAL_TIM_PWM_Start+0x3e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	bf14      	ite	ne
 8002bfa:	2301      	movne	r3, #1
 8002bfc:	2300      	moveq	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	e015      	b.n	8002c2e <HAL_TIM_PWM_Start+0x6a>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d109      	bne.n	8002c1c <HAL_TIM_PWM_Start+0x58>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e008      	b.n	8002c2e <HAL_TIM_PWM_Start+0x6a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	bf14      	ite	ne
 8002c28:	2301      	movne	r3, #1
 8002c2a:	2300      	moveq	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e05e      	b.n	8002cf4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d104      	bne.n	8002c46 <HAL_TIM_PWM_Start+0x82>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c44:	e013      	b.n	8002c6e <HAL_TIM_PWM_Start+0xaa>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d104      	bne.n	8002c56 <HAL_TIM_PWM_Start+0x92>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c54:	e00b      	b.n	8002c6e <HAL_TIM_PWM_Start+0xaa>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d104      	bne.n	8002c66 <HAL_TIM_PWM_Start+0xa2>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c64:	e003      	b.n	8002c6e <HAL_TIM_PWM_Start+0xaa>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2201      	movs	r2, #1
 8002c74:	6839      	ldr	r1, [r7, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fd7c 	bl	8003774 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1e      	ldr	r2, [pc, #120]	; (8002cfc <HAL_TIM_PWM_Start+0x138>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d107      	bne.n	8002c96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a18      	ldr	r2, [pc, #96]	; (8002cfc <HAL_TIM_PWM_Start+0x138>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00e      	beq.n	8002cbe <HAL_TIM_PWM_Start+0xfa>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca8:	d009      	beq.n	8002cbe <HAL_TIM_PWM_Start+0xfa>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a14      	ldr	r2, [pc, #80]	; (8002d00 <HAL_TIM_PWM_Start+0x13c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <HAL_TIM_PWM_Start+0xfa>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a12      	ldr	r2, [pc, #72]	; (8002d04 <HAL_TIM_PWM_Start+0x140>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d111      	bne.n	8002ce2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b06      	cmp	r3, #6
 8002cce:	d010      	beq.n	8002cf2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce0:	e007      	b.n	8002cf2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0201 	orr.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40012c00 	.word	0x40012c00
 8002d00:	40000400 	.word	0x40000400
 8002d04:	40000800 	.word	0x40000800

08002d08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d122      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d11b      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0202 	mvn.w	r2, #2
 8002d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fa76 	bl	800323c <HAL_TIM_IC_CaptureCallback>
 8002d50:	e005      	b.n	8002d5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fa69 	bl	800322a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fa78 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d122      	bne.n	8002db8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d11b      	bne.n	8002db8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0204 	mvn.w	r2, #4
 8002d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fa4c 	bl	800323c <HAL_TIM_IC_CaptureCallback>
 8002da4:	e005      	b.n	8002db2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fa3f 	bl	800322a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fa4e 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d122      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d11b      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0208 	mvn.w	r2, #8
 8002ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2204      	movs	r2, #4
 8002de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fa22 	bl	800323c <HAL_TIM_IC_CaptureCallback>
 8002df8:	e005      	b.n	8002e06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fa15 	bl	800322a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fa24 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b10      	cmp	r3, #16
 8002e18:	d122      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d11b      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0210 	mvn.w	r2, #16
 8002e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2208      	movs	r2, #8
 8002e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f9f8 	bl	800323c <HAL_TIM_IC_CaptureCallback>
 8002e4c:	e005      	b.n	8002e5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f9eb 	bl	800322a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f9fa 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d10e      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d107      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0201 	mvn.w	r2, #1
 8002e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe fa26 	bl	80012d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e96:	2b80      	cmp	r3, #128	; 0x80
 8002e98:	d10e      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea4:	2b80      	cmp	r3, #128	; 0x80
 8002ea6:	d107      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fce9 	bl	800388a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec2:	2b40      	cmp	r3, #64	; 0x40
 8002ec4:	d10e      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed0:	2b40      	cmp	r3, #64	; 0x40
 8002ed2:	d107      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f9be 	bl	8003260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b20      	cmp	r3, #32
 8002ef0:	d10e      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d107      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0220 	mvn.w	r2, #32
 8002f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fcb4 	bl	8003878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e0ae      	b.n	8003094 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b0c      	cmp	r3, #12
 8002f42:	f200 809f 	bhi.w	8003084 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f46:	a201      	add	r2, pc, #4	; (adr r2, 8002f4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4c:	08002f81 	.word	0x08002f81
 8002f50:	08003085 	.word	0x08003085
 8002f54:	08003085 	.word	0x08003085
 8002f58:	08003085 	.word	0x08003085
 8002f5c:	08002fc1 	.word	0x08002fc1
 8002f60:	08003085 	.word	0x08003085
 8002f64:	08003085 	.word	0x08003085
 8002f68:	08003085 	.word	0x08003085
 8002f6c:	08003003 	.word	0x08003003
 8002f70:	08003085 	.word	0x08003085
 8002f74:	08003085 	.word	0x08003085
 8002f78:	08003085 	.word	0x08003085
 8002f7c:	08003043 	.word	0x08003043
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f9d6 	bl	8003338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0208 	orr.w	r2, r2, #8
 8002f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0204 	bic.w	r2, r2, #4
 8002faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6999      	ldr	r1, [r3, #24]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	619a      	str	r2, [r3, #24]
      break;
 8002fbe:	e064      	b.n	800308a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fa1c 	bl	8003404 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6999      	ldr	r1, [r3, #24]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	021a      	lsls	r2, r3, #8
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	619a      	str	r2, [r3, #24]
      break;
 8003000:	e043      	b.n	800308a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fa65 	bl	80034d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69da      	ldr	r2, [r3, #28]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f042 0208 	orr.w	r2, r2, #8
 800301c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69da      	ldr	r2, [r3, #28]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0204 	bic.w	r2, r2, #4
 800302c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69d9      	ldr	r1, [r3, #28]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	61da      	str	r2, [r3, #28]
      break;
 8003040:	e023      	b.n	800308a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	4618      	mov	r0, r3
 800304a:	f000 faaf 	bl	80035ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800305c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69da      	ldr	r2, [r3, #28]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800306c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69d9      	ldr	r1, [r3, #28]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	021a      	lsls	r2, r3, #8
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	61da      	str	r2, [r3, #28]
      break;
 8003082:	e002      	b.n	800308a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	75fb      	strb	r3, [r7, #23]
      break;
 8003088:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003092:	7dfb      	ldrb	r3, [r7, #23]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_TIM_ConfigClockSource+0x1c>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e0b4      	b.n	8003222 <HAL_TIM_ConfigClockSource+0x186>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f0:	d03e      	beq.n	8003170 <HAL_TIM_ConfigClockSource+0xd4>
 80030f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f6:	f200 8087 	bhi.w	8003208 <HAL_TIM_ConfigClockSource+0x16c>
 80030fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fe:	f000 8086 	beq.w	800320e <HAL_TIM_ConfigClockSource+0x172>
 8003102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003106:	d87f      	bhi.n	8003208 <HAL_TIM_ConfigClockSource+0x16c>
 8003108:	2b70      	cmp	r3, #112	; 0x70
 800310a:	d01a      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0xa6>
 800310c:	2b70      	cmp	r3, #112	; 0x70
 800310e:	d87b      	bhi.n	8003208 <HAL_TIM_ConfigClockSource+0x16c>
 8003110:	2b60      	cmp	r3, #96	; 0x60
 8003112:	d050      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0x11a>
 8003114:	2b60      	cmp	r3, #96	; 0x60
 8003116:	d877      	bhi.n	8003208 <HAL_TIM_ConfigClockSource+0x16c>
 8003118:	2b50      	cmp	r3, #80	; 0x50
 800311a:	d03c      	beq.n	8003196 <HAL_TIM_ConfigClockSource+0xfa>
 800311c:	2b50      	cmp	r3, #80	; 0x50
 800311e:	d873      	bhi.n	8003208 <HAL_TIM_ConfigClockSource+0x16c>
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d058      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x13a>
 8003124:	2b40      	cmp	r3, #64	; 0x40
 8003126:	d86f      	bhi.n	8003208 <HAL_TIM_ConfigClockSource+0x16c>
 8003128:	2b30      	cmp	r3, #48	; 0x30
 800312a:	d064      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0x15a>
 800312c:	2b30      	cmp	r3, #48	; 0x30
 800312e:	d86b      	bhi.n	8003208 <HAL_TIM_ConfigClockSource+0x16c>
 8003130:	2b20      	cmp	r3, #32
 8003132:	d060      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003134:	2b20      	cmp	r3, #32
 8003136:	d867      	bhi.n	8003208 <HAL_TIM_ConfigClockSource+0x16c>
 8003138:	2b00      	cmp	r3, #0
 800313a:	d05c      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0x15a>
 800313c:	2b10      	cmp	r3, #16
 800313e:	d05a      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003140:	e062      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6899      	ldr	r1, [r3, #8]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f000 faf0 	bl	8003736 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003164:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	609a      	str	r2, [r3, #8]
      break;
 800316e:	e04f      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6899      	ldr	r1, [r3, #8]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f000 fad9 	bl	8003736 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003192:	609a      	str	r2, [r3, #8]
      break;
 8003194:	e03c      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	6859      	ldr	r1, [r3, #4]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	461a      	mov	r2, r3
 80031a4:	f000 fa50 	bl	8003648 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2150      	movs	r1, #80	; 0x50
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 faa7 	bl	8003702 <TIM_ITRx_SetConfig>
      break;
 80031b4:	e02c      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	6859      	ldr	r1, [r3, #4]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	461a      	mov	r2, r3
 80031c4:	f000 fa6e 	bl	80036a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2160      	movs	r1, #96	; 0x60
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fa97 	bl	8003702 <TIM_ITRx_SetConfig>
      break;
 80031d4:	e01c      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6859      	ldr	r1, [r3, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	461a      	mov	r2, r3
 80031e4:	f000 fa30 	bl	8003648 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2140      	movs	r1, #64	; 0x40
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fa87 	bl	8003702 <TIM_ITRx_SetConfig>
      break;
 80031f4:	e00c      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4619      	mov	r1, r3
 8003200:	4610      	mov	r0, r2
 8003202:	f000 fa7e 	bl	8003702 <TIM_ITRx_SetConfig>
      break;
 8003206:	e003      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
      break;
 800320c:	e000      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800320e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003220:	7bfb      	ldrb	r3, [r7, #15]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr
	...

08003274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a29      	ldr	r2, [pc, #164]	; (800332c <TIM_Base_SetConfig+0xb8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00b      	beq.n	80032a4 <TIM_Base_SetConfig+0x30>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003292:	d007      	beq.n	80032a4 <TIM_Base_SetConfig+0x30>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a26      	ldr	r2, [pc, #152]	; (8003330 <TIM_Base_SetConfig+0xbc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d003      	beq.n	80032a4 <TIM_Base_SetConfig+0x30>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a25      	ldr	r2, [pc, #148]	; (8003334 <TIM_Base_SetConfig+0xc0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d108      	bne.n	80032b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a1c      	ldr	r2, [pc, #112]	; (800332c <TIM_Base_SetConfig+0xb8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00b      	beq.n	80032d6 <TIM_Base_SetConfig+0x62>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c4:	d007      	beq.n	80032d6 <TIM_Base_SetConfig+0x62>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a19      	ldr	r2, [pc, #100]	; (8003330 <TIM_Base_SetConfig+0xbc>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d003      	beq.n	80032d6 <TIM_Base_SetConfig+0x62>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a18      	ldr	r2, [pc, #96]	; (8003334 <TIM_Base_SetConfig+0xc0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d108      	bne.n	80032e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a07      	ldr	r2, [pc, #28]	; (800332c <TIM_Base_SetConfig+0xb8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d103      	bne.n	800331c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	615a      	str	r2, [r3, #20]
}
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr
 800332c:	40012c00 	.word	0x40012c00
 8003330:	40000400 	.word	0x40000400
 8003334:	40000800 	.word	0x40000800

08003338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f023 0201 	bic.w	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0303 	bic.w	r3, r3, #3
 800336e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f023 0302 	bic.w	r3, r3, #2
 8003380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a1c      	ldr	r2, [pc, #112]	; (8003400 <TIM_OC1_SetConfig+0xc8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d10c      	bne.n	80033ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f023 0308 	bic.w	r3, r3, #8
 800339a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f023 0304 	bic.w	r3, r3, #4
 80033ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a13      	ldr	r2, [pc, #76]	; (8003400 <TIM_OC1_SetConfig+0xc8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d111      	bne.n	80033da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	621a      	str	r2, [r3, #32]
}
 80033f4:	bf00      	nop
 80033f6:	371c      	adds	r7, #28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40012c00 	.word	0x40012c00

08003404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f023 0210 	bic.w	r2, r3, #16
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f023 0320 	bic.w	r3, r3, #32
 800344e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a1d      	ldr	r2, [pc, #116]	; (80034d4 <TIM_OC2_SetConfig+0xd0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d10d      	bne.n	8003480 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800346a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800347e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a14      	ldr	r2, [pc, #80]	; (80034d4 <TIM_OC2_SetConfig+0xd0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d113      	bne.n	80034b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800348e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003496:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	621a      	str	r2, [r3, #32]
}
 80034ca:	bf00      	nop
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr
 80034d4:	40012c00 	.word	0x40012c00

080034d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0303 	bic.w	r3, r3, #3
 800350e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a1d      	ldr	r2, [pc, #116]	; (80035a8 <TIM_OC3_SetConfig+0xd0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d10d      	bne.n	8003552 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800353c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a14      	ldr	r2, [pc, #80]	; (80035a8 <TIM_OC3_SetConfig+0xd0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d113      	bne.n	8003582 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	621a      	str	r2, [r3, #32]
}
 800359c:	bf00      	nop
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40012c00 	.word	0x40012c00

080035ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	031b      	lsls	r3, r3, #12
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a0f      	ldr	r2, [pc, #60]	; (8003644 <TIM_OC4_SetConfig+0x98>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d109      	bne.n	8003620 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	019b      	lsls	r3, r3, #6
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	621a      	str	r2, [r3, #32]
}
 800363a:	bf00      	nop
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr
 8003644:	40012c00 	.word	0x40012c00

08003648 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	f023 0201 	bic.w	r2, r3, #1
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f023 030a 	bic.w	r3, r3, #10
 8003684:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	621a      	str	r2, [r3, #32]
}
 800369a:	bf00      	nop
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr

080036a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f023 0210 	bic.w	r2, r3, #16
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	031b      	lsls	r3, r3, #12
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	621a      	str	r2, [r3, #32]
}
 80036f8:	bf00      	nop
 80036fa:	371c      	adds	r7, #28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr

08003702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4313      	orrs	r3, r2
 8003720:	f043 0307 	orr.w	r3, r3, #7
 8003724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	609a      	str	r2, [r3, #8]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr

08003736 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003736:	b480      	push	{r7}
 8003738:	b087      	sub	sp, #28
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003750:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	021a      	lsls	r2, r3, #8
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	431a      	orrs	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4313      	orrs	r3, r2
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	609a      	str	r2, [r3, #8]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr

08003774 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	2201      	movs	r2, #1
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a1a      	ldr	r2, [r3, #32]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	43db      	mvns	r3, r3
 8003796:	401a      	ands	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a1a      	ldr	r2, [r3, #32]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 031f 	and.w	r3, r3, #31
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ac:	431a      	orrs	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	621a      	str	r2, [r3, #32]
}
 80037b2:	bf00      	nop
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr

080037bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e046      	b.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a16      	ldr	r2, [pc, #88]	; (800386c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00e      	beq.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003820:	d009      	beq.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a12      	ldr	r2, [pc, #72]	; (8003870 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d004      	beq.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a10      	ldr	r2, [pc, #64]	; (8003874 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d10c      	bne.n	8003850 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800383c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	4313      	orrs	r3, r2
 8003846:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	40012c00 	.word	0x40012c00
 8003870:	40000400 	.word	0x40000400
 8003874:	40000800 	.word	0x40000800

08003878 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr

0800388a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr

0800389c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e042      	b.n	8003934 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd ffb8 	bl	8001838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2224      	movs	r2, #36	; 0x24
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fd71 	bl	80043c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	; 0x28
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b20      	cmp	r3, #32
 800395a:	d16d      	bne.n	8003a38 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_UART_Transmit+0x2c>
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e066      	b.n	8003a3a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2221      	movs	r2, #33	; 0x21
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800397a:	f7fe f89d 	bl	8001ab8 <HAL_GetTick>
 800397e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	88fa      	ldrh	r2, [r7, #6]
 8003984:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	88fa      	ldrh	r2, [r7, #6]
 800398a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003994:	d108      	bne.n	80039a8 <HAL_UART_Transmit+0x6c>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	e003      	b.n	80039b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039b0:	e02a      	b.n	8003a08 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2200      	movs	r2, #0
 80039ba:	2180      	movs	r1, #128	; 0x80
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 faf9 	bl	8003fb4 <UART_WaitOnFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e036      	b.n	8003a3a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10b      	bne.n	80039ea <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	3302      	adds	r3, #2
 80039e6:	61bb      	str	r3, [r7, #24]
 80039e8:	e007      	b.n	80039fa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	781a      	ldrb	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	3301      	adds	r3, #1
 80039f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1cf      	bne.n	80039b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2140      	movs	r1, #64	; 0x40
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 fac9 	bl	8003fb4 <UART_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e006      	b.n	8003a3a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e000      	b.n	8003a3a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
  }
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b0ba      	sub	sp, #232	; 0xe8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10f      	bne.n	8003aaa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <HAL_UART_IRQHandler+0x66>
 8003a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fbd1 	bl	800424a <UART_Receive_IT>
      return;
 8003aa8:	e25b      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003aaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 80de 	beq.w	8003c70 <HAL_UART_IRQHandler+0x22c>
 8003ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d106      	bne.n	8003ace <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80d1 	beq.w	8003c70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_UART_IRQHandler+0xae>
 8003ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f043 0201 	orr.w	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <HAL_UART_IRQHandler+0xd2>
 8003afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	f043 0202 	orr.w	r2, r3, #2
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00b      	beq.n	8003b3a <HAL_UART_IRQHandler+0xf6>
 8003b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	f043 0204 	orr.w	r2, r3, #4
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d011      	beq.n	8003b6a <HAL_UART_IRQHandler+0x126>
 8003b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d105      	bne.n	8003b5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	f043 0208 	orr.w	r2, r3, #8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 81f2 	beq.w	8003f58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b78:	f003 0320 	and.w	r3, r3, #32
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_UART_IRQHandler+0x14e>
 8003b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fb5c 	bl	800424a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <HAL_UART_IRQHandler+0x17a>
 8003bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d04f      	beq.n	8003c5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fa66 	bl	8004090 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d041      	beq.n	8003c56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3314      	adds	r3, #20
 8003bd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3314      	adds	r3, #20
 8003bfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bfe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1d9      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d013      	beq.n	8003c4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	4a7e      	ldr	r2, [pc, #504]	; (8003e24 <HAL_UART_IRQHandler+0x3e0>)
 8003c2c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe f892 	bl	8001d5c <HAL_DMA_Abort_IT>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d016      	beq.n	8003c6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4c:	e00e      	b.n	8003c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f99c 	bl	8003f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c54:	e00a      	b.n	8003c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f998 	bl	8003f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5c:	e006      	b.n	8003c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f994 	bl	8003f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003c6a:	e175      	b.n	8003f58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	bf00      	nop
    return;
 8003c6e:	e173      	b.n	8003f58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	f040 814f 	bne.w	8003f18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 8148 	beq.w	8003f18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8141 	beq.w	8003f18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c96:	2300      	movs	r3, #0
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 80b6 	beq.w	8003e28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 8145 	beq.w	8003f5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	f080 813e 	bcs.w	8003f5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ce6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b20      	cmp	r3, #32
 8003cf0:	f000 8088 	beq.w	8003e04 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	330c      	adds	r3, #12
 8003d1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d20:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d28:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d30:	e841 2300 	strex	r3, r2, [r1]
 8003d34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1d9      	bne.n	8003cf4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3314      	adds	r3, #20
 8003d46:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d4a:	e853 3f00 	ldrex	r3, [r3]
 8003d4e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d52:	f023 0301 	bic.w	r3, r3, #1
 8003d56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3314      	adds	r3, #20
 8003d60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d64:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d68:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e1      	bne.n	8003d40 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3314      	adds	r3, #20
 8003d82:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d86:	e853 3f00 	ldrex	r3, [r3]
 8003d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3314      	adds	r3, #20
 8003d9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003da0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003da2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003da6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003dae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e3      	bne.n	8003d7c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dcc:	e853 3f00 	ldrex	r3, [r3]
 8003dd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd4:	f023 0310 	bic.w	r3, r3, #16
 8003dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003de6:	65ba      	str	r2, [r7, #88]	; 0x58
 8003de8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e3      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fd ff71 	bl	8001ce6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	4619      	mov	r1, r3
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f8bf 	bl	8003f9e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e20:	e09c      	b.n	8003f5c <HAL_UART_IRQHandler+0x518>
 8003e22:	bf00      	nop
 8003e24:	08004155 	.word	0x08004155
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 808e 	beq.w	8003f60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8089 	beq.w	8003f60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	330c      	adds	r3, #12
 8003e54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e72:	647a      	str	r2, [r7, #68]	; 0x44
 8003e74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1e3      	bne.n	8003e4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3314      	adds	r3, #20
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	e853 3f00 	ldrex	r3, [r3]
 8003e94:	623b      	str	r3, [r7, #32]
   return(result);
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	f023 0301 	bic.w	r3, r3, #1
 8003e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3314      	adds	r3, #20
 8003ea6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003eaa:	633a      	str	r2, [r7, #48]	; 0x30
 8003eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e3      	bne.n	8003e86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	330c      	adds	r3, #12
 8003ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0310 	bic.w	r3, r3, #16
 8003ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ef0:	61fa      	str	r2, [r7, #28]
 8003ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	69b9      	ldr	r1, [r7, #24]
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	617b      	str	r3, [r7, #20]
   return(result);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e3      	bne.n	8003ecc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f844 	bl	8003f9e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f16:	e023      	b.n	8003f60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d009      	beq.n	8003f38 <HAL_UART_IRQHandler+0x4f4>
 8003f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f923 	bl	800417c <UART_Transmit_IT>
    return;
 8003f36:	e014      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00e      	beq.n	8003f62 <HAL_UART_IRQHandler+0x51e>
 8003f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f962 	bl	800421a <UART_EndTransmit_IT>
    return;
 8003f56:	e004      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f58:	bf00      	nop
 8003f5a:	e002      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f5c:	bf00      	nop
 8003f5e:	e000      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f60:	bf00      	nop
  }
}
 8003f62:	37e8      	adds	r7, #232	; 0xe8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr

08003f7a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr

08003fb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b090      	sub	sp, #64	; 0x40
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc4:	e050      	b.n	8004068 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fcc:	d04c      	beq.n	8004068 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d007      	beq.n	8003fe4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fd4:	f7fd fd70 	bl	8001ab8 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d241      	bcs.n	8004068 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	330c      	adds	r3, #12
 8004002:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004004:	637a      	str	r2, [r7, #52]	; 0x34
 8004006:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800400a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800400c:	e841 2300 	strex	r3, r2, [r1]
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e5      	bne.n	8003fe4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3314      	adds	r3, #20
 800401e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	613b      	str	r3, [r7, #16]
   return(result);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f023 0301 	bic.w	r3, r3, #1
 800402e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3314      	adds	r3, #20
 8004036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004038:	623a      	str	r2, [r7, #32]
 800403a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	69f9      	ldr	r1, [r7, #28]
 800403e:	6a3a      	ldr	r2, [r7, #32]
 8004040:	e841 2300 	strex	r3, r2, [r1]
 8004044:	61bb      	str	r3, [r7, #24]
   return(result);
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e5      	bne.n	8004018 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e00f      	b.n	8004088 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4013      	ands	r3, r2
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	429a      	cmp	r2, r3
 8004076:	bf0c      	ite	eq
 8004078:	2301      	moveq	r3, #1
 800407a:	2300      	movne	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	429a      	cmp	r2, r3
 8004084:	d09f      	beq.n	8003fc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3740      	adds	r7, #64	; 0x40
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004090:	b480      	push	{r7}
 8004092:	b095      	sub	sp, #84	; 0x54
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	330c      	adds	r3, #12
 800409e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	330c      	adds	r3, #12
 80040b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040b8:	643a      	str	r2, [r7, #64]	; 0x40
 80040ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e5      	bne.n	8004098 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3314      	adds	r3, #20
 80040d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	e853 3f00 	ldrex	r3, [r3]
 80040da:	61fb      	str	r3, [r7, #28]
   return(result);
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f023 0301 	bic.w	r3, r3, #1
 80040e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3314      	adds	r3, #20
 80040ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040f4:	e841 2300 	strex	r3, r2, [r1]
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e5      	bne.n	80040cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004104:	2b01      	cmp	r3, #1
 8004106:	d119      	bne.n	800413c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	60bb      	str	r3, [r7, #8]
   return(result);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f023 0310 	bic.w	r3, r3, #16
 800411e:	647b      	str	r3, [r7, #68]	; 0x44
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	330c      	adds	r3, #12
 8004126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004128:	61ba      	str	r2, [r7, #24]
 800412a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	6979      	ldr	r1, [r7, #20]
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	613b      	str	r3, [r7, #16]
   return(result);
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e5      	bne.n	8004108 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	631a      	str	r2, [r3, #48]	; 0x30
}
 800414a:	bf00      	nop
 800414c:	3754      	adds	r7, #84	; 0x54
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr

08004154 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff ff0c 	bl	8003f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b21      	cmp	r3, #33	; 0x21
 800418e:	d13e      	bne.n	800420e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004198:	d114      	bne.n	80041c4 <UART_Transmit_IT+0x48>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d110      	bne.n	80041c4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	1c9a      	adds	r2, r3, #2
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	621a      	str	r2, [r3, #32]
 80041c2:	e008      	b.n	80041d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	1c59      	adds	r1, r3, #1
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6211      	str	r1, [r2, #32]
 80041ce:	781a      	ldrb	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29b      	uxth	r3, r3
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	4619      	mov	r1, r3
 80041e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10f      	bne.n	800420a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004208:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	e000      	b.n	8004210 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800420e:	2302      	movs	r3, #2
  }
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr

0800421a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b082      	sub	sp, #8
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004230:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff fe94 	bl	8003f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b08c      	sub	sp, #48	; 0x30
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b22      	cmp	r3, #34	; 0x22
 800425c:	f040 80ae 	bne.w	80043bc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004268:	d117      	bne.n	800429a <UART_Receive_IT+0x50>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d113      	bne.n	800429a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004272:	2300      	movs	r3, #0
 8004274:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	b29b      	uxth	r3, r3
 8004284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004288:	b29a      	uxth	r2, r3
 800428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004292:	1c9a      	adds	r2, r3, #2
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	629a      	str	r2, [r3, #40]	; 0x28
 8004298:	e026      	b.n	80042e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ac:	d007      	beq.n	80042be <UART_Receive_IT+0x74>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10a      	bne.n	80042cc <UART_Receive_IT+0x82>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c8:	701a      	strb	r2, [r3, #0]
 80042ca:	e008      	b.n	80042de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4619      	mov	r1, r3
 80042f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d15d      	bne.n	80043b8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0220 	bic.w	r2, r2, #32
 800430a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800431a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0201 	bic.w	r2, r2, #1
 800432a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	2b01      	cmp	r3, #1
 8004340:	d135      	bne.n	80043ae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	613b      	str	r3, [r7, #16]
   return(result);
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f023 0310 	bic.w	r3, r3, #16
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	330c      	adds	r3, #12
 8004366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004368:	623a      	str	r2, [r7, #32]
 800436a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	69f9      	ldr	r1, [r7, #28]
 800436e:	6a3a      	ldr	r2, [r7, #32]
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	61bb      	str	r3, [r7, #24]
   return(result);
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e5      	bne.n	8004348 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0310 	and.w	r3, r3, #16
 8004386:	2b10      	cmp	r3, #16
 8004388:	d10a      	bne.n	80043a0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043a4:	4619      	mov	r1, r3
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff fdf9 	bl	8003f9e <HAL_UARTEx_RxEventCallback>
 80043ac:	e002      	b.n	80043b4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff fde3 	bl	8003f7a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	e002      	b.n	80043be <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	e000      	b.n	80043be <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80043bc:	2302      	movs	r3, #2
  }
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3730      	adds	r7, #48	; 0x30
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004402:	f023 030c 	bic.w	r3, r3, #12
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	430b      	orrs	r3, r1
 800440e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699a      	ldr	r2, [r3, #24]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a2c      	ldr	r2, [pc, #176]	; (80044dc <UART_SetConfig+0x114>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d103      	bne.n	8004438 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004430:	f7fe fa9c 	bl	800296c <HAL_RCC_GetPCLK2Freq>
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	e002      	b.n	800443e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004438:	f7fe fa84 	bl	8002944 <HAL_RCC_GetPCLK1Freq>
 800443c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	009a      	lsls	r2, r3, #2
 8004448:	441a      	add	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	fbb2 f3f3 	udiv	r3, r2, r3
 8004454:	4a22      	ldr	r2, [pc, #136]	; (80044e0 <UART_SetConfig+0x118>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	0119      	lsls	r1, r3, #4
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	009a      	lsls	r2, r3, #2
 8004468:	441a      	add	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	fbb2 f2f3 	udiv	r2, r2, r3
 8004474:	4b1a      	ldr	r3, [pc, #104]	; (80044e0 <UART_SetConfig+0x118>)
 8004476:	fba3 0302 	umull	r0, r3, r3, r2
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	2064      	movs	r0, #100	; 0x64
 800447e:	fb00 f303 	mul.w	r3, r0, r3
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	3332      	adds	r3, #50	; 0x32
 8004488:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <UART_SetConfig+0x118>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004494:	4419      	add	r1, r3
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	009a      	lsls	r2, r3, #2
 80044a0:	441a      	add	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044ac:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <UART_SetConfig+0x118>)
 80044ae:	fba3 0302 	umull	r0, r3, r3, r2
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	2064      	movs	r0, #100	; 0x64
 80044b6:	fb00 f303 	mul.w	r3, r0, r3
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	3332      	adds	r3, #50	; 0x32
 80044c0:	4a07      	ldr	r2, [pc, #28]	; (80044e0 <UART_SetConfig+0x118>)
 80044c2:	fba2 2303 	umull	r2, r3, r2, r3
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	f003 020f 	and.w	r2, r3, #15
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	440a      	add	r2, r1
 80044d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044d4:	bf00      	nop
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40013800 	.word	0x40013800
 80044e0:	51eb851f 	.word	0x51eb851f

080044e4 <__errno>:
 80044e4:	4b01      	ldr	r3, [pc, #4]	; (80044ec <__errno+0x8>)
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	200000a8 	.word	0x200000a8

080044f0 <__libc_init_array>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	2600      	movs	r6, #0
 80044f4:	4d0c      	ldr	r5, [pc, #48]	; (8004528 <__libc_init_array+0x38>)
 80044f6:	4c0d      	ldr	r4, [pc, #52]	; (800452c <__libc_init_array+0x3c>)
 80044f8:	1b64      	subs	r4, r4, r5
 80044fa:	10a4      	asrs	r4, r4, #2
 80044fc:	42a6      	cmp	r6, r4
 80044fe:	d109      	bne.n	8004514 <__libc_init_array+0x24>
 8004500:	f000 fc6c 	bl	8004ddc <_init>
 8004504:	2600      	movs	r6, #0
 8004506:	4d0a      	ldr	r5, [pc, #40]	; (8004530 <__libc_init_array+0x40>)
 8004508:	4c0a      	ldr	r4, [pc, #40]	; (8004534 <__libc_init_array+0x44>)
 800450a:	1b64      	subs	r4, r4, r5
 800450c:	10a4      	asrs	r4, r4, #2
 800450e:	42a6      	cmp	r6, r4
 8004510:	d105      	bne.n	800451e <__libc_init_array+0x2e>
 8004512:	bd70      	pop	{r4, r5, r6, pc}
 8004514:	f855 3b04 	ldr.w	r3, [r5], #4
 8004518:	4798      	blx	r3
 800451a:	3601      	adds	r6, #1
 800451c:	e7ee      	b.n	80044fc <__libc_init_array+0xc>
 800451e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004522:	4798      	blx	r3
 8004524:	3601      	adds	r6, #1
 8004526:	e7f2      	b.n	800450e <__libc_init_array+0x1e>
 8004528:	08005110 	.word	0x08005110
 800452c:	08005110 	.word	0x08005110
 8004530:	08005110 	.word	0x08005110
 8004534:	08005114 	.word	0x08005114

08004538 <malloc>:
 8004538:	4b02      	ldr	r3, [pc, #8]	; (8004544 <malloc+0xc>)
 800453a:	4601      	mov	r1, r0
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	f000 b85f 	b.w	8004600 <_malloc_r>
 8004542:	bf00      	nop
 8004544:	200000a8 	.word	0x200000a8

08004548 <free>:
 8004548:	4b02      	ldr	r3, [pc, #8]	; (8004554 <free+0xc>)
 800454a:	4601      	mov	r1, r0
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	f000 b80b 	b.w	8004568 <_free_r>
 8004552:	bf00      	nop
 8004554:	200000a8 	.word	0x200000a8

08004558 <memset>:
 8004558:	4603      	mov	r3, r0
 800455a:	4402      	add	r2, r0
 800455c:	4293      	cmp	r3, r2
 800455e:	d100      	bne.n	8004562 <memset+0xa>
 8004560:	4770      	bx	lr
 8004562:	f803 1b01 	strb.w	r1, [r3], #1
 8004566:	e7f9      	b.n	800455c <memset+0x4>

08004568 <_free_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	4605      	mov	r5, r0
 800456c:	2900      	cmp	r1, #0
 800456e:	d043      	beq.n	80045f8 <_free_r+0x90>
 8004570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004574:	1f0c      	subs	r4, r1, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	bfb8      	it	lt
 800457a:	18e4      	addlt	r4, r4, r3
 800457c:	f000 f8ca 	bl	8004714 <__malloc_lock>
 8004580:	4a1e      	ldr	r2, [pc, #120]	; (80045fc <_free_r+0x94>)
 8004582:	6813      	ldr	r3, [r2, #0]
 8004584:	4610      	mov	r0, r2
 8004586:	b933      	cbnz	r3, 8004596 <_free_r+0x2e>
 8004588:	6063      	str	r3, [r4, #4]
 800458a:	6014      	str	r4, [r2, #0]
 800458c:	4628      	mov	r0, r5
 800458e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004592:	f000 b8c5 	b.w	8004720 <__malloc_unlock>
 8004596:	42a3      	cmp	r3, r4
 8004598:	d90a      	bls.n	80045b0 <_free_r+0x48>
 800459a:	6821      	ldr	r1, [r4, #0]
 800459c:	1862      	adds	r2, r4, r1
 800459e:	4293      	cmp	r3, r2
 80045a0:	bf01      	itttt	eq
 80045a2:	681a      	ldreq	r2, [r3, #0]
 80045a4:	685b      	ldreq	r3, [r3, #4]
 80045a6:	1852      	addeq	r2, r2, r1
 80045a8:	6022      	streq	r2, [r4, #0]
 80045aa:	6063      	str	r3, [r4, #4]
 80045ac:	6004      	str	r4, [r0, #0]
 80045ae:	e7ed      	b.n	800458c <_free_r+0x24>
 80045b0:	461a      	mov	r2, r3
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	b10b      	cbz	r3, 80045ba <_free_r+0x52>
 80045b6:	42a3      	cmp	r3, r4
 80045b8:	d9fa      	bls.n	80045b0 <_free_r+0x48>
 80045ba:	6811      	ldr	r1, [r2, #0]
 80045bc:	1850      	adds	r0, r2, r1
 80045be:	42a0      	cmp	r0, r4
 80045c0:	d10b      	bne.n	80045da <_free_r+0x72>
 80045c2:	6820      	ldr	r0, [r4, #0]
 80045c4:	4401      	add	r1, r0
 80045c6:	1850      	adds	r0, r2, r1
 80045c8:	4283      	cmp	r3, r0
 80045ca:	6011      	str	r1, [r2, #0]
 80045cc:	d1de      	bne.n	800458c <_free_r+0x24>
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4401      	add	r1, r0
 80045d4:	6011      	str	r1, [r2, #0]
 80045d6:	6053      	str	r3, [r2, #4]
 80045d8:	e7d8      	b.n	800458c <_free_r+0x24>
 80045da:	d902      	bls.n	80045e2 <_free_r+0x7a>
 80045dc:	230c      	movs	r3, #12
 80045de:	602b      	str	r3, [r5, #0]
 80045e0:	e7d4      	b.n	800458c <_free_r+0x24>
 80045e2:	6820      	ldr	r0, [r4, #0]
 80045e4:	1821      	adds	r1, r4, r0
 80045e6:	428b      	cmp	r3, r1
 80045e8:	bf01      	itttt	eq
 80045ea:	6819      	ldreq	r1, [r3, #0]
 80045ec:	685b      	ldreq	r3, [r3, #4]
 80045ee:	1809      	addeq	r1, r1, r0
 80045f0:	6021      	streq	r1, [r4, #0]
 80045f2:	6063      	str	r3, [r4, #4]
 80045f4:	6054      	str	r4, [r2, #4]
 80045f6:	e7c9      	b.n	800458c <_free_r+0x24>
 80045f8:	bd38      	pop	{r3, r4, r5, pc}
 80045fa:	bf00      	nop
 80045fc:	200001a4 	.word	0x200001a4

08004600 <_malloc_r>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	1ccd      	adds	r5, r1, #3
 8004604:	f025 0503 	bic.w	r5, r5, #3
 8004608:	3508      	adds	r5, #8
 800460a:	2d0c      	cmp	r5, #12
 800460c:	bf38      	it	cc
 800460e:	250c      	movcc	r5, #12
 8004610:	2d00      	cmp	r5, #0
 8004612:	4606      	mov	r6, r0
 8004614:	db01      	blt.n	800461a <_malloc_r+0x1a>
 8004616:	42a9      	cmp	r1, r5
 8004618:	d903      	bls.n	8004622 <_malloc_r+0x22>
 800461a:	230c      	movs	r3, #12
 800461c:	6033      	str	r3, [r6, #0]
 800461e:	2000      	movs	r0, #0
 8004620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004622:	f000 f877 	bl	8004714 <__malloc_lock>
 8004626:	4921      	ldr	r1, [pc, #132]	; (80046ac <_malloc_r+0xac>)
 8004628:	680a      	ldr	r2, [r1, #0]
 800462a:	4614      	mov	r4, r2
 800462c:	b99c      	cbnz	r4, 8004656 <_malloc_r+0x56>
 800462e:	4f20      	ldr	r7, [pc, #128]	; (80046b0 <_malloc_r+0xb0>)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	b923      	cbnz	r3, 800463e <_malloc_r+0x3e>
 8004634:	4621      	mov	r1, r4
 8004636:	4630      	mov	r0, r6
 8004638:	f000 f83c 	bl	80046b4 <_sbrk_r>
 800463c:	6038      	str	r0, [r7, #0]
 800463e:	4629      	mov	r1, r5
 8004640:	4630      	mov	r0, r6
 8004642:	f000 f837 	bl	80046b4 <_sbrk_r>
 8004646:	1c43      	adds	r3, r0, #1
 8004648:	d123      	bne.n	8004692 <_malloc_r+0x92>
 800464a:	230c      	movs	r3, #12
 800464c:	4630      	mov	r0, r6
 800464e:	6033      	str	r3, [r6, #0]
 8004650:	f000 f866 	bl	8004720 <__malloc_unlock>
 8004654:	e7e3      	b.n	800461e <_malloc_r+0x1e>
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	1b5b      	subs	r3, r3, r5
 800465a:	d417      	bmi.n	800468c <_malloc_r+0x8c>
 800465c:	2b0b      	cmp	r3, #11
 800465e:	d903      	bls.n	8004668 <_malloc_r+0x68>
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	441c      	add	r4, r3
 8004664:	6025      	str	r5, [r4, #0]
 8004666:	e004      	b.n	8004672 <_malloc_r+0x72>
 8004668:	6863      	ldr	r3, [r4, #4]
 800466a:	42a2      	cmp	r2, r4
 800466c:	bf0c      	ite	eq
 800466e:	600b      	streq	r3, [r1, #0]
 8004670:	6053      	strne	r3, [r2, #4]
 8004672:	4630      	mov	r0, r6
 8004674:	f000 f854 	bl	8004720 <__malloc_unlock>
 8004678:	f104 000b 	add.w	r0, r4, #11
 800467c:	1d23      	adds	r3, r4, #4
 800467e:	f020 0007 	bic.w	r0, r0, #7
 8004682:	1ac2      	subs	r2, r0, r3
 8004684:	d0cc      	beq.n	8004620 <_malloc_r+0x20>
 8004686:	1a1b      	subs	r3, r3, r0
 8004688:	50a3      	str	r3, [r4, r2]
 800468a:	e7c9      	b.n	8004620 <_malloc_r+0x20>
 800468c:	4622      	mov	r2, r4
 800468e:	6864      	ldr	r4, [r4, #4]
 8004690:	e7cc      	b.n	800462c <_malloc_r+0x2c>
 8004692:	1cc4      	adds	r4, r0, #3
 8004694:	f024 0403 	bic.w	r4, r4, #3
 8004698:	42a0      	cmp	r0, r4
 800469a:	d0e3      	beq.n	8004664 <_malloc_r+0x64>
 800469c:	1a21      	subs	r1, r4, r0
 800469e:	4630      	mov	r0, r6
 80046a0:	f000 f808 	bl	80046b4 <_sbrk_r>
 80046a4:	3001      	adds	r0, #1
 80046a6:	d1dd      	bne.n	8004664 <_malloc_r+0x64>
 80046a8:	e7cf      	b.n	800464a <_malloc_r+0x4a>
 80046aa:	bf00      	nop
 80046ac:	200001a4 	.word	0x200001a4
 80046b0:	200001a8 	.word	0x200001a8

080046b4 <_sbrk_r>:
 80046b4:	b538      	push	{r3, r4, r5, lr}
 80046b6:	2300      	movs	r3, #0
 80046b8:	4d05      	ldr	r5, [pc, #20]	; (80046d0 <_sbrk_r+0x1c>)
 80046ba:	4604      	mov	r4, r0
 80046bc:	4608      	mov	r0, r1
 80046be:	602b      	str	r3, [r5, #0]
 80046c0:	f7fd f940 	bl	8001944 <_sbrk>
 80046c4:	1c43      	adds	r3, r0, #1
 80046c6:	d102      	bne.n	80046ce <_sbrk_r+0x1a>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	b103      	cbz	r3, 80046ce <_sbrk_r+0x1a>
 80046cc:	6023      	str	r3, [r4, #0]
 80046ce:	bd38      	pop	{r3, r4, r5, pc}
 80046d0:	2000031c 	.word	0x2000031c

080046d4 <siprintf>:
 80046d4:	b40e      	push	{r1, r2, r3}
 80046d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046da:	b500      	push	{lr}
 80046dc:	b09c      	sub	sp, #112	; 0x70
 80046de:	ab1d      	add	r3, sp, #116	; 0x74
 80046e0:	9002      	str	r0, [sp, #8]
 80046e2:	9006      	str	r0, [sp, #24]
 80046e4:	9107      	str	r1, [sp, #28]
 80046e6:	9104      	str	r1, [sp, #16]
 80046e8:	4808      	ldr	r0, [pc, #32]	; (800470c <siprintf+0x38>)
 80046ea:	4909      	ldr	r1, [pc, #36]	; (8004710 <siprintf+0x3c>)
 80046ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80046f0:	9105      	str	r1, [sp, #20]
 80046f2:	6800      	ldr	r0, [r0, #0]
 80046f4:	a902      	add	r1, sp, #8
 80046f6:	9301      	str	r3, [sp, #4]
 80046f8:	f000 f874 	bl	80047e4 <_svfiprintf_r>
 80046fc:	2200      	movs	r2, #0
 80046fe:	9b02      	ldr	r3, [sp, #8]
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	b01c      	add	sp, #112	; 0x70
 8004704:	f85d eb04 	ldr.w	lr, [sp], #4
 8004708:	b003      	add	sp, #12
 800470a:	4770      	bx	lr
 800470c:	200000a8 	.word	0x200000a8
 8004710:	ffff0208 	.word	0xffff0208

08004714 <__malloc_lock>:
 8004714:	4801      	ldr	r0, [pc, #4]	; (800471c <__malloc_lock+0x8>)
 8004716:	f000 bafb 	b.w	8004d10 <__retarget_lock_acquire_recursive>
 800471a:	bf00      	nop
 800471c:	20000324 	.word	0x20000324

08004720 <__malloc_unlock>:
 8004720:	4801      	ldr	r0, [pc, #4]	; (8004728 <__malloc_unlock+0x8>)
 8004722:	f000 baf6 	b.w	8004d12 <__retarget_lock_release_recursive>
 8004726:	bf00      	nop
 8004728:	20000324 	.word	0x20000324

0800472c <__ssputs_r>:
 800472c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004730:	688e      	ldr	r6, [r1, #8]
 8004732:	4682      	mov	sl, r0
 8004734:	429e      	cmp	r6, r3
 8004736:	460c      	mov	r4, r1
 8004738:	4690      	mov	r8, r2
 800473a:	461f      	mov	r7, r3
 800473c:	d838      	bhi.n	80047b0 <__ssputs_r+0x84>
 800473e:	898a      	ldrh	r2, [r1, #12]
 8004740:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004744:	d032      	beq.n	80047ac <__ssputs_r+0x80>
 8004746:	6825      	ldr	r5, [r4, #0]
 8004748:	6909      	ldr	r1, [r1, #16]
 800474a:	3301      	adds	r3, #1
 800474c:	eba5 0901 	sub.w	r9, r5, r1
 8004750:	6965      	ldr	r5, [r4, #20]
 8004752:	444b      	add	r3, r9
 8004754:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004758:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800475c:	106d      	asrs	r5, r5, #1
 800475e:	429d      	cmp	r5, r3
 8004760:	bf38      	it	cc
 8004762:	461d      	movcc	r5, r3
 8004764:	0553      	lsls	r3, r2, #21
 8004766:	d531      	bpl.n	80047cc <__ssputs_r+0xa0>
 8004768:	4629      	mov	r1, r5
 800476a:	f7ff ff49 	bl	8004600 <_malloc_r>
 800476e:	4606      	mov	r6, r0
 8004770:	b950      	cbnz	r0, 8004788 <__ssputs_r+0x5c>
 8004772:	230c      	movs	r3, #12
 8004774:	f04f 30ff 	mov.w	r0, #4294967295
 8004778:	f8ca 3000 	str.w	r3, [sl]
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004782:	81a3      	strh	r3, [r4, #12]
 8004784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004788:	464a      	mov	r2, r9
 800478a:	6921      	ldr	r1, [r4, #16]
 800478c:	f000 fad0 	bl	8004d30 <memcpy>
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479a:	81a3      	strh	r3, [r4, #12]
 800479c:	6126      	str	r6, [r4, #16]
 800479e:	444e      	add	r6, r9
 80047a0:	6026      	str	r6, [r4, #0]
 80047a2:	463e      	mov	r6, r7
 80047a4:	6165      	str	r5, [r4, #20]
 80047a6:	eba5 0509 	sub.w	r5, r5, r9
 80047aa:	60a5      	str	r5, [r4, #8]
 80047ac:	42be      	cmp	r6, r7
 80047ae:	d900      	bls.n	80047b2 <__ssputs_r+0x86>
 80047b0:	463e      	mov	r6, r7
 80047b2:	4632      	mov	r2, r6
 80047b4:	4641      	mov	r1, r8
 80047b6:	6820      	ldr	r0, [r4, #0]
 80047b8:	f000 fac8 	bl	8004d4c <memmove>
 80047bc:	68a3      	ldr	r3, [r4, #8]
 80047be:	6822      	ldr	r2, [r4, #0]
 80047c0:	1b9b      	subs	r3, r3, r6
 80047c2:	4432      	add	r2, r6
 80047c4:	2000      	movs	r0, #0
 80047c6:	60a3      	str	r3, [r4, #8]
 80047c8:	6022      	str	r2, [r4, #0]
 80047ca:	e7db      	b.n	8004784 <__ssputs_r+0x58>
 80047cc:	462a      	mov	r2, r5
 80047ce:	f000 fad7 	bl	8004d80 <_realloc_r>
 80047d2:	4606      	mov	r6, r0
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d1e1      	bne.n	800479c <__ssputs_r+0x70>
 80047d8:	4650      	mov	r0, sl
 80047da:	6921      	ldr	r1, [r4, #16]
 80047dc:	f7ff fec4 	bl	8004568 <_free_r>
 80047e0:	e7c7      	b.n	8004772 <__ssputs_r+0x46>
	...

080047e4 <_svfiprintf_r>:
 80047e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e8:	4698      	mov	r8, r3
 80047ea:	898b      	ldrh	r3, [r1, #12]
 80047ec:	4607      	mov	r7, r0
 80047ee:	061b      	lsls	r3, r3, #24
 80047f0:	460d      	mov	r5, r1
 80047f2:	4614      	mov	r4, r2
 80047f4:	b09d      	sub	sp, #116	; 0x74
 80047f6:	d50e      	bpl.n	8004816 <_svfiprintf_r+0x32>
 80047f8:	690b      	ldr	r3, [r1, #16]
 80047fa:	b963      	cbnz	r3, 8004816 <_svfiprintf_r+0x32>
 80047fc:	2140      	movs	r1, #64	; 0x40
 80047fe:	f7ff feff 	bl	8004600 <_malloc_r>
 8004802:	6028      	str	r0, [r5, #0]
 8004804:	6128      	str	r0, [r5, #16]
 8004806:	b920      	cbnz	r0, 8004812 <_svfiprintf_r+0x2e>
 8004808:	230c      	movs	r3, #12
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	f04f 30ff 	mov.w	r0, #4294967295
 8004810:	e0d1      	b.n	80049b6 <_svfiprintf_r+0x1d2>
 8004812:	2340      	movs	r3, #64	; 0x40
 8004814:	616b      	str	r3, [r5, #20]
 8004816:	2300      	movs	r3, #0
 8004818:	9309      	str	r3, [sp, #36]	; 0x24
 800481a:	2320      	movs	r3, #32
 800481c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004820:	2330      	movs	r3, #48	; 0x30
 8004822:	f04f 0901 	mov.w	r9, #1
 8004826:	f8cd 800c 	str.w	r8, [sp, #12]
 800482a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80049d0 <_svfiprintf_r+0x1ec>
 800482e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004832:	4623      	mov	r3, r4
 8004834:	469a      	mov	sl, r3
 8004836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800483a:	b10a      	cbz	r2, 8004840 <_svfiprintf_r+0x5c>
 800483c:	2a25      	cmp	r2, #37	; 0x25
 800483e:	d1f9      	bne.n	8004834 <_svfiprintf_r+0x50>
 8004840:	ebba 0b04 	subs.w	fp, sl, r4
 8004844:	d00b      	beq.n	800485e <_svfiprintf_r+0x7a>
 8004846:	465b      	mov	r3, fp
 8004848:	4622      	mov	r2, r4
 800484a:	4629      	mov	r1, r5
 800484c:	4638      	mov	r0, r7
 800484e:	f7ff ff6d 	bl	800472c <__ssputs_r>
 8004852:	3001      	adds	r0, #1
 8004854:	f000 80aa 	beq.w	80049ac <_svfiprintf_r+0x1c8>
 8004858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800485a:	445a      	add	r2, fp
 800485c:	9209      	str	r2, [sp, #36]	; 0x24
 800485e:	f89a 3000 	ldrb.w	r3, [sl]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 80a2 	beq.w	80049ac <_svfiprintf_r+0x1c8>
 8004868:	2300      	movs	r3, #0
 800486a:	f04f 32ff 	mov.w	r2, #4294967295
 800486e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004872:	f10a 0a01 	add.w	sl, sl, #1
 8004876:	9304      	str	r3, [sp, #16]
 8004878:	9307      	str	r3, [sp, #28]
 800487a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800487e:	931a      	str	r3, [sp, #104]	; 0x68
 8004880:	4654      	mov	r4, sl
 8004882:	2205      	movs	r2, #5
 8004884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004888:	4851      	ldr	r0, [pc, #324]	; (80049d0 <_svfiprintf_r+0x1ec>)
 800488a:	f000 fa43 	bl	8004d14 <memchr>
 800488e:	9a04      	ldr	r2, [sp, #16]
 8004890:	b9d8      	cbnz	r0, 80048ca <_svfiprintf_r+0xe6>
 8004892:	06d0      	lsls	r0, r2, #27
 8004894:	bf44      	itt	mi
 8004896:	2320      	movmi	r3, #32
 8004898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800489c:	0711      	lsls	r1, r2, #28
 800489e:	bf44      	itt	mi
 80048a0:	232b      	movmi	r3, #43	; 0x2b
 80048a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048a6:	f89a 3000 	ldrb.w	r3, [sl]
 80048aa:	2b2a      	cmp	r3, #42	; 0x2a
 80048ac:	d015      	beq.n	80048da <_svfiprintf_r+0xf6>
 80048ae:	4654      	mov	r4, sl
 80048b0:	2000      	movs	r0, #0
 80048b2:	f04f 0c0a 	mov.w	ip, #10
 80048b6:	9a07      	ldr	r2, [sp, #28]
 80048b8:	4621      	mov	r1, r4
 80048ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048be:	3b30      	subs	r3, #48	; 0x30
 80048c0:	2b09      	cmp	r3, #9
 80048c2:	d94e      	bls.n	8004962 <_svfiprintf_r+0x17e>
 80048c4:	b1b0      	cbz	r0, 80048f4 <_svfiprintf_r+0x110>
 80048c6:	9207      	str	r2, [sp, #28]
 80048c8:	e014      	b.n	80048f4 <_svfiprintf_r+0x110>
 80048ca:	eba0 0308 	sub.w	r3, r0, r8
 80048ce:	fa09 f303 	lsl.w	r3, r9, r3
 80048d2:	4313      	orrs	r3, r2
 80048d4:	46a2      	mov	sl, r4
 80048d6:	9304      	str	r3, [sp, #16]
 80048d8:	e7d2      	b.n	8004880 <_svfiprintf_r+0x9c>
 80048da:	9b03      	ldr	r3, [sp, #12]
 80048dc:	1d19      	adds	r1, r3, #4
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	9103      	str	r1, [sp, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	bfbb      	ittet	lt
 80048e6:	425b      	neglt	r3, r3
 80048e8:	f042 0202 	orrlt.w	r2, r2, #2
 80048ec:	9307      	strge	r3, [sp, #28]
 80048ee:	9307      	strlt	r3, [sp, #28]
 80048f0:	bfb8      	it	lt
 80048f2:	9204      	strlt	r2, [sp, #16]
 80048f4:	7823      	ldrb	r3, [r4, #0]
 80048f6:	2b2e      	cmp	r3, #46	; 0x2e
 80048f8:	d10c      	bne.n	8004914 <_svfiprintf_r+0x130>
 80048fa:	7863      	ldrb	r3, [r4, #1]
 80048fc:	2b2a      	cmp	r3, #42	; 0x2a
 80048fe:	d135      	bne.n	800496c <_svfiprintf_r+0x188>
 8004900:	9b03      	ldr	r3, [sp, #12]
 8004902:	3402      	adds	r4, #2
 8004904:	1d1a      	adds	r2, r3, #4
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	9203      	str	r2, [sp, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	bfb8      	it	lt
 800490e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004912:	9305      	str	r3, [sp, #20]
 8004914:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049e0 <_svfiprintf_r+0x1fc>
 8004918:	2203      	movs	r2, #3
 800491a:	4650      	mov	r0, sl
 800491c:	7821      	ldrb	r1, [r4, #0]
 800491e:	f000 f9f9 	bl	8004d14 <memchr>
 8004922:	b140      	cbz	r0, 8004936 <_svfiprintf_r+0x152>
 8004924:	2340      	movs	r3, #64	; 0x40
 8004926:	eba0 000a 	sub.w	r0, r0, sl
 800492a:	fa03 f000 	lsl.w	r0, r3, r0
 800492e:	9b04      	ldr	r3, [sp, #16]
 8004930:	3401      	adds	r4, #1
 8004932:	4303      	orrs	r3, r0
 8004934:	9304      	str	r3, [sp, #16]
 8004936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800493a:	2206      	movs	r2, #6
 800493c:	4825      	ldr	r0, [pc, #148]	; (80049d4 <_svfiprintf_r+0x1f0>)
 800493e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004942:	f000 f9e7 	bl	8004d14 <memchr>
 8004946:	2800      	cmp	r0, #0
 8004948:	d038      	beq.n	80049bc <_svfiprintf_r+0x1d8>
 800494a:	4b23      	ldr	r3, [pc, #140]	; (80049d8 <_svfiprintf_r+0x1f4>)
 800494c:	bb1b      	cbnz	r3, 8004996 <_svfiprintf_r+0x1b2>
 800494e:	9b03      	ldr	r3, [sp, #12]
 8004950:	3307      	adds	r3, #7
 8004952:	f023 0307 	bic.w	r3, r3, #7
 8004956:	3308      	adds	r3, #8
 8004958:	9303      	str	r3, [sp, #12]
 800495a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800495c:	4433      	add	r3, r6
 800495e:	9309      	str	r3, [sp, #36]	; 0x24
 8004960:	e767      	b.n	8004832 <_svfiprintf_r+0x4e>
 8004962:	460c      	mov	r4, r1
 8004964:	2001      	movs	r0, #1
 8004966:	fb0c 3202 	mla	r2, ip, r2, r3
 800496a:	e7a5      	b.n	80048b8 <_svfiprintf_r+0xd4>
 800496c:	2300      	movs	r3, #0
 800496e:	f04f 0c0a 	mov.w	ip, #10
 8004972:	4619      	mov	r1, r3
 8004974:	3401      	adds	r4, #1
 8004976:	9305      	str	r3, [sp, #20]
 8004978:	4620      	mov	r0, r4
 800497a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800497e:	3a30      	subs	r2, #48	; 0x30
 8004980:	2a09      	cmp	r2, #9
 8004982:	d903      	bls.n	800498c <_svfiprintf_r+0x1a8>
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0c5      	beq.n	8004914 <_svfiprintf_r+0x130>
 8004988:	9105      	str	r1, [sp, #20]
 800498a:	e7c3      	b.n	8004914 <_svfiprintf_r+0x130>
 800498c:	4604      	mov	r4, r0
 800498e:	2301      	movs	r3, #1
 8004990:	fb0c 2101 	mla	r1, ip, r1, r2
 8004994:	e7f0      	b.n	8004978 <_svfiprintf_r+0x194>
 8004996:	ab03      	add	r3, sp, #12
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	462a      	mov	r2, r5
 800499c:	4638      	mov	r0, r7
 800499e:	4b0f      	ldr	r3, [pc, #60]	; (80049dc <_svfiprintf_r+0x1f8>)
 80049a0:	a904      	add	r1, sp, #16
 80049a2:	f3af 8000 	nop.w
 80049a6:	1c42      	adds	r2, r0, #1
 80049a8:	4606      	mov	r6, r0
 80049aa:	d1d6      	bne.n	800495a <_svfiprintf_r+0x176>
 80049ac:	89ab      	ldrh	r3, [r5, #12]
 80049ae:	065b      	lsls	r3, r3, #25
 80049b0:	f53f af2c 	bmi.w	800480c <_svfiprintf_r+0x28>
 80049b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049b6:	b01d      	add	sp, #116	; 0x74
 80049b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049bc:	ab03      	add	r3, sp, #12
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	462a      	mov	r2, r5
 80049c2:	4638      	mov	r0, r7
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <_svfiprintf_r+0x1f8>)
 80049c6:	a904      	add	r1, sp, #16
 80049c8:	f000 f87c 	bl	8004ac4 <_printf_i>
 80049cc:	e7eb      	b.n	80049a6 <_svfiprintf_r+0x1c2>
 80049ce:	bf00      	nop
 80049d0:	080050da 	.word	0x080050da
 80049d4:	080050e4 	.word	0x080050e4
 80049d8:	00000000 	.word	0x00000000
 80049dc:	0800472d 	.word	0x0800472d
 80049e0:	080050e0 	.word	0x080050e0

080049e4 <_printf_common>:
 80049e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049e8:	4616      	mov	r6, r2
 80049ea:	4699      	mov	r9, r3
 80049ec:	688a      	ldr	r2, [r1, #8]
 80049ee:	690b      	ldr	r3, [r1, #16]
 80049f0:	4607      	mov	r7, r0
 80049f2:	4293      	cmp	r3, r2
 80049f4:	bfb8      	it	lt
 80049f6:	4613      	movlt	r3, r2
 80049f8:	6033      	str	r3, [r6, #0]
 80049fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049fe:	460c      	mov	r4, r1
 8004a00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a04:	b10a      	cbz	r2, 8004a0a <_printf_common+0x26>
 8004a06:	3301      	adds	r3, #1
 8004a08:	6033      	str	r3, [r6, #0]
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	0699      	lsls	r1, r3, #26
 8004a0e:	bf42      	ittt	mi
 8004a10:	6833      	ldrmi	r3, [r6, #0]
 8004a12:	3302      	addmi	r3, #2
 8004a14:	6033      	strmi	r3, [r6, #0]
 8004a16:	6825      	ldr	r5, [r4, #0]
 8004a18:	f015 0506 	ands.w	r5, r5, #6
 8004a1c:	d106      	bne.n	8004a2c <_printf_common+0x48>
 8004a1e:	f104 0a19 	add.w	sl, r4, #25
 8004a22:	68e3      	ldr	r3, [r4, #12]
 8004a24:	6832      	ldr	r2, [r6, #0]
 8004a26:	1a9b      	subs	r3, r3, r2
 8004a28:	42ab      	cmp	r3, r5
 8004a2a:	dc28      	bgt.n	8004a7e <_printf_common+0x9a>
 8004a2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a30:	1e13      	subs	r3, r2, #0
 8004a32:	6822      	ldr	r2, [r4, #0]
 8004a34:	bf18      	it	ne
 8004a36:	2301      	movne	r3, #1
 8004a38:	0692      	lsls	r2, r2, #26
 8004a3a:	d42d      	bmi.n	8004a98 <_printf_common+0xb4>
 8004a3c:	4649      	mov	r1, r9
 8004a3e:	4638      	mov	r0, r7
 8004a40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a44:	47c0      	blx	r8
 8004a46:	3001      	adds	r0, #1
 8004a48:	d020      	beq.n	8004a8c <_printf_common+0xa8>
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	68e5      	ldr	r5, [r4, #12]
 8004a4e:	f003 0306 	and.w	r3, r3, #6
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	bf18      	it	ne
 8004a56:	2500      	movne	r5, #0
 8004a58:	6832      	ldr	r2, [r6, #0]
 8004a5a:	f04f 0600 	mov.w	r6, #0
 8004a5e:	68a3      	ldr	r3, [r4, #8]
 8004a60:	bf08      	it	eq
 8004a62:	1aad      	subeq	r5, r5, r2
 8004a64:	6922      	ldr	r2, [r4, #16]
 8004a66:	bf08      	it	eq
 8004a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	bfc4      	itt	gt
 8004a70:	1a9b      	subgt	r3, r3, r2
 8004a72:	18ed      	addgt	r5, r5, r3
 8004a74:	341a      	adds	r4, #26
 8004a76:	42b5      	cmp	r5, r6
 8004a78:	d11a      	bne.n	8004ab0 <_printf_common+0xcc>
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	e008      	b.n	8004a90 <_printf_common+0xac>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	4652      	mov	r2, sl
 8004a82:	4649      	mov	r1, r9
 8004a84:	4638      	mov	r0, r7
 8004a86:	47c0      	blx	r8
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d103      	bne.n	8004a94 <_printf_common+0xb0>
 8004a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a94:	3501      	adds	r5, #1
 8004a96:	e7c4      	b.n	8004a22 <_printf_common+0x3e>
 8004a98:	2030      	movs	r0, #48	; 0x30
 8004a9a:	18e1      	adds	r1, r4, r3
 8004a9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004aa6:	4422      	add	r2, r4
 8004aa8:	3302      	adds	r3, #2
 8004aaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004aae:	e7c5      	b.n	8004a3c <_printf_common+0x58>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	4649      	mov	r1, r9
 8004ab6:	4638      	mov	r0, r7
 8004ab8:	47c0      	blx	r8
 8004aba:	3001      	adds	r0, #1
 8004abc:	d0e6      	beq.n	8004a8c <_printf_common+0xa8>
 8004abe:	3601      	adds	r6, #1
 8004ac0:	e7d9      	b.n	8004a76 <_printf_common+0x92>
	...

08004ac4 <_printf_i>:
 8004ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac8:	460c      	mov	r4, r1
 8004aca:	7e27      	ldrb	r7, [r4, #24]
 8004acc:	4691      	mov	r9, r2
 8004ace:	2f78      	cmp	r7, #120	; 0x78
 8004ad0:	4680      	mov	r8, r0
 8004ad2:	469a      	mov	sl, r3
 8004ad4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ad6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ada:	d807      	bhi.n	8004aec <_printf_i+0x28>
 8004adc:	2f62      	cmp	r7, #98	; 0x62
 8004ade:	d80a      	bhi.n	8004af6 <_printf_i+0x32>
 8004ae0:	2f00      	cmp	r7, #0
 8004ae2:	f000 80d9 	beq.w	8004c98 <_printf_i+0x1d4>
 8004ae6:	2f58      	cmp	r7, #88	; 0x58
 8004ae8:	f000 80a4 	beq.w	8004c34 <_printf_i+0x170>
 8004aec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004af0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004af4:	e03a      	b.n	8004b6c <_printf_i+0xa8>
 8004af6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004afa:	2b15      	cmp	r3, #21
 8004afc:	d8f6      	bhi.n	8004aec <_printf_i+0x28>
 8004afe:	a001      	add	r0, pc, #4	; (adr r0, 8004b04 <_printf_i+0x40>)
 8004b00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b04:	08004b5d 	.word	0x08004b5d
 8004b08:	08004b71 	.word	0x08004b71
 8004b0c:	08004aed 	.word	0x08004aed
 8004b10:	08004aed 	.word	0x08004aed
 8004b14:	08004aed 	.word	0x08004aed
 8004b18:	08004aed 	.word	0x08004aed
 8004b1c:	08004b71 	.word	0x08004b71
 8004b20:	08004aed 	.word	0x08004aed
 8004b24:	08004aed 	.word	0x08004aed
 8004b28:	08004aed 	.word	0x08004aed
 8004b2c:	08004aed 	.word	0x08004aed
 8004b30:	08004c7f 	.word	0x08004c7f
 8004b34:	08004ba1 	.word	0x08004ba1
 8004b38:	08004c61 	.word	0x08004c61
 8004b3c:	08004aed 	.word	0x08004aed
 8004b40:	08004aed 	.word	0x08004aed
 8004b44:	08004ca1 	.word	0x08004ca1
 8004b48:	08004aed 	.word	0x08004aed
 8004b4c:	08004ba1 	.word	0x08004ba1
 8004b50:	08004aed 	.word	0x08004aed
 8004b54:	08004aed 	.word	0x08004aed
 8004b58:	08004c69 	.word	0x08004c69
 8004b5c:	680b      	ldr	r3, [r1, #0]
 8004b5e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b62:	1d1a      	adds	r2, r3, #4
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	600a      	str	r2, [r1, #0]
 8004b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0a4      	b.n	8004cba <_printf_i+0x1f6>
 8004b70:	6825      	ldr	r5, [r4, #0]
 8004b72:	6808      	ldr	r0, [r1, #0]
 8004b74:	062e      	lsls	r6, r5, #24
 8004b76:	f100 0304 	add.w	r3, r0, #4
 8004b7a:	d50a      	bpl.n	8004b92 <_printf_i+0xce>
 8004b7c:	6805      	ldr	r5, [r0, #0]
 8004b7e:	600b      	str	r3, [r1, #0]
 8004b80:	2d00      	cmp	r5, #0
 8004b82:	da03      	bge.n	8004b8c <_printf_i+0xc8>
 8004b84:	232d      	movs	r3, #45	; 0x2d
 8004b86:	426d      	negs	r5, r5
 8004b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b8c:	230a      	movs	r3, #10
 8004b8e:	485e      	ldr	r0, [pc, #376]	; (8004d08 <_printf_i+0x244>)
 8004b90:	e019      	b.n	8004bc6 <_printf_i+0x102>
 8004b92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b96:	6805      	ldr	r5, [r0, #0]
 8004b98:	600b      	str	r3, [r1, #0]
 8004b9a:	bf18      	it	ne
 8004b9c:	b22d      	sxthne	r5, r5
 8004b9e:	e7ef      	b.n	8004b80 <_printf_i+0xbc>
 8004ba0:	680b      	ldr	r3, [r1, #0]
 8004ba2:	6825      	ldr	r5, [r4, #0]
 8004ba4:	1d18      	adds	r0, r3, #4
 8004ba6:	6008      	str	r0, [r1, #0]
 8004ba8:	0628      	lsls	r0, r5, #24
 8004baa:	d501      	bpl.n	8004bb0 <_printf_i+0xec>
 8004bac:	681d      	ldr	r5, [r3, #0]
 8004bae:	e002      	b.n	8004bb6 <_printf_i+0xf2>
 8004bb0:	0669      	lsls	r1, r5, #25
 8004bb2:	d5fb      	bpl.n	8004bac <_printf_i+0xe8>
 8004bb4:	881d      	ldrh	r5, [r3, #0]
 8004bb6:	2f6f      	cmp	r7, #111	; 0x6f
 8004bb8:	bf0c      	ite	eq
 8004bba:	2308      	moveq	r3, #8
 8004bbc:	230a      	movne	r3, #10
 8004bbe:	4852      	ldr	r0, [pc, #328]	; (8004d08 <_printf_i+0x244>)
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bc6:	6866      	ldr	r6, [r4, #4]
 8004bc8:	2e00      	cmp	r6, #0
 8004bca:	bfa8      	it	ge
 8004bcc:	6821      	ldrge	r1, [r4, #0]
 8004bce:	60a6      	str	r6, [r4, #8]
 8004bd0:	bfa4      	itt	ge
 8004bd2:	f021 0104 	bicge.w	r1, r1, #4
 8004bd6:	6021      	strge	r1, [r4, #0]
 8004bd8:	b90d      	cbnz	r5, 8004bde <_printf_i+0x11a>
 8004bda:	2e00      	cmp	r6, #0
 8004bdc:	d04d      	beq.n	8004c7a <_printf_i+0x1b6>
 8004bde:	4616      	mov	r6, r2
 8004be0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004be4:	fb03 5711 	mls	r7, r3, r1, r5
 8004be8:	5dc7      	ldrb	r7, [r0, r7]
 8004bea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bee:	462f      	mov	r7, r5
 8004bf0:	42bb      	cmp	r3, r7
 8004bf2:	460d      	mov	r5, r1
 8004bf4:	d9f4      	bls.n	8004be0 <_printf_i+0x11c>
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d10b      	bne.n	8004c12 <_printf_i+0x14e>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	07df      	lsls	r7, r3, #31
 8004bfe:	d508      	bpl.n	8004c12 <_printf_i+0x14e>
 8004c00:	6923      	ldr	r3, [r4, #16]
 8004c02:	6861      	ldr	r1, [r4, #4]
 8004c04:	4299      	cmp	r1, r3
 8004c06:	bfde      	ittt	le
 8004c08:	2330      	movle	r3, #48	; 0x30
 8004c0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c12:	1b92      	subs	r2, r2, r6
 8004c14:	6122      	str	r2, [r4, #16]
 8004c16:	464b      	mov	r3, r9
 8004c18:	4621      	mov	r1, r4
 8004c1a:	4640      	mov	r0, r8
 8004c1c:	f8cd a000 	str.w	sl, [sp]
 8004c20:	aa03      	add	r2, sp, #12
 8004c22:	f7ff fedf 	bl	80049e4 <_printf_common>
 8004c26:	3001      	adds	r0, #1
 8004c28:	d14c      	bne.n	8004cc4 <_printf_i+0x200>
 8004c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2e:	b004      	add	sp, #16
 8004c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c34:	4834      	ldr	r0, [pc, #208]	; (8004d08 <_printf_i+0x244>)
 8004c36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c3a:	680e      	ldr	r6, [r1, #0]
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c42:	061f      	lsls	r7, r3, #24
 8004c44:	600e      	str	r6, [r1, #0]
 8004c46:	d514      	bpl.n	8004c72 <_printf_i+0x1ae>
 8004c48:	07d9      	lsls	r1, r3, #31
 8004c4a:	bf44      	itt	mi
 8004c4c:	f043 0320 	orrmi.w	r3, r3, #32
 8004c50:	6023      	strmi	r3, [r4, #0]
 8004c52:	b91d      	cbnz	r5, 8004c5c <_printf_i+0x198>
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	f023 0320 	bic.w	r3, r3, #32
 8004c5a:	6023      	str	r3, [r4, #0]
 8004c5c:	2310      	movs	r3, #16
 8004c5e:	e7af      	b.n	8004bc0 <_printf_i+0xfc>
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	f043 0320 	orr.w	r3, r3, #32
 8004c66:	6023      	str	r3, [r4, #0]
 8004c68:	2378      	movs	r3, #120	; 0x78
 8004c6a:	4828      	ldr	r0, [pc, #160]	; (8004d0c <_printf_i+0x248>)
 8004c6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c70:	e7e3      	b.n	8004c3a <_printf_i+0x176>
 8004c72:	065e      	lsls	r6, r3, #25
 8004c74:	bf48      	it	mi
 8004c76:	b2ad      	uxthmi	r5, r5
 8004c78:	e7e6      	b.n	8004c48 <_printf_i+0x184>
 8004c7a:	4616      	mov	r6, r2
 8004c7c:	e7bb      	b.n	8004bf6 <_printf_i+0x132>
 8004c7e:	680b      	ldr	r3, [r1, #0]
 8004c80:	6826      	ldr	r6, [r4, #0]
 8004c82:	1d1d      	adds	r5, r3, #4
 8004c84:	6960      	ldr	r0, [r4, #20]
 8004c86:	600d      	str	r5, [r1, #0]
 8004c88:	0635      	lsls	r5, r6, #24
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	d501      	bpl.n	8004c92 <_printf_i+0x1ce>
 8004c8e:	6018      	str	r0, [r3, #0]
 8004c90:	e002      	b.n	8004c98 <_printf_i+0x1d4>
 8004c92:	0671      	lsls	r1, r6, #25
 8004c94:	d5fb      	bpl.n	8004c8e <_printf_i+0x1ca>
 8004c96:	8018      	strh	r0, [r3, #0]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	4616      	mov	r6, r2
 8004c9c:	6123      	str	r3, [r4, #16]
 8004c9e:	e7ba      	b.n	8004c16 <_printf_i+0x152>
 8004ca0:	680b      	ldr	r3, [r1, #0]
 8004ca2:	1d1a      	adds	r2, r3, #4
 8004ca4:	600a      	str	r2, [r1, #0]
 8004ca6:	681e      	ldr	r6, [r3, #0]
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4630      	mov	r0, r6
 8004cac:	6862      	ldr	r2, [r4, #4]
 8004cae:	f000 f831 	bl	8004d14 <memchr>
 8004cb2:	b108      	cbz	r0, 8004cb8 <_printf_i+0x1f4>
 8004cb4:	1b80      	subs	r0, r0, r6
 8004cb6:	6060      	str	r0, [r4, #4]
 8004cb8:	6863      	ldr	r3, [r4, #4]
 8004cba:	6123      	str	r3, [r4, #16]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cc2:	e7a8      	b.n	8004c16 <_printf_i+0x152>
 8004cc4:	4632      	mov	r2, r6
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	4640      	mov	r0, r8
 8004cca:	6923      	ldr	r3, [r4, #16]
 8004ccc:	47d0      	blx	sl
 8004cce:	3001      	adds	r0, #1
 8004cd0:	d0ab      	beq.n	8004c2a <_printf_i+0x166>
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	079b      	lsls	r3, r3, #30
 8004cd6:	d413      	bmi.n	8004d00 <_printf_i+0x23c>
 8004cd8:	68e0      	ldr	r0, [r4, #12]
 8004cda:	9b03      	ldr	r3, [sp, #12]
 8004cdc:	4298      	cmp	r0, r3
 8004cde:	bfb8      	it	lt
 8004ce0:	4618      	movlt	r0, r3
 8004ce2:	e7a4      	b.n	8004c2e <_printf_i+0x16a>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	4632      	mov	r2, r6
 8004ce8:	4649      	mov	r1, r9
 8004cea:	4640      	mov	r0, r8
 8004cec:	47d0      	blx	sl
 8004cee:	3001      	adds	r0, #1
 8004cf0:	d09b      	beq.n	8004c2a <_printf_i+0x166>
 8004cf2:	3501      	adds	r5, #1
 8004cf4:	68e3      	ldr	r3, [r4, #12]
 8004cf6:	9903      	ldr	r1, [sp, #12]
 8004cf8:	1a5b      	subs	r3, r3, r1
 8004cfa:	42ab      	cmp	r3, r5
 8004cfc:	dcf2      	bgt.n	8004ce4 <_printf_i+0x220>
 8004cfe:	e7eb      	b.n	8004cd8 <_printf_i+0x214>
 8004d00:	2500      	movs	r5, #0
 8004d02:	f104 0619 	add.w	r6, r4, #25
 8004d06:	e7f5      	b.n	8004cf4 <_printf_i+0x230>
 8004d08:	080050eb 	.word	0x080050eb
 8004d0c:	080050fc 	.word	0x080050fc

08004d10 <__retarget_lock_acquire_recursive>:
 8004d10:	4770      	bx	lr

08004d12 <__retarget_lock_release_recursive>:
 8004d12:	4770      	bx	lr

08004d14 <memchr>:
 8004d14:	4603      	mov	r3, r0
 8004d16:	b510      	push	{r4, lr}
 8004d18:	b2c9      	uxtb	r1, r1
 8004d1a:	4402      	add	r2, r0
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	d101      	bne.n	8004d26 <memchr+0x12>
 8004d22:	2000      	movs	r0, #0
 8004d24:	e003      	b.n	8004d2e <memchr+0x1a>
 8004d26:	7804      	ldrb	r4, [r0, #0]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	428c      	cmp	r4, r1
 8004d2c:	d1f6      	bne.n	8004d1c <memchr+0x8>
 8004d2e:	bd10      	pop	{r4, pc}

08004d30 <memcpy>:
 8004d30:	440a      	add	r2, r1
 8004d32:	4291      	cmp	r1, r2
 8004d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d38:	d100      	bne.n	8004d3c <memcpy+0xc>
 8004d3a:	4770      	bx	lr
 8004d3c:	b510      	push	{r4, lr}
 8004d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d42:	4291      	cmp	r1, r2
 8004d44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d48:	d1f9      	bne.n	8004d3e <memcpy+0xe>
 8004d4a:	bd10      	pop	{r4, pc}

08004d4c <memmove>:
 8004d4c:	4288      	cmp	r0, r1
 8004d4e:	b510      	push	{r4, lr}
 8004d50:	eb01 0402 	add.w	r4, r1, r2
 8004d54:	d902      	bls.n	8004d5c <memmove+0x10>
 8004d56:	4284      	cmp	r4, r0
 8004d58:	4623      	mov	r3, r4
 8004d5a:	d807      	bhi.n	8004d6c <memmove+0x20>
 8004d5c:	1e43      	subs	r3, r0, #1
 8004d5e:	42a1      	cmp	r1, r4
 8004d60:	d008      	beq.n	8004d74 <memmove+0x28>
 8004d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d6a:	e7f8      	b.n	8004d5e <memmove+0x12>
 8004d6c:	4601      	mov	r1, r0
 8004d6e:	4402      	add	r2, r0
 8004d70:	428a      	cmp	r2, r1
 8004d72:	d100      	bne.n	8004d76 <memmove+0x2a>
 8004d74:	bd10      	pop	{r4, pc}
 8004d76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d7e:	e7f7      	b.n	8004d70 <memmove+0x24>

08004d80 <_realloc_r>:
 8004d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d82:	4607      	mov	r7, r0
 8004d84:	4614      	mov	r4, r2
 8004d86:	460e      	mov	r6, r1
 8004d88:	b921      	cbnz	r1, 8004d94 <_realloc_r+0x14>
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d90:	f7ff bc36 	b.w	8004600 <_malloc_r>
 8004d94:	b922      	cbnz	r2, 8004da0 <_realloc_r+0x20>
 8004d96:	f7ff fbe7 	bl	8004568 <_free_r>
 8004d9a:	4625      	mov	r5, r4
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004da0:	f000 f814 	bl	8004dcc <_malloc_usable_size_r>
 8004da4:	42a0      	cmp	r0, r4
 8004da6:	d20f      	bcs.n	8004dc8 <_realloc_r+0x48>
 8004da8:	4621      	mov	r1, r4
 8004daa:	4638      	mov	r0, r7
 8004dac:	f7ff fc28 	bl	8004600 <_malloc_r>
 8004db0:	4605      	mov	r5, r0
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d0f2      	beq.n	8004d9c <_realloc_r+0x1c>
 8004db6:	4631      	mov	r1, r6
 8004db8:	4622      	mov	r2, r4
 8004dba:	f7ff ffb9 	bl	8004d30 <memcpy>
 8004dbe:	4631      	mov	r1, r6
 8004dc0:	4638      	mov	r0, r7
 8004dc2:	f7ff fbd1 	bl	8004568 <_free_r>
 8004dc6:	e7e9      	b.n	8004d9c <_realloc_r+0x1c>
 8004dc8:	4635      	mov	r5, r6
 8004dca:	e7e7      	b.n	8004d9c <_realloc_r+0x1c>

08004dcc <_malloc_usable_size_r>:
 8004dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dd0:	1f18      	subs	r0, r3, #4
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bfbc      	itt	lt
 8004dd6:	580b      	ldrlt	r3, [r1, r0]
 8004dd8:	18c0      	addlt	r0, r0, r3
 8004dda:	4770      	bx	lr

08004ddc <_init>:
 8004ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dde:	bf00      	nop
 8004de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004de2:	bc08      	pop	{r3}
 8004de4:	469e      	mov	lr, r3
 8004de6:	4770      	bx	lr

08004de8 <_fini>:
 8004de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dea:	bf00      	nop
 8004dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dee:	bc08      	pop	{r3}
 8004df0:	469e      	mov	lr, r3
 8004df2:	4770      	bx	lr
