
Project_F103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004244  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  08004350  08004350  00014350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800466c  0800466c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800466c  0800466c  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800466c  0800466c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800466c  0800466c  0001466c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08004674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200000fc  08004770  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08004770  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142e9  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002967  00000000  00000000  0003440e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00036d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  00037ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d07  00000000  00000000  000386f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001146e  00000000  00000000  000513f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b1f0  00000000  00000000  00062865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eda55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038d0  00000000  00000000  000edaa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000fc 	.word	0x200000fc
 8000128:	00000000 	.word	0x00000000
 800012c:	08004338 	.word	0x08004338

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000100 	.word	0x20000100
 8000148:	08004338 	.word	0x08004338

0800014c <isButtonPressed>:

int TimeOutForKeyPress[4] = { 200, 200, 200, 200 };
int button_flag[4] = {0,0,0,0};


int isButtonPressed(int num){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[num] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[num] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000118 	.word	0x20000118

08000180 <subKeyProcess>:
void subKeyProcess(int num){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	//TODO
	button_flag[num]=1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000118 	.word	0x20000118

080001a0 <getKeyInput>:


void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e06d      	b.n	8000288 <getKeyInput+0xe8>
		KeyReg2[i] = KeyReg1[i];
 80001ac:	4a3a      	ldr	r2, [pc, #232]	; (8000298 <getKeyInput+0xf8>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4939      	ldr	r1, [pc, #228]	; (800029c <getKeyInput+0xfc>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001bc:	4a38      	ldr	r2, [pc, #224]	; (80002a0 <getKeyInput+0x100>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4934      	ldr	r1, [pc, #208]	; (8000298 <getKeyInput+0xf8>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Add your button here
		KeyReg0[i] = HAL_GPIO_ReadPin(port[i], mode[i]);
 80001cc:	4a35      	ldr	r2, [pc, #212]	; (80002a4 <getKeyInput+0x104>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4934      	ldr	r1, [pc, #208]	; (80002a8 <getKeyInput+0x108>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001dc:	4619      	mov	r1, r3
 80001de:	4610      	mov	r0, r2
 80001e0:	f001 feba 	bl	8001f58 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a2d      	ldr	r2, [pc, #180]	; (80002a0 <getKeyInput+0x100>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001f0:	4a29      	ldr	r2, [pc, #164]	; (8000298 <getKeyInput+0xf8>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4929      	ldr	r1, [pc, #164]	; (80002a0 <getKeyInput+0x100>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d13e      	bne.n	8000282 <getKeyInput+0xe2>
 8000204:	4a24      	ldr	r2, [pc, #144]	; (8000298 <getKeyInput+0xf8>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4923      	ldr	r1, [pc, #140]	; (800029c <getKeyInput+0xfc>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d134      	bne.n	8000282 <getKeyInput+0xe2>
			if (KeyReg2[i] != KeyReg3[i]){
 8000218:	4a20      	ldr	r2, [pc, #128]	; (800029c <getKeyInput+0xfc>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4922      	ldr	r1, [pc, #136]	; (80002ac <getKeyInput+0x10c>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d016      	beq.n	800025a <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 800022c:	4a1b      	ldr	r2, [pc, #108]	; (800029c <getKeyInput+0xfc>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	491d      	ldr	r1, [pc, #116]	; (80002ac <getKeyInput+0x10c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 800023c:	4a1b      	ldr	r2, [pc, #108]	; (80002ac <getKeyInput+0x10c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d11c      	bne.n	8000282 <getKeyInput+0xe2>
					TimeOutForKeyPress[i] = 200;
 8000248:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <getKeyInput+0x110>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	21c8      	movs	r1, #200	; 0xc8
 800024e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f7ff ff94 	bl	8000180 <subKeyProcess>
 8000258:	e013      	b.n	8000282 <getKeyInput+0xe2>
				}
			}

			else{ //press without release
				TimeOutForKeyPress[i]--;
 800025a:	4a15      	ldr	r2, [pc, #84]	; (80002b0 <getKeyInput+0x110>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	1e5a      	subs	r2, r3, #1
 8000264:	4912      	ldr	r1, [pc, #72]	; (80002b0 <getKeyInput+0x110>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 800026c:	4a10      	ldr	r2, [pc, #64]	; (80002b0 <getKeyInput+0x110>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d104      	bne.n	8000282 <getKeyInput+0xe2>
					KeyReg3[i] = NORMAL_STATE;
 8000278:	4a0c      	ldr	r2, [pc, #48]	; (80002ac <getKeyInput+0x10c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2101      	movs	r1, #1
 800027e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 4; i++){
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	3301      	adds	r3, #1
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b03      	cmp	r3, #3
 800028c:	dd8e      	ble.n	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000028 	.word	0x20000028
 800029c:	20000038 	.word	0x20000038
 80002a0:	20000018 	.word	0x20000018
 80002a4:	20000008 	.word	0x20000008
 80002a8:	20000000 	.word	0x20000000
 80002ac:	20000048 	.word	0x20000048
 80002b0:	20000058 	.word	0x20000058

080002b4 <auto_man>:
#include "stdio.h"
#include "stdlib.h"

char str[40];

void auto_man(){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1) {
 80002b8:	2000      	movs	r0, #0
 80002ba:	f7ff ff47 	bl	800014c <isButtonPressed>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d113      	bne.n	80002ec <auto_man+0x38>
		resetLED();
 80002c4:	f000 fd22 	bl	8000d0c <resetLED>
//		reset7SEG();
		state = MAN_RG;
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <auto_man+0x3c>)
 80002ca:	2205      	movs	r2, #5
 80002cc:	701a      	strb	r2, [r3, #0]
		onRed1();
 80002ce:	f000 fd3b 	bl	8000d48 <onRed1>
		onGreen2();
 80002d2:	f000 fd95 	bl	8000e00 <onGreen2>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Manual: Road 1: Red\r\nRoad 2: Green\r\n"), 200);
 80002d6:	4907      	ldr	r1, [pc, #28]	; (80002f4 <auto_man+0x40>)
 80002d8:	4807      	ldr	r0, [pc, #28]	; (80002f8 <auto_man+0x44>)
 80002da:	f003 fca9 	bl	8003c30 <siprintf>
 80002de:	4603      	mov	r3, r0
 80002e0:	b29a      	uxth	r2, r3
 80002e2:	23c8      	movs	r3, #200	; 0xc8
 80002e4:	4904      	ldr	r1, [pc, #16]	; (80002f8 <auto_man+0x44>)
 80002e6:	4805      	ldr	r0, [pc, #20]	; (80002fc <auto_man+0x48>)
 80002e8:	f003 fa2a 	bl	8003740 <HAL_UART_Transmit>
	}
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000128 	.word	0x20000128
 80002f4:	08004350 	.word	0x08004350
 80002f8:	20000278 	.word	0x20000278
 80002fc:	2000022c 	.word	0x2000022c

08000300 <man_tuning>:
void man_tuning(){
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	if(isButtonPressed(0) == 1){
 8000304:	2000      	movs	r0, #0
 8000306:	f7ff ff21 	bl	800014c <isButtonPressed>
 800030a:	4603      	mov	r3, r0
 800030c:	2b01      	cmp	r3, #1
 800030e:	d116      	bne.n	800033e <man_tuning+0x3e>
		resetLED();
 8000310:	f000 fcfc 	bl	8000d0c <resetLED>
//		reset7SEG();
		state = MOD_RED;
 8000314:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <man_tuning+0x44>)
 8000316:	2207      	movs	r2, #7
 8000318:	701a      	strb	r2, [r3, #0]
		onRed1();
 800031a:	f000 fd15 	bl	8000d48 <onRed1>
		onRed2();
 800031e:	f000 fd4f 	bl	8000dc0 <onRed2>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Red\r\nTime: %d\r\n",timeRed), 200);
 8000322:	4b09      	ldr	r3, [pc, #36]	; (8000348 <man_tuning+0x48>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	461a      	mov	r2, r3
 8000328:	4908      	ldr	r1, [pc, #32]	; (800034c <man_tuning+0x4c>)
 800032a:	4809      	ldr	r0, [pc, #36]	; (8000350 <man_tuning+0x50>)
 800032c:	f003 fc80 	bl	8003c30 <siprintf>
 8000330:	4603      	mov	r3, r0
 8000332:	b29a      	uxth	r2, r3
 8000334:	23c8      	movs	r3, #200	; 0xc8
 8000336:	4906      	ldr	r1, [pc, #24]	; (8000350 <man_tuning+0x50>)
 8000338:	4806      	ldr	r0, [pc, #24]	; (8000354 <man_tuning+0x54>)
 800033a:	f003 fa01 	bl	8003740 <HAL_UART_Transmit>
	}
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000128 	.word	0x20000128
 8000348:	20000068 	.word	0x20000068
 800034c:	08004378 	.word	0x08004378
 8000350:	20000278 	.word	0x20000278
 8000354:	2000022c 	.word	0x2000022c

08000358 <fsm_auto>:

void fsm_auto(){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	switch(state){
 800035c:	4ba8      	ldr	r3, [pc, #672]	; (8000600 <fsm_auto+0x2a8>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b04      	cmp	r3, #4
 8000362:	f200 81fd 	bhi.w	8000760 <fsm_auto+0x408>
 8000366:	a201      	add	r2, pc, #4	; (adr r2, 800036c <fsm_auto+0x14>)
 8000368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036c:	08000381 	.word	0x08000381
 8000370:	080003c1 	.word	0x080003c1
 8000374:	08000473 	.word	0x08000473
 8000378:	0800054d 	.word	0x0800054d
 800037c:	08000641 	.word	0x08000641
		case INIT:
			resetLED();
 8000380:	f000 fcc4 	bl	8000d0c <resetLED>
			timeWay1 = timeRed/timeCycle;
 8000384:	4b9f      	ldr	r3, [pc, #636]	; (8000604 <fsm_auto+0x2ac>)
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	4b9f      	ldr	r3, [pc, #636]	; (8000608 <fsm_auto+0x2b0>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000390:	4a9e      	ldr	r2, [pc, #632]	; (800060c <fsm_auto+0x2b4>)
 8000392:	6013      	str	r3, [r2, #0]
			timeWay2 = timeGreen/timeCycle;
 8000394:	4b9e      	ldr	r3, [pc, #632]	; (8000610 <fsm_auto+0x2b8>)
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	4b9b      	ldr	r3, [pc, #620]	; (8000608 <fsm_auto+0x2b0>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	fb92 f3f3 	sdiv	r3, r2, r3
 80003a0:	4a9c      	ldr	r2, [pc, #624]	; (8000614 <fsm_auto+0x2bc>)
 80003a2:	6013      	str	r3, [r2, #0]
			state = RED1_GREEN2;
 80003a4:	4b96      	ldr	r3, [pc, #600]	; (8000600 <fsm_auto+0x2a8>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	701a      	strb	r2, [r3, #0]
			setTimer(0, timeGreen);
 80003aa:	4b99      	ldr	r3, [pc, #612]	; (8000610 <fsm_auto+0x2b8>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4619      	mov	r1, r3
 80003b0:	2000      	movs	r0, #0
 80003b2:	f001 f90f 	bl	80015d4 <setTimer>
			setTimer(1, 100);
 80003b6:	2164      	movs	r1, #100	; 0x64
 80003b8:	2001      	movs	r0, #1
 80003ba:	f001 f90b 	bl	80015d4 <setTimer>
			break;
 80003be:	e1d0      	b.n	8000762 <fsm_auto+0x40a>
		case RED1_GREEN2:
			onRed1();
 80003c0:	f000 fcc2 	bl	8000d48 <onRed1>
			onGreen2();
 80003c4:	f000 fd1c 	bl	8000e00 <onGreen2>
			if(timer_flag[1]){
 80003c8:	4b93      	ldr	r3, [pc, #588]	; (8000618 <fsm_auto+0x2c0>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d037      	beq.n	8000440 <fsm_auto+0xe8>
				setTimer(1, 100);
 80003d0:	2164      	movs	r1, #100	; 0x64
 80003d2:	2001      	movs	r0, #1
 80003d4:	f001 f8fe 	bl	80015d4 <setTimer>
				clearScreen();
 80003d8:	f000 fc80 	bl	8000cdc <clearScreen>
				timeWay1--;
 80003dc:	4b8b      	ldr	r3, [pc, #556]	; (800060c <fsm_auto+0x2b4>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	3b01      	subs	r3, #1
 80003e2:	4a8a      	ldr	r2, [pc, #552]	; (800060c <fsm_auto+0x2b4>)
 80003e4:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Road 1: Red\r\nTime:%d\r\n",timeWay1), 200);
 80003e6:	4b89      	ldr	r3, [pc, #548]	; (800060c <fsm_auto+0x2b4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	461a      	mov	r2, r3
 80003ec:	498b      	ldr	r1, [pc, #556]	; (800061c <fsm_auto+0x2c4>)
 80003ee:	488c      	ldr	r0, [pc, #560]	; (8000620 <fsm_auto+0x2c8>)
 80003f0:	f003 fc1e 	bl	8003c30 <siprintf>
 80003f4:	4603      	mov	r3, r0
 80003f6:	b29a      	uxth	r2, r3
 80003f8:	23c8      	movs	r3, #200	; 0xc8
 80003fa:	4989      	ldr	r1, [pc, #548]	; (8000620 <fsm_auto+0x2c8>)
 80003fc:	4889      	ldr	r0, [pc, #548]	; (8000624 <fsm_auto+0x2cc>)
 80003fe:	f003 f99f 	bl	8003740 <HAL_UART_Transmit>
				timeWay2--;
 8000402:	4b84      	ldr	r3, [pc, #528]	; (8000614 <fsm_auto+0x2bc>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	3b01      	subs	r3, #1
 8000408:	4a82      	ldr	r2, [pc, #520]	; (8000614 <fsm_auto+0x2bc>)
 800040a:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Road 2: Green\r\nTime:%d\r\n",timeWay2), 200);
 800040c:	4b81      	ldr	r3, [pc, #516]	; (8000614 <fsm_auto+0x2bc>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	461a      	mov	r2, r3
 8000412:	4985      	ldr	r1, [pc, #532]	; (8000628 <fsm_auto+0x2d0>)
 8000414:	4882      	ldr	r0, [pc, #520]	; (8000620 <fsm_auto+0x2c8>)
 8000416:	f003 fc0b 	bl	8003c30 <siprintf>
 800041a:	4603      	mov	r3, r0
 800041c:	b29a      	uxth	r2, r3
 800041e:	23c8      	movs	r3, #200	; 0xc8
 8000420:	497f      	ldr	r1, [pc, #508]	; (8000620 <fsm_auto+0x2c8>)
 8000422:	4880      	ldr	r0, [pc, #512]	; (8000624 <fsm_auto+0x2cc>)
 8000424:	f003 f98c 	bl	8003740 <HAL_UART_Transmit>
				if(timeWay2 <= 0)timeWay2 = timeYellow / timeCycle;
 8000428:	4b7a      	ldr	r3, [pc, #488]	; (8000614 <fsm_auto+0x2bc>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2b00      	cmp	r3, #0
 800042e:	dc07      	bgt.n	8000440 <fsm_auto+0xe8>
 8000430:	4b7e      	ldr	r3, [pc, #504]	; (800062c <fsm_auto+0x2d4>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	4b74      	ldr	r3, [pc, #464]	; (8000608 <fsm_auto+0x2b0>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	fb92 f3f3 	sdiv	r3, r2, r3
 800043c:	4a75      	ldr	r2, [pc, #468]	; (8000614 <fsm_auto+0x2bc>)
 800043e:	6013      	str	r3, [r2, #0]
			}
			if(timer_flag[0]){
 8000440:	4b75      	ldr	r3, [pc, #468]	; (8000618 <fsm_auto+0x2c0>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d008      	beq.n	800045a <fsm_auto+0x102>
				state = RED1_YELLOW2;
 8000448:	4b6d      	ldr	r3, [pc, #436]	; (8000600 <fsm_auto+0x2a8>)
 800044a:	2202      	movs	r2, #2
 800044c:	701a      	strb	r2, [r3, #0]
				setTimer(0, timeYellow);
 800044e:	4b77      	ldr	r3, [pc, #476]	; (800062c <fsm_auto+0x2d4>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4619      	mov	r1, r3
 8000454:	2000      	movs	r0, #0
 8000456:	f001 f8bd 	bl	80015d4 <setTimer>
			}
			if(isButtonPressed(3)){
 800045a:	2003      	movs	r0, #3
 800045c:	f7ff fe76 	bl	800014c <isButtonPressed>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d002      	beq.n	800046c <fsm_auto+0x114>
				ped_flag = 1;
 8000466:	4b72      	ldr	r3, [pc, #456]	; (8000630 <fsm_auto+0x2d8>)
 8000468:	2201      	movs	r2, #1
 800046a:	601a      	str	r2, [r3, #0]
			}
			auto_man();
 800046c:	f7ff ff22 	bl	80002b4 <auto_man>
			break;
 8000470:	e177      	b.n	8000762 <fsm_auto+0x40a>
		case RED1_YELLOW2:
			onRed1();
 8000472:	f000 fc69 	bl	8000d48 <onRed1>
			onYellow2();
 8000476:	f000 fcb3 	bl	8000de0 <onYellow2>
			if(timer_flag[1]){
 800047a:	4b67      	ldr	r3, [pc, #412]	; (8000618 <fsm_auto+0x2c0>)
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d04b      	beq.n	800051a <fsm_auto+0x1c2>
				setTimer(1, 100);
 8000482:	2164      	movs	r1, #100	; 0x64
 8000484:	2001      	movs	r0, #1
 8000486:	f001 f8a5 	bl	80015d4 <setTimer>
				clearScreen();
 800048a:	f000 fc27 	bl	8000cdc <clearScreen>
				timeWay1--;
 800048e:	4b5f      	ldr	r3, [pc, #380]	; (800060c <fsm_auto+0x2b4>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	3b01      	subs	r3, #1
 8000494:	4a5d      	ldr	r2, [pc, #372]	; (800060c <fsm_auto+0x2b4>)
 8000496:	6013      	str	r3, [r2, #0]
				if(timeWay1 <= 0) timeWay1 = timeGreen / timeCycle;
 8000498:	4b5c      	ldr	r3, [pc, #368]	; (800060c <fsm_auto+0x2b4>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	dc07      	bgt.n	80004b0 <fsm_auto+0x158>
 80004a0:	4b5b      	ldr	r3, [pc, #364]	; (8000610 <fsm_auto+0x2b8>)
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	4b58      	ldr	r3, [pc, #352]	; (8000608 <fsm_auto+0x2b0>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80004ac:	4a57      	ldr	r2, [pc, #348]	; (800060c <fsm_auto+0x2b4>)
 80004ae:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Road 1: Red\r\nTime:%d\r\n",timeWay1), 200);
 80004b0:	4b56      	ldr	r3, [pc, #344]	; (800060c <fsm_auto+0x2b4>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	461a      	mov	r2, r3
 80004b6:	4959      	ldr	r1, [pc, #356]	; (800061c <fsm_auto+0x2c4>)
 80004b8:	4859      	ldr	r0, [pc, #356]	; (8000620 <fsm_auto+0x2c8>)
 80004ba:	f003 fbb9 	bl	8003c30 <siprintf>
 80004be:	4603      	mov	r3, r0
 80004c0:	b29a      	uxth	r2, r3
 80004c2:	23c8      	movs	r3, #200	; 0xc8
 80004c4:	4956      	ldr	r1, [pc, #344]	; (8000620 <fsm_auto+0x2c8>)
 80004c6:	4857      	ldr	r0, [pc, #348]	; (8000624 <fsm_auto+0x2cc>)
 80004c8:	f003 f93a 	bl	8003740 <HAL_UART_Transmit>
				timeWay2--;
 80004cc:	4b51      	ldr	r3, [pc, #324]	; (8000614 <fsm_auto+0x2bc>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	3b01      	subs	r3, #1
 80004d2:	4a50      	ldr	r2, [pc, #320]	; (8000614 <fsm_auto+0x2bc>)
 80004d4:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Road 2: Yellow\r\nTime:%d\r\n",timeWay2), 200);
 80004d6:	4b4f      	ldr	r3, [pc, #316]	; (8000614 <fsm_auto+0x2bc>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	461a      	mov	r2, r3
 80004dc:	4955      	ldr	r1, [pc, #340]	; (8000634 <fsm_auto+0x2dc>)
 80004de:	4850      	ldr	r0, [pc, #320]	; (8000620 <fsm_auto+0x2c8>)
 80004e0:	f003 fba6 	bl	8003c30 <siprintf>
 80004e4:	4603      	mov	r3, r0
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	23c8      	movs	r3, #200	; 0xc8
 80004ea:	494d      	ldr	r1, [pc, #308]	; (8000620 <fsm_auto+0x2c8>)
 80004ec:	484d      	ldr	r0, [pc, #308]	; (8000624 <fsm_auto+0x2cc>)
 80004ee:	f003 f927 	bl	8003740 <HAL_UART_Transmit>
				if(timeWay2 <= 0){
 80004f2:	4b48      	ldr	r3, [pc, #288]	; (8000614 <fsm_auto+0x2bc>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	dc0f      	bgt.n	800051a <fsm_auto+0x1c2>
					timeWay1 = timeGreen / timeCycle;
 80004fa:	4b45      	ldr	r3, [pc, #276]	; (8000610 <fsm_auto+0x2b8>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	4b42      	ldr	r3, [pc, #264]	; (8000608 <fsm_auto+0x2b0>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	fb92 f3f3 	sdiv	r3, r2, r3
 8000506:	4a41      	ldr	r2, [pc, #260]	; (800060c <fsm_auto+0x2b4>)
 8000508:	6013      	str	r3, [r2, #0]
					timeWay2 = timeRed / timeCycle;
 800050a:	4b3e      	ldr	r3, [pc, #248]	; (8000604 <fsm_auto+0x2ac>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4b3e      	ldr	r3, [pc, #248]	; (8000608 <fsm_auto+0x2b0>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	fb92 f3f3 	sdiv	r3, r2, r3
 8000516:	4a3f      	ldr	r2, [pc, #252]	; (8000614 <fsm_auto+0x2bc>)
 8000518:	6013      	str	r3, [r2, #0]
				}
			}
			if(timer_flag[0]){
 800051a:	4b3f      	ldr	r3, [pc, #252]	; (8000618 <fsm_auto+0x2c0>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d008      	beq.n	8000534 <fsm_auto+0x1dc>
				state = GREEN1_RED2;
 8000522:	4b37      	ldr	r3, [pc, #220]	; (8000600 <fsm_auto+0x2a8>)
 8000524:	2203      	movs	r2, #3
 8000526:	701a      	strb	r2, [r3, #0]
				setTimer(0, timeGreen);
 8000528:	4b39      	ldr	r3, [pc, #228]	; (8000610 <fsm_auto+0x2b8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	2000      	movs	r0, #0
 8000530:	f001 f850 	bl	80015d4 <setTimer>
			}
			if(isButtonPressed(3)){
 8000534:	2003      	movs	r0, #3
 8000536:	f7ff fe09 	bl	800014c <isButtonPressed>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d002      	beq.n	8000546 <fsm_auto+0x1ee>
				ped_flag = 1;
 8000540:	4b3b      	ldr	r3, [pc, #236]	; (8000630 <fsm_auto+0x2d8>)
 8000542:	2201      	movs	r2, #1
 8000544:	601a      	str	r2, [r3, #0]
			}
			auto_man();
 8000546:	f7ff feb5 	bl	80002b4 <auto_man>
			break;
 800054a:	e10a      	b.n	8000762 <fsm_auto+0x40a>
		case GREEN1_RED2:
			onGreen1();
 800054c:	f000 fc24 	bl	8000d98 <onGreen1>
			onRed2();
 8000550:	f000 fc36 	bl	8000dc0 <onRed2>
			if(timer_flag[1]){
 8000554:	4b30      	ldr	r3, [pc, #192]	; (8000618 <fsm_auto+0x2c0>)
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d037      	beq.n	80005cc <fsm_auto+0x274>
				setTimer(1, 100);
 800055c:	2164      	movs	r1, #100	; 0x64
 800055e:	2001      	movs	r0, #1
 8000560:	f001 f838 	bl	80015d4 <setTimer>
				clearScreen();
 8000564:	f000 fbba 	bl	8000cdc <clearScreen>
				timeWay1--;
 8000568:	4b28      	ldr	r3, [pc, #160]	; (800060c <fsm_auto+0x2b4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	3b01      	subs	r3, #1
 800056e:	4a27      	ldr	r2, [pc, #156]	; (800060c <fsm_auto+0x2b4>)
 8000570:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Road 1: Green\r\nTime:%d\r\n",timeWay1), 200);
 8000572:	4b26      	ldr	r3, [pc, #152]	; (800060c <fsm_auto+0x2b4>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	461a      	mov	r2, r3
 8000578:	492f      	ldr	r1, [pc, #188]	; (8000638 <fsm_auto+0x2e0>)
 800057a:	4829      	ldr	r0, [pc, #164]	; (8000620 <fsm_auto+0x2c8>)
 800057c:	f003 fb58 	bl	8003c30 <siprintf>
 8000580:	4603      	mov	r3, r0
 8000582:	b29a      	uxth	r2, r3
 8000584:	23c8      	movs	r3, #200	; 0xc8
 8000586:	4926      	ldr	r1, [pc, #152]	; (8000620 <fsm_auto+0x2c8>)
 8000588:	4826      	ldr	r0, [pc, #152]	; (8000624 <fsm_auto+0x2cc>)
 800058a:	f003 f8d9 	bl	8003740 <HAL_UART_Transmit>
				timeWay2--;
 800058e:	4b21      	ldr	r3, [pc, #132]	; (8000614 <fsm_auto+0x2bc>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	3b01      	subs	r3, #1
 8000594:	4a1f      	ldr	r2, [pc, #124]	; (8000614 <fsm_auto+0x2bc>)
 8000596:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Road 2: Red\r\nTime:%d\r\n",timeWay2), 200);
 8000598:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <fsm_auto+0x2bc>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4927      	ldr	r1, [pc, #156]	; (800063c <fsm_auto+0x2e4>)
 80005a0:	481f      	ldr	r0, [pc, #124]	; (8000620 <fsm_auto+0x2c8>)
 80005a2:	f003 fb45 	bl	8003c30 <siprintf>
 80005a6:	4603      	mov	r3, r0
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	23c8      	movs	r3, #200	; 0xc8
 80005ac:	491c      	ldr	r1, [pc, #112]	; (8000620 <fsm_auto+0x2c8>)
 80005ae:	481d      	ldr	r0, [pc, #116]	; (8000624 <fsm_auto+0x2cc>)
 80005b0:	f003 f8c6 	bl	8003740 <HAL_UART_Transmit>
				if(timeWay1 <= 0) timeWay1 = timeYellow / timeCycle;
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <fsm_auto+0x2b4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	dc07      	bgt.n	80005cc <fsm_auto+0x274>
 80005bc:	4b1b      	ldr	r3, [pc, #108]	; (800062c <fsm_auto+0x2d4>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <fsm_auto+0x2b0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80005c8:	4a10      	ldr	r2, [pc, #64]	; (800060c <fsm_auto+0x2b4>)
 80005ca:	6013      	str	r3, [r2, #0]
			}
			if(timer_flag[0]){
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <fsm_auto+0x2c0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d008      	beq.n	80005e6 <fsm_auto+0x28e>
				state = YELLOW1_RED2;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <fsm_auto+0x2a8>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	701a      	strb	r2, [r3, #0]
				setTimer(0, timeYellow);
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <fsm_auto+0x2d4>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4619      	mov	r1, r3
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 fff7 	bl	80015d4 <setTimer>
			}
			if(isButtonPressed(3)){
 80005e6:	2003      	movs	r0, #3
 80005e8:	f7ff fdb0 	bl	800014c <isButtonPressed>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <fsm_auto+0x2a0>
				ped_flag = 1;
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <fsm_auto+0x2d8>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	601a      	str	r2, [r3, #0]
			}
			auto_man();
 80005f8:	f7ff fe5c 	bl	80002b4 <auto_man>
			break;
 80005fc:	e0b1      	b.n	8000762 <fsm_auto+0x40a>
 80005fe:	bf00      	nop
 8000600:	20000128 	.word	0x20000128
 8000604:	20000068 	.word	0x20000068
 8000608:	08004608 	.word	0x08004608
 800060c:	2000012c 	.word	0x2000012c
 8000610:	2000006c 	.word	0x2000006c
 8000614:	20000130 	.word	0x20000130
 8000618:	20000140 	.word	0x20000140
 800061c:	08004390 	.word	0x08004390
 8000620:	20000278 	.word	0x20000278
 8000624:	2000022c 	.word	0x2000022c
 8000628:	080043a8 	.word	0x080043a8
 800062c:	20000070 	.word	0x20000070
 8000630:	20000138 	.word	0x20000138
 8000634:	080043c4 	.word	0x080043c4
 8000638:	080043e0 	.word	0x080043e0
 800063c:	080043fc 	.word	0x080043fc
		case YELLOW1_RED2:
			onYellow1();
 8000640:	f000 fb96 	bl	8000d70 <onYellow1>
			onRed2();
 8000644:	f000 fbbc 	bl	8000dc0 <onRed2>
			if(timer_flag[1]){
 8000648:	4b47      	ldr	r3, [pc, #284]	; (8000768 <fsm_auto+0x410>)
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d04b      	beq.n	80006e8 <fsm_auto+0x390>
				setTimer(1, 100);
 8000650:	2164      	movs	r1, #100	; 0x64
 8000652:	2001      	movs	r0, #1
 8000654:	f000 ffbe 	bl	80015d4 <setTimer>
				clearScreen();
 8000658:	f000 fb40 	bl	8000cdc <clearScreen>
				timeWay1--;
 800065c:	4b43      	ldr	r3, [pc, #268]	; (800076c <fsm_auto+0x414>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3b01      	subs	r3, #1
 8000662:	4a42      	ldr	r2, [pc, #264]	; (800076c <fsm_auto+0x414>)
 8000664:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Road 1: Yellow\r\nTime:%d\r\n",timeWay1), 200);
 8000666:	4b41      	ldr	r3, [pc, #260]	; (800076c <fsm_auto+0x414>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	461a      	mov	r2, r3
 800066c:	4940      	ldr	r1, [pc, #256]	; (8000770 <fsm_auto+0x418>)
 800066e:	4841      	ldr	r0, [pc, #260]	; (8000774 <fsm_auto+0x41c>)
 8000670:	f003 fade 	bl	8003c30 <siprintf>
 8000674:	4603      	mov	r3, r0
 8000676:	b29a      	uxth	r2, r3
 8000678:	23c8      	movs	r3, #200	; 0xc8
 800067a:	493e      	ldr	r1, [pc, #248]	; (8000774 <fsm_auto+0x41c>)
 800067c:	483e      	ldr	r0, [pc, #248]	; (8000778 <fsm_auto+0x420>)
 800067e:	f003 f85f 	bl	8003740 <HAL_UART_Transmit>
				if(timeWay1 <= 0) timeWay1 = timeRed / timeCycle;
 8000682:	4b3a      	ldr	r3, [pc, #232]	; (800076c <fsm_auto+0x414>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	dc07      	bgt.n	800069a <fsm_auto+0x342>
 800068a:	4b3c      	ldr	r3, [pc, #240]	; (800077c <fsm_auto+0x424>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	4b3c      	ldr	r3, [pc, #240]	; (8000780 <fsm_auto+0x428>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	fb92 f3f3 	sdiv	r3, r2, r3
 8000696:	4a35      	ldr	r2, [pc, #212]	; (800076c <fsm_auto+0x414>)
 8000698:	6013      	str	r3, [r2, #0]
				timeWay2--;
 800069a:	4b3a      	ldr	r3, [pc, #232]	; (8000784 <fsm_auto+0x42c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	3b01      	subs	r3, #1
 80006a0:	4a38      	ldr	r2, [pc, #224]	; (8000784 <fsm_auto+0x42c>)
 80006a2:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Road 2: Red\r\nTime:%d\r\n",timeWay2), 200);
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <fsm_auto+0x42c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4937      	ldr	r1, [pc, #220]	; (8000788 <fsm_auto+0x430>)
 80006ac:	4831      	ldr	r0, [pc, #196]	; (8000774 <fsm_auto+0x41c>)
 80006ae:	f003 fabf 	bl	8003c30 <siprintf>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	23c8      	movs	r3, #200	; 0xc8
 80006b8:	492e      	ldr	r1, [pc, #184]	; (8000774 <fsm_auto+0x41c>)
 80006ba:	482f      	ldr	r0, [pc, #188]	; (8000778 <fsm_auto+0x420>)
 80006bc:	f003 f840 	bl	8003740 <HAL_UART_Transmit>
				if(timeWay2 <= 0){
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <fsm_auto+0x42c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	dc0f      	bgt.n	80006e8 <fsm_auto+0x390>
					timeWay1 = timeRed / timeCycle;
 80006c8:	4b2c      	ldr	r3, [pc, #176]	; (800077c <fsm_auto+0x424>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <fsm_auto+0x428>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80006d4:	4a25      	ldr	r2, [pc, #148]	; (800076c <fsm_auto+0x414>)
 80006d6:	6013      	str	r3, [r2, #0]
					timeWay2 = timeGreen / timeCycle;
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <fsm_auto+0x434>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b28      	ldr	r3, [pc, #160]	; (8000780 <fsm_auto+0x428>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80006e4:	4a27      	ldr	r2, [pc, #156]	; (8000784 <fsm_auto+0x42c>)
 80006e6:	6013      	str	r3, [r2, #0]
				}
			}
			if(timer_flag[0]){
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <fsm_auto+0x410>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d00b      	beq.n	8000708 <fsm_auto+0x3b0>
				i = 30;
 80006f0:	4b27      	ldr	r3, [pc, #156]	; (8000790 <fsm_auto+0x438>)
 80006f2:	221e      	movs	r2, #30
 80006f4:	601a      	str	r2, [r3, #0]
				state = RED1_GREEN2;
 80006f6:	4b27      	ldr	r3, [pc, #156]	; (8000794 <fsm_auto+0x43c>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
				setTimer(0, timeGreen);
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <fsm_auto+0x434>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	2000      	movs	r0, #0
 8000704:	f000 ff66 	bl	80015d4 <setTimer>
			}
			if(isButtonPressed(3)){
 8000708:	2003      	movs	r0, #3
 800070a:	f7ff fd1f 	bl	800014c <isButtonPressed>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d002      	beq.n	800071a <fsm_auto+0x3c2>
				ped_flag = 1;
 8000714:	4b20      	ldr	r3, [pc, #128]	; (8000798 <fsm_auto+0x440>)
 8000716:	2201      	movs	r2, #1
 8000718:	601a      	str	r2, [r3, #0]
			}
			if(ped_flag){
 800071a:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <fsm_auto+0x440>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d01b      	beq.n	800075a <fsm_auto+0x402>
				if(timeWay2 <= 3){
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <fsm_auto+0x42c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b03      	cmp	r3, #3
 8000728:	dc17      	bgt.n	800075a <fsm_auto+0x402>
					if(timer_flag[3] == 1){
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <fsm_auto+0x410>)
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d113      	bne.n	800075a <fsm_auto+0x402>
						buzzer();
 8000732:	f000 f8db 	bl	80008ec <buzzer>
						setTimer(3, i);
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <fsm_auto+0x438>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4619      	mov	r1, r3
 800073c:	2003      	movs	r0, #3
 800073e:	f000 ff49 	bl	80015d4 <setTimer>
						i = i-5;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <fsm_auto+0x438>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	3b05      	subs	r3, #5
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <fsm_auto+0x438>)
 800074a:	6013      	str	r3, [r2, #0]
//						if(i <= 0){
////							buzzer_off();
//							i = 30;
//						}
						if(i <= 0){
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <fsm_auto+0x438>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	dc02      	bgt.n	800075a <fsm_auto+0x402>
							i = 1;
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <fsm_auto+0x438>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
						}
					}
				}
			}
			auto_man();
 800075a:	f7ff fdab 	bl	80002b4 <auto_man>
			break;
 800075e:	e000      	b.n	8000762 <fsm_auto+0x40a>
		default:
			break;
 8000760:	bf00      	nop
	}
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000140 	.word	0x20000140
 800076c:	2000012c 	.word	0x2000012c
 8000770:	08004414 	.word	0x08004414
 8000774:	20000278 	.word	0x20000278
 8000778:	2000022c 	.word	0x2000022c
 800077c:	20000068 	.word	0x20000068
 8000780:	08004608 	.word	0x08004608
 8000784:	20000130 	.word	0x20000130
 8000788:	080043fc 	.word	0x080043fc
 800078c:	2000006c 	.word	0x2000006c
 8000790:	20000088 	.word	0x20000088
 8000794:	20000128 	.word	0x20000128
 8000798:	20000138 	.word	0x20000138

0800079c <fsm_manual>:
void fsm_manual(){
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	switch(state){
 80007a0:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <fsm_manual+0x84>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b05      	cmp	r3, #5
 80007a6:	d002      	beq.n	80007ae <fsm_manual+0x12>
 80007a8:	2b06      	cmp	r3, #6
 80007aa:	d01b      	beq.n	80007e4 <fsm_manual+0x48>
			}
			man_tuning();

			break;
		default:
			break;
 80007ac:	e035      	b.n	800081a <fsm_manual+0x7e>
			if(isButtonPressed(1)){
 80007ae:	2001      	movs	r0, #1
 80007b0:	f7ff fccc 	bl	800014c <isButtonPressed>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d011      	beq.n	80007de <fsm_manual+0x42>
				state = MAN_GR;
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <fsm_manual+0x84>)
 80007bc:	2206      	movs	r2, #6
 80007be:	701a      	strb	r2, [r3, #0]
				onRed2();
 80007c0:	f000 fafe 	bl	8000dc0 <onRed2>
				onGreen1();
 80007c4:	f000 fae8 	bl	8000d98 <onGreen1>
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Manual: Road 1: Green\r\nRoad 2: Red\r\n"), 200);
 80007c8:	4916      	ldr	r1, [pc, #88]	; (8000824 <fsm_manual+0x88>)
 80007ca:	4817      	ldr	r0, [pc, #92]	; (8000828 <fsm_manual+0x8c>)
 80007cc:	f003 fa30 	bl	8003c30 <siprintf>
 80007d0:	4603      	mov	r3, r0
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	23c8      	movs	r3, #200	; 0xc8
 80007d6:	4914      	ldr	r1, [pc, #80]	; (8000828 <fsm_manual+0x8c>)
 80007d8:	4814      	ldr	r0, [pc, #80]	; (800082c <fsm_manual+0x90>)
 80007da:	f002 ffb1 	bl	8003740 <HAL_UART_Transmit>
			man_tuning();
 80007de:	f7ff fd8f 	bl	8000300 <man_tuning>
			break;
 80007e2:	e01a      	b.n	800081a <fsm_manual+0x7e>
			if(isButtonPressed(1)){
 80007e4:	2001      	movs	r0, #1
 80007e6:	f7ff fcb1 	bl	800014c <isButtonPressed>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d011      	beq.n	8000814 <fsm_manual+0x78>
				state = MAN_RG;
 80007f0:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <fsm_manual+0x84>)
 80007f2:	2205      	movs	r2, #5
 80007f4:	701a      	strb	r2, [r3, #0]
				onRed1();
 80007f6:	f000 faa7 	bl	8000d48 <onRed1>
				onGreen2();
 80007fa:	f000 fb01 	bl	8000e00 <onGreen2>
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Manual: Road 1: Red\r\nRoad 2: Green\r\n"), 200);
 80007fe:	490c      	ldr	r1, [pc, #48]	; (8000830 <fsm_manual+0x94>)
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <fsm_manual+0x8c>)
 8000802:	f003 fa15 	bl	8003c30 <siprintf>
 8000806:	4603      	mov	r3, r0
 8000808:	b29a      	uxth	r2, r3
 800080a:	23c8      	movs	r3, #200	; 0xc8
 800080c:	4906      	ldr	r1, [pc, #24]	; (8000828 <fsm_manual+0x8c>)
 800080e:	4807      	ldr	r0, [pc, #28]	; (800082c <fsm_manual+0x90>)
 8000810:	f002 ff96 	bl	8003740 <HAL_UART_Transmit>
			man_tuning();
 8000814:	f7ff fd74 	bl	8000300 <man_tuning>
			break;
 8000818:	bf00      	nop
	}
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000128 	.word	0x20000128
 8000824:	08004430 	.word	0x08004430
 8000828:	20000278 	.word	0x20000278
 800082c:	2000022c 	.word	0x2000022c
 8000830:	08004350 	.word	0x08004350

08000834 <syncLED>:
 *  Created on: Nov 28, 2023
 *      Author: Lenovo
 */
#include "fsm_pedestrian.h"

void syncLED(){
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	if(state == RED1_GREEN2 || state == RED1_YELLOW2 ){
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <syncLED+0x3c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d003      	beq.n	8000848 <syncLED+0x14>
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <syncLED+0x3c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b02      	cmp	r3, #2
 8000846:	d106      	bne.n	8000856 <syncLED+0x22>
		pedRed();
 8000848:	f000 faea 	bl	8000e20 <pedRed>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <syncLED+0x40>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2200      	movs	r2, #0
 8000852:	635a      	str	r2, [r3, #52]	; 0x34
//			}
//
//		}

	}
}
 8000854:	e009      	b.n	800086a <syncLED+0x36>
	else if(state == GREEN1_RED2 || state == YELLOW1_RED2 ){
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <syncLED+0x3c>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b03      	cmp	r3, #3
 800085c:	d003      	beq.n	8000866 <syncLED+0x32>
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <syncLED+0x3c>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b04      	cmp	r3, #4
 8000864:	d101      	bne.n	800086a <syncLED+0x36>
		pedGreen();
 8000866:	f000 faef 	bl	8000e48 <pedGreen>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000128 	.word	0x20000128
 8000874:	2000019c 	.word	0x2000019c

08000878 <fsm_pedestrian>:
void fsm_pedestrian(){
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	switch(ped_state){
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <fsm_pedestrian+0x68>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b0c      	cmp	r3, #12
 8000882:	d006      	beq.n	8000892 <fsm_pedestrian+0x1a>
 8000884:	2b0c      	cmp	r3, #12
 8000886:	dc24      	bgt.n	80008d2 <fsm_pedestrian+0x5a>
 8000888:	2b0a      	cmp	r3, #10
 800088a:	d00c      	beq.n	80008a6 <fsm_pedestrian+0x2e>
 800088c:	2b0b      	cmp	r3, #11
 800088e:	d013      	beq.n	80008b8 <fsm_pedestrian+0x40>
				ped_state = PED_OFF;
				ped_flag = 0;
			}
			break;
		default:
			break;
 8000890:	e01f      	b.n	80008d2 <fsm_pedestrian+0x5a>
			pedReset();
 8000892:	f000 faed 	bl	8000e70 <pedReset>
			if(ped_flag){
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <fsm_pedestrian+0x6c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d01b      	beq.n	80008d6 <fsm_pedestrian+0x5e>
				ped_state = PED_INIT;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <fsm_pedestrian+0x68>)
 80008a0:	220a      	movs	r2, #10
 80008a2:	601a      	str	r2, [r3, #0]
			break;
 80008a4:	e017      	b.n	80008d6 <fsm_pedestrian+0x5e>
			setTimer(2, 1000);
 80008a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008aa:	2002      	movs	r0, #2
 80008ac:	f000 fe92 	bl	80015d4 <setTimer>
			ped_state = PED_ACTIVE;
 80008b0:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <fsm_pedestrian+0x68>)
 80008b2:	220b      	movs	r2, #11
 80008b4:	601a      	str	r2, [r3, #0]
			break;
 80008b6:	e011      	b.n	80008dc <fsm_pedestrian+0x64>
			syncLED();
 80008b8:	f7ff ffbc 	bl	8000834 <syncLED>
			if(timer_flag[2]){
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <fsm_pedestrian+0x70>)
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d00a      	beq.n	80008da <fsm_pedestrian+0x62>
				ped_state = PED_OFF;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <fsm_pedestrian+0x68>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	601a      	str	r2, [r3, #0]
				ped_flag = 0;
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <fsm_pedestrian+0x6c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
			break;
 80008d0:	e003      	b.n	80008da <fsm_pedestrian+0x62>
			break;
 80008d2:	bf00      	nop
 80008d4:	e002      	b.n	80008dc <fsm_pedestrian+0x64>
			break;
 80008d6:	bf00      	nop
 80008d8:	e000      	b.n	80008dc <fsm_pedestrian+0x64>
			break;
 80008da:	bf00      	nop
	}
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000080 	.word	0x20000080
 80008e4:	20000138 	.word	0x20000138
 80008e8:	20000140 	.word	0x20000140

080008ec <buzzer>:
void buzzer(){
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
	if(buzzer_flag == 1){
 80008f0:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <buzzer+0x3c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d104      	bne.n	8000902 <buzzer+0x16>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 100);
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <buzzer+0x40>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2264      	movs	r2, #100	; 0x64
 80008fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000900:	e007      	b.n	8000912 <buzzer+0x26>
	}
	else if(buzzer_flag == 0){
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <buzzer+0x3c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d103      	bne.n	8000912 <buzzer+0x26>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <buzzer+0x40>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2200      	movs	r2, #0
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
	}
	buzzer_flag = 1 - buzzer_flag;
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <buzzer+0x3c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f1c3 0301 	rsb	r3, r3, #1
 800091a:	4a03      	ldr	r2, [pc, #12]	; (8000928 <buzzer+0x3c>)
 800091c:	6013      	str	r3, [r2, #0]
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000084 	.word	0x20000084
 800092c:	2000019c 	.word	0x2000019c

08000930 <tuning_auto>:
#include "stdio.h"
#include "stdlib.h"

char str[40];

void tuning_auto(){
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	if(isButtonPressed(0) == 1){
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff fc09 	bl	800014c <isButtonPressed>
 800093a:	4603      	mov	r3, r0
 800093c:	2b01      	cmp	r3, #1
 800093e:	d10f      	bne.n	8000960 <tuning_auto+0x30>
		resetLED();
 8000940:	f000 f9e4 	bl	8000d0c <resetLED>
//		reset7SEG();
		timeYellow = timeRed - timeGreen;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <tuning_auto+0x34>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <tuning_auto+0x38>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	4a07      	ldr	r2, [pc, #28]	; (800096c <tuning_auto+0x3c>)
 8000950:	6013      	str	r3, [r2, #0]
		state = RED1_GREEN2;
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <tuning_auto+0x40>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
		onRed1();
 8000958:	f000 f9f6 	bl	8000d48 <onRed1>
		onGreen2();
 800095c:	f000 fa50 	bl	8000e00 <onGreen2>
	}
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000068 	.word	0x20000068
 8000968:	2000006c 	.word	0x2000006c
 800096c:	20000070 	.word	0x20000070
 8000970:	20000128 	.word	0x20000128

08000974 <fsm_tuning>:

void fsm_tuning(){
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	switch(state){
 8000978:	4b87      	ldr	r3, [pc, #540]	; (8000b98 <fsm_tuning+0x224>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b09      	cmp	r3, #9
 800097e:	f000 80f6 	beq.w	8000b6e <fsm_tuning+0x1fa>
 8000982:	2b09      	cmp	r3, #9
 8000984:	f300 818f 	bgt.w	8000ca6 <fsm_tuning+0x332>
 8000988:	2b07      	cmp	r3, #7
 800098a:	d002      	beq.n	8000992 <fsm_tuning+0x1e>
 800098c:	2b08      	cmp	r3, #8
 800098e:	d077      	beq.n	8000a80 <fsm_tuning+0x10c>
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Green\r\nTime set to: %d\r\n",time_green), 200);
			}
			tuning_auto();
			break;
	}
}
 8000990:	e189      	b.n	8000ca6 <fsm_tuning+0x332>
			if(timer_flag[4] == 1){
 8000992:	4b82      	ldr	r3, [pc, #520]	; (8000b9c <fsm_tuning+0x228>)
 8000994:	691b      	ldr	r3, [r3, #16]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d114      	bne.n	80009c4 <fsm_tuning+0x50>
				setTimer(4,25);
 800099a:	2119      	movs	r1, #25
 800099c:	2004      	movs	r0, #4
 800099e:	f000 fe19 	bl	80015d4 <setTimer>
				if(blink == 0){
 80009a2:	4b7f      	ldr	r3, [pc, #508]	; (8000ba0 <fsm_tuning+0x22c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d107      	bne.n	80009ba <fsm_tuning+0x46>
					onRed1(); // MOD_RED
 80009aa:	f000 f9cd 	bl	8000d48 <onRed1>
					onRed2();
 80009ae:	f000 fa07 	bl	8000dc0 <onRed2>
					blink = 1;
 80009b2:	4b7b      	ldr	r3, [pc, #492]	; (8000ba0 <fsm_tuning+0x22c>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	e004      	b.n	80009c4 <fsm_tuning+0x50>
					resetLED();
 80009ba:	f000 f9a7 	bl	8000d0c <resetLED>
					blink = 0;
 80009be:	4b78      	ldr	r3, [pc, #480]	; (8000ba0 <fsm_tuning+0x22c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(1)){
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff fbc1 	bl	800014c <isButtonPressed>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d014      	beq.n	80009fa <fsm_tuning+0x86>
				state = MOD_YELLOW;
 80009d0:	4b71      	ldr	r3, [pc, #452]	; (8000b98 <fsm_tuning+0x224>)
 80009d2:	2208      	movs	r2, #8
 80009d4:	701a      	strb	r2, [r3, #0]
				setTimer(4,25);
 80009d6:	2119      	movs	r1, #25
 80009d8:	2004      	movs	r0, #4
 80009da:	f000 fdfb 	bl	80015d4 <setTimer>
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Yellow\r\nTime: %d\r\n",timeYellow), 200);
 80009de:	4b71      	ldr	r3, [pc, #452]	; (8000ba4 <fsm_tuning+0x230>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	461a      	mov	r2, r3
 80009e4:	4970      	ldr	r1, [pc, #448]	; (8000ba8 <fsm_tuning+0x234>)
 80009e6:	4871      	ldr	r0, [pc, #452]	; (8000bac <fsm_tuning+0x238>)
 80009e8:	f003 f922 	bl	8003c30 <siprintf>
 80009ec:	4603      	mov	r3, r0
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	23c8      	movs	r3, #200	; 0xc8
 80009f2:	496e      	ldr	r1, [pc, #440]	; (8000bac <fsm_tuning+0x238>)
 80009f4:	486e      	ldr	r0, [pc, #440]	; (8000bb0 <fsm_tuning+0x23c>)
 80009f6:	f002 fea3 	bl	8003740 <HAL_UART_Transmit>
			if(isButtonPressed(2) == 1){
 80009fa:	2002      	movs	r0, #2
 80009fc:	f7ff fba6 	bl	800014c <isButtonPressed>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d11d      	bne.n	8000a42 <fsm_tuning+0xce>
				time_red++;
 8000a06:	4b6b      	ldr	r3, [pc, #428]	; (8000bb4 <fsm_tuning+0x240>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	4a69      	ldr	r2, [pc, #420]	; (8000bb4 <fsm_tuning+0x240>)
 8000a0e:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Red\r\nIncrease time to: %d\r\n",time_red), 200);
 8000a10:	4b68      	ldr	r3, [pc, #416]	; (8000bb4 <fsm_tuning+0x240>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4968      	ldr	r1, [pc, #416]	; (8000bb8 <fsm_tuning+0x244>)
 8000a18:	4864      	ldr	r0, [pc, #400]	; (8000bac <fsm_tuning+0x238>)
 8000a1a:	f003 f909 	bl	8003c30 <siprintf>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	23c8      	movs	r3, #200	; 0xc8
 8000a24:	4961      	ldr	r1, [pc, #388]	; (8000bac <fsm_tuning+0x238>)
 8000a26:	4862      	ldr	r0, [pc, #392]	; (8000bb0 <fsm_tuning+0x23c>)
 8000a28:	f002 fe8a 	bl	8003740 <HAL_UART_Transmit>
				if(time_red >= 10) time_red =  5;
 8000a2c:	4b61      	ldr	r3, [pc, #388]	; (8000bb4 <fsm_tuning+0x240>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b09      	cmp	r3, #9
 8000a32:	dd02      	ble.n	8000a3a <fsm_tuning+0xc6>
 8000a34:	4b5f      	ldr	r3, [pc, #380]	; (8000bb4 <fsm_tuning+0x240>)
 8000a36:	2205      	movs	r2, #5
 8000a38:	601a      	str	r2, [r3, #0]
				timeWay1 = time_red;
 8000a3a:	4b5e      	ldr	r3, [pc, #376]	; (8000bb4 <fsm_tuning+0x240>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a5f      	ldr	r2, [pc, #380]	; (8000bbc <fsm_tuning+0x248>)
 8000a40:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3)){
 8000a42:	2003      	movs	r0, #3
 8000a44:	f7ff fb82 	bl	800014c <isButtonPressed>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d015      	beq.n	8000a7a <fsm_tuning+0x106>
				timeRed = time_red*timeCycle;
 8000a4e:	4b59      	ldr	r3, [pc, #356]	; (8000bb4 <fsm_tuning+0x240>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a5b      	ldr	r2, [pc, #364]	; (8000bc0 <fsm_tuning+0x24c>)
 8000a54:	6812      	ldr	r2, [r2, #0]
 8000a56:	fb02 f303 	mul.w	r3, r2, r3
 8000a5a:	4a5a      	ldr	r2, [pc, #360]	; (8000bc4 <fsm_tuning+0x250>)
 8000a5c:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Red\r\nTime set to: %d\r\n",time_red), 200);
 8000a5e:	4b55      	ldr	r3, [pc, #340]	; (8000bb4 <fsm_tuning+0x240>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	4958      	ldr	r1, [pc, #352]	; (8000bc8 <fsm_tuning+0x254>)
 8000a66:	4851      	ldr	r0, [pc, #324]	; (8000bac <fsm_tuning+0x238>)
 8000a68:	f003 f8e2 	bl	8003c30 <siprintf>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	23c8      	movs	r3, #200	; 0xc8
 8000a72:	494e      	ldr	r1, [pc, #312]	; (8000bac <fsm_tuning+0x238>)
 8000a74:	484e      	ldr	r0, [pc, #312]	; (8000bb0 <fsm_tuning+0x23c>)
 8000a76:	f002 fe63 	bl	8003740 <HAL_UART_Transmit>
			tuning_auto();
 8000a7a:	f7ff ff59 	bl	8000930 <tuning_auto>
			break;
 8000a7e:	e112      	b.n	8000ca6 <fsm_tuning+0x332>
			if(timer_flag[4] == 1){
 8000a80:	4b46      	ldr	r3, [pc, #280]	; (8000b9c <fsm_tuning+0x228>)
 8000a82:	691b      	ldr	r3, [r3, #16]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d114      	bne.n	8000ab2 <fsm_tuning+0x13e>
				setTimer(4,25);
 8000a88:	2119      	movs	r1, #25
 8000a8a:	2004      	movs	r0, #4
 8000a8c:	f000 fda2 	bl	80015d4 <setTimer>
				if(blink == 0){
 8000a90:	4b43      	ldr	r3, [pc, #268]	; (8000ba0 <fsm_tuning+0x22c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d107      	bne.n	8000aa8 <fsm_tuning+0x134>
					onYellow1(); // MOD_YELLOW
 8000a98:	f000 f96a 	bl	8000d70 <onYellow1>
					onYellow2();
 8000a9c:	f000 f9a0 	bl	8000de0 <onYellow2>
					blink = 1;
 8000aa0:	4b3f      	ldr	r3, [pc, #252]	; (8000ba0 <fsm_tuning+0x22c>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	e004      	b.n	8000ab2 <fsm_tuning+0x13e>
					resetLED();
 8000aa8:	f000 f930 	bl	8000d0c <resetLED>
					blink = 0;
 8000aac:	4b3c      	ldr	r3, [pc, #240]	; (8000ba0 <fsm_tuning+0x22c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(1)){
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff fb4a 	bl	800014c <isButtonPressed>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d014      	beq.n	8000ae8 <fsm_tuning+0x174>
				state = MOD_GREEN;
 8000abe:	4b36      	ldr	r3, [pc, #216]	; (8000b98 <fsm_tuning+0x224>)
 8000ac0:	2209      	movs	r2, #9
 8000ac2:	701a      	strb	r2, [r3, #0]
				setTimer(4,25);
 8000ac4:	2119      	movs	r1, #25
 8000ac6:	2004      	movs	r0, #4
 8000ac8:	f000 fd84 	bl	80015d4 <setTimer>
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Green\r\nTime: %d\r\n",timeGreen), 200);
 8000acc:	4b3f      	ldr	r3, [pc, #252]	; (8000bcc <fsm_tuning+0x258>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	493f      	ldr	r1, [pc, #252]	; (8000bd0 <fsm_tuning+0x25c>)
 8000ad4:	4835      	ldr	r0, [pc, #212]	; (8000bac <fsm_tuning+0x238>)
 8000ad6:	f003 f8ab 	bl	8003c30 <siprintf>
 8000ada:	4603      	mov	r3, r0
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	23c8      	movs	r3, #200	; 0xc8
 8000ae0:	4932      	ldr	r1, [pc, #200]	; (8000bac <fsm_tuning+0x238>)
 8000ae2:	4833      	ldr	r0, [pc, #204]	; (8000bb0 <fsm_tuning+0x23c>)
 8000ae4:	f002 fe2c 	bl	8003740 <HAL_UART_Transmit>
			if(isButtonPressed(2) == 1){
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f7ff fb2f 	bl	800014c <isButtonPressed>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d11d      	bne.n	8000b30 <fsm_tuning+0x1bc>
				time_yellow++;
 8000af4:	4b37      	ldr	r3, [pc, #220]	; (8000bd4 <fsm_tuning+0x260>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	3301      	adds	r3, #1
 8000afa:	4a36      	ldr	r2, [pc, #216]	; (8000bd4 <fsm_tuning+0x260>)
 8000afc:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Yellow\r\nIncrease time to: %d\r\n",time_yellow), 200);
 8000afe:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <fsm_tuning+0x260>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	4934      	ldr	r1, [pc, #208]	; (8000bd8 <fsm_tuning+0x264>)
 8000b06:	4829      	ldr	r0, [pc, #164]	; (8000bac <fsm_tuning+0x238>)
 8000b08:	f003 f892 	bl	8003c30 <siprintf>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	23c8      	movs	r3, #200	; 0xc8
 8000b12:	4926      	ldr	r1, [pc, #152]	; (8000bac <fsm_tuning+0x238>)
 8000b14:	4826      	ldr	r0, [pc, #152]	; (8000bb0 <fsm_tuning+0x23c>)
 8000b16:	f002 fe13 	bl	8003740 <HAL_UART_Transmit>
				if(time_yellow >= 10) time_yellow =  2;
 8000b1a:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <fsm_tuning+0x260>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b09      	cmp	r3, #9
 8000b20:	dd02      	ble.n	8000b28 <fsm_tuning+0x1b4>
 8000b22:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <fsm_tuning+0x260>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	601a      	str	r2, [r3, #0]
				timeWay1 = time_yellow;
 8000b28:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <fsm_tuning+0x260>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a23      	ldr	r2, [pc, #140]	; (8000bbc <fsm_tuning+0x248>)
 8000b2e:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3)){
 8000b30:	2003      	movs	r0, #3
 8000b32:	f7ff fb0b 	bl	800014c <isButtonPressed>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d015      	beq.n	8000b68 <fsm_tuning+0x1f4>
				timeYellow = time_yellow*timeCycle;
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <fsm_tuning+0x260>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a1f      	ldr	r2, [pc, #124]	; (8000bc0 <fsm_tuning+0x24c>)
 8000b42:	6812      	ldr	r2, [r2, #0]
 8000b44:	fb02 f303 	mul.w	r3, r2, r3
 8000b48:	4a16      	ldr	r2, [pc, #88]	; (8000ba4 <fsm_tuning+0x230>)
 8000b4a:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Yellow\r\nTime set to: %d\r\n",time_yellow), 200);
 8000b4c:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <fsm_tuning+0x260>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4922      	ldr	r1, [pc, #136]	; (8000bdc <fsm_tuning+0x268>)
 8000b54:	4815      	ldr	r0, [pc, #84]	; (8000bac <fsm_tuning+0x238>)
 8000b56:	f003 f86b 	bl	8003c30 <siprintf>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	23c8      	movs	r3, #200	; 0xc8
 8000b60:	4912      	ldr	r1, [pc, #72]	; (8000bac <fsm_tuning+0x238>)
 8000b62:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <fsm_tuning+0x23c>)
 8000b64:	f002 fdec 	bl	8003740 <HAL_UART_Transmit>
			tuning_auto();
 8000b68:	f7ff fee2 	bl	8000930 <tuning_auto>
			break;
 8000b6c:	e09b      	b.n	8000ca6 <fsm_tuning+0x332>
			if(timer_flag[4] == 1){
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <fsm_tuning+0x228>)
 8000b70:	691b      	ldr	r3, [r3, #16]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d139      	bne.n	8000bea <fsm_tuning+0x276>
				setTimer(4,25);
 8000b76:	2119      	movs	r1, #25
 8000b78:	2004      	movs	r0, #4
 8000b7a:	f000 fd2b 	bl	80015d4 <setTimer>
				if(blink == 0){
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <fsm_tuning+0x22c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d12c      	bne.n	8000be0 <fsm_tuning+0x26c>
					onGreen1(); // MOD_GREEN
 8000b86:	f000 f907 	bl	8000d98 <onGreen1>
					onGreen2();
 8000b8a:	f000 f939 	bl	8000e00 <onGreen2>
					blink = 1;
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <fsm_tuning+0x22c>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	e029      	b.n	8000bea <fsm_tuning+0x276>
 8000b96:	bf00      	nop
 8000b98:	20000128 	.word	0x20000128
 8000b9c:	20000140 	.word	0x20000140
 8000ba0:	20000134 	.word	0x20000134
 8000ba4:	20000070 	.word	0x20000070
 8000ba8:	08004458 	.word	0x08004458
 8000bac:	20000278 	.word	0x20000278
 8000bb0:	2000022c 	.word	0x2000022c
 8000bb4:	20000074 	.word	0x20000074
 8000bb8:	08004474 	.word	0x08004474
 8000bbc:	2000012c 	.word	0x2000012c
 8000bc0:	08004608 	.word	0x08004608
 8000bc4:	20000068 	.word	0x20000068
 8000bc8:	08004498 	.word	0x08004498
 8000bcc:	2000006c 	.word	0x2000006c
 8000bd0:	080044b8 	.word	0x080044b8
 8000bd4:	2000007c 	.word	0x2000007c
 8000bd8:	080044d4 	.word	0x080044d4
 8000bdc:	080044fc 	.word	0x080044fc
					resetLED();
 8000be0:	f000 f894 	bl	8000d0c <resetLED>
					blink = 0;
 8000be4:	4b31      	ldr	r3, [pc, #196]	; (8000cac <fsm_tuning+0x338>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(1)){
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff faae 	bl	800014c <isButtonPressed>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d014      	beq.n	8000c20 <fsm_tuning+0x2ac>
				state = MOD_RED;
 8000bf6:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <fsm_tuning+0x33c>)
 8000bf8:	2207      	movs	r2, #7
 8000bfa:	701a      	strb	r2, [r3, #0]
				setTimer(4,25);
 8000bfc:	2119      	movs	r1, #25
 8000bfe:	2004      	movs	r0, #4
 8000c00:	f000 fce8 	bl	80015d4 <setTimer>
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Red\r\nTime: %d\r\n",timeRed), 200);
 8000c04:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <fsm_tuning+0x340>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	492b      	ldr	r1, [pc, #172]	; (8000cb8 <fsm_tuning+0x344>)
 8000c0c:	482b      	ldr	r0, [pc, #172]	; (8000cbc <fsm_tuning+0x348>)
 8000c0e:	f003 f80f 	bl	8003c30 <siprintf>
 8000c12:	4603      	mov	r3, r0
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	23c8      	movs	r3, #200	; 0xc8
 8000c18:	4928      	ldr	r1, [pc, #160]	; (8000cbc <fsm_tuning+0x348>)
 8000c1a:	4829      	ldr	r0, [pc, #164]	; (8000cc0 <fsm_tuning+0x34c>)
 8000c1c:	f002 fd90 	bl	8003740 <HAL_UART_Transmit>
			if(isButtonPressed(2) == 1){
 8000c20:	2002      	movs	r0, #2
 8000c22:	f7ff fa93 	bl	800014c <isButtonPressed>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d11d      	bne.n	8000c68 <fsm_tuning+0x2f4>
				time_green++;
 8000c2c:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <fsm_tuning+0x350>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	4a24      	ldr	r2, [pc, #144]	; (8000cc4 <fsm_tuning+0x350>)
 8000c34:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Green\r\nIncrease time to: %d\r\n",time_green), 200);
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <fsm_tuning+0x350>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4922      	ldr	r1, [pc, #136]	; (8000cc8 <fsm_tuning+0x354>)
 8000c3e:	481f      	ldr	r0, [pc, #124]	; (8000cbc <fsm_tuning+0x348>)
 8000c40:	f002 fff6 	bl	8003c30 <siprintf>
 8000c44:	4603      	mov	r3, r0
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	23c8      	movs	r3, #200	; 0xc8
 8000c4a:	491c      	ldr	r1, [pc, #112]	; (8000cbc <fsm_tuning+0x348>)
 8000c4c:	481c      	ldr	r0, [pc, #112]	; (8000cc0 <fsm_tuning+0x34c>)
 8000c4e:	f002 fd77 	bl	8003740 <HAL_UART_Transmit>
				if(time_green >= 10) time_green =  3;
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <fsm_tuning+0x350>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b09      	cmp	r3, #9
 8000c58:	dd02      	ble.n	8000c60 <fsm_tuning+0x2ec>
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <fsm_tuning+0x350>)
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	601a      	str	r2, [r3, #0]
				timeWay1 = time_green;
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <fsm_tuning+0x350>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <fsm_tuning+0x358>)
 8000c66:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3)){
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f7ff fa6f 	bl	800014c <isButtonPressed>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d015      	beq.n	8000ca0 <fsm_tuning+0x32c>
				timeGreen = time_green*timeCycle;
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <fsm_tuning+0x350>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a15      	ldr	r2, [pc, #84]	; (8000cd0 <fsm_tuning+0x35c>)
 8000c7a:	6812      	ldr	r2, [r2, #0]
 8000c7c:	fb02 f303 	mul.w	r3, r2, r3
 8000c80:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <fsm_tuning+0x360>)
 8000c82:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Green\r\nTime set to: %d\r\n",time_green), 200);
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <fsm_tuning+0x350>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4913      	ldr	r1, [pc, #76]	; (8000cd8 <fsm_tuning+0x364>)
 8000c8c:	480b      	ldr	r0, [pc, #44]	; (8000cbc <fsm_tuning+0x348>)
 8000c8e:	f002 ffcf 	bl	8003c30 <siprintf>
 8000c92:	4603      	mov	r3, r0
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	23c8      	movs	r3, #200	; 0xc8
 8000c98:	4908      	ldr	r1, [pc, #32]	; (8000cbc <fsm_tuning+0x348>)
 8000c9a:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <fsm_tuning+0x34c>)
 8000c9c:	f002 fd50 	bl	8003740 <HAL_UART_Transmit>
			tuning_auto();
 8000ca0:	f7ff fe46 	bl	8000930 <tuning_auto>
			break;
 8000ca4:	bf00      	nop
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000134 	.word	0x20000134
 8000cb0:	20000128 	.word	0x20000128
 8000cb4:	20000068 	.word	0x20000068
 8000cb8:	08004520 	.word	0x08004520
 8000cbc:	20000278 	.word	0x20000278
 8000cc0:	2000022c 	.word	0x2000022c
 8000cc4:	20000078 	.word	0x20000078
 8000cc8:	08004538 	.word	0x08004538
 8000ccc:	2000012c 	.word	0x2000012c
 8000cd0:	08004608 	.word	0x08004608
 8000cd4:	2000006c 	.word	0x2000006c
 8000cd8:	08004560 	.word	0x08004560

08000cdc <clearScreen>:
	buffer7SEG[1] = a%10;
	buffer7SEG[2] = b/10;
	buffer7SEG[3] = b%10;
}

void clearScreen() {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
    // ANSI escape code for clearing the screen
    HAL_UART_Transmit(&huart2, (uint8_t*)"\033[2J", 4, HAL_MAX_DELAY);
 8000ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	4906      	ldr	r1, [pc, #24]	; (8000d00 <clearScreen+0x24>)
 8000ce8:	4806      	ldr	r0, [pc, #24]	; (8000d04 <clearScreen+0x28>)
 8000cea:	f002 fd29 	bl	8003740 <HAL_UART_Transmit>
    // Move the cursor to the top-left corner
    HAL_UART_Transmit(&huart2, (uint8_t*)"\033[H", 3, HAL_MAX_DELAY);
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	4904      	ldr	r1, [pc, #16]	; (8000d08 <clearScreen+0x2c>)
 8000cf6:	4803      	ldr	r0, [pc, #12]	; (8000d04 <clearScreen+0x28>)
 8000cf8:	f002 fd22 	bl	8003740 <HAL_UART_Transmit>
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	08004584 	.word	0x08004584
 8000d04:	2000022c 	.word	0x2000022c
 8000d08:	0800458c 	.word	0x0800458c

08000d0c <resetLED>:
 *  Created on: Nov 28, 2023
 *      Author: Lenovo
 */

#include "led_control.h"
void resetLED(){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d16:	480a      	ldr	r0, [pc, #40]	; (8000d40 <resetLED+0x34>)
 8000d18:	f001 f935 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2108      	movs	r1, #8
 8000d20:	4808      	ldr	r0, [pc, #32]	; (8000d44 <resetLED+0x38>)
 8000d22:	f001 f930 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2120      	movs	r1, #32
 8000d2a:	4806      	ldr	r0, [pc, #24]	; (8000d44 <resetLED+0x38>)
 8000d2c:	f001 f92b 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2110      	movs	r1, #16
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <resetLED+0x38>)
 8000d36:	f001 f926 	bl	8001f86 <HAL_GPIO_WritePin>
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40010800 	.word	0x40010800
 8000d44:	40010c00 	.word	0x40010c00

08000d48 <onRed1>:
void onRed1(){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, 1);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <onRed1+0x20>)
 8000d54:	f001 f917 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2108      	movs	r1, #8
 8000d5c:	4803      	ldr	r0, [pc, #12]	; (8000d6c <onRed1+0x24>)
 8000d5e:	f001 f912 	bl	8001f86 <HAL_GPIO_WritePin>
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40010800 	.word	0x40010800
 8000d6c:	40010c00 	.word	0x40010c00

08000d70 <onYellow1>:
void onYellow1(){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, 1);
 8000d74:	2201      	movs	r2, #1
 8000d76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <onYellow1+0x20>)
 8000d7c:	f001 f903 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, 1);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2108      	movs	r1, #8
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <onYellow1+0x24>)
 8000d86:	f001 f8fe 	bl	8001f86 <HAL_GPIO_WritePin>
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40010800 	.word	0x40010800
 8000d94:	40010c00 	.word	0x40010c00

08000d98 <onGreen1>:
void onGreen1(){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <onGreen1+0x20>)
 8000da4:	f001 f8ef 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, 1);
 8000da8:	2201      	movs	r2, #1
 8000daa:	2108      	movs	r1, #8
 8000dac:	4803      	ldr	r0, [pc, #12]	; (8000dbc <onGreen1+0x24>)
 8000dae:	f001 f8ea 	bl	8001f86 <HAL_GPIO_WritePin>
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40010800 	.word	0x40010800
 8000dbc:	40010c00 	.word	0x40010c00

08000dc0 <onRed2>:

void onRed2(){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, 1);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2120      	movs	r1, #32
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <onRed2+0x1c>)
 8000dca:	f001 f8dc 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	4802      	ldr	r0, [pc, #8]	; (8000ddc <onRed2+0x1c>)
 8000dd4:	f001 f8d7 	bl	8001f86 <HAL_GPIO_WritePin>
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40010c00 	.word	0x40010c00

08000de0 <onYellow2>:
void onYellow2(){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, 1);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2120      	movs	r1, #32
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <onYellow2+0x1c>)
 8000dea:	f001 f8cc 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, 1);
 8000dee:	2201      	movs	r2, #1
 8000df0:	2110      	movs	r1, #16
 8000df2:	4802      	ldr	r0, [pc, #8]	; (8000dfc <onYellow2+0x1c>)
 8000df4:	f001 f8c7 	bl	8001f86 <HAL_GPIO_WritePin>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40010c00 	.word	0x40010c00

08000e00 <onGreen2>:
void onGreen2(){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2120      	movs	r1, #32
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <onGreen2+0x1c>)
 8000e0a:	f001 f8bc 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, 1);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2110      	movs	r1, #16
 8000e12:	4802      	ldr	r0, [pc, #8]	; (8000e1c <onGreen2+0x1c>)
 8000e14:	f001 f8b7 	bl	8001f86 <HAL_GPIO_WritePin>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40010c00 	.word	0x40010c00

08000e20 <pedRed>:
void pedRed() {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_0_GPIO_Port, PED_0_Pin, 1);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <pedRed+0x20>)
 8000e2c:	f001 f8ab 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_1_GPIO_Port, PED_1_Pin, 0);		
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e36:	4803      	ldr	r0, [pc, #12]	; (8000e44 <pedRed+0x24>)
 8000e38:	f001 f8a5 	bl	8001f86 <HAL_GPIO_WritePin>
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40010c00 	.word	0x40010c00
 8000e44:	40010800 	.word	0x40010800

08000e48 <pedGreen>:
void pedGreen() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_0_GPIO_Port, PED_0_Pin, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <pedGreen+0x20>)
 8000e54:	f001 f897 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_1_GPIO_Port, PED_1_Pin, 1);	
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e5e:	4803      	ldr	r0, [pc, #12]	; (8000e6c <pedGreen+0x24>)
 8000e60:	f001 f891 	bl	8001f86 <HAL_GPIO_WritePin>
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40010c00 	.word	0x40010c00
 8000e6c:	40010800 	.word	0x40010800

08000e70 <pedReset>:
void pedReset() {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_0_GPIO_Port, PED_0_Pin, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <pedReset+0x20>)
 8000e7c:	f001 f883 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_1_GPIO_Port, PED_1_Pin, 0);	
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e86:	4803      	ldr	r0, [pc, #12]	; (8000e94 <pedReset+0x24>)
 8000e88:	f001 f87d 	bl	8001f86 <HAL_GPIO_WritePin>
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40010c00 	.word	0x40010c00
 8000e94:	40010800 	.word	0x40010800

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f000 fd68 	bl	8001970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f83a 	bl	8000f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 f966 	bl	8001174 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ea8:	f000 f878 	bl	8000f9c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eac:	f000 f8c2 	bl	8001034 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000eb0:	f000 f936 	bl	8001120 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000eb4:	4812      	ldr	r0, [pc, #72]	; (8000f00 <main+0x68>)
 8000eb6:	f001 fcdd 	bl	8002874 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4811      	ldr	r0, [pc, #68]	; (8000f04 <main+0x6c>)
 8000ebe:	f001 fd83 	bl	80029c8 <HAL_TIM_PWM_Start>
  setTimer(0, 23);
 8000ec2:	2117      	movs	r1, #23
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f000 fb85 	bl	80015d4 <setTimer>
  setTimer(3, 10);
 8000eca:	210a      	movs	r1, #10
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 fb81 	bl	80015d4 <setTimer>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(&fsm_auto, 20, 50);
 8000ed2:	2232      	movs	r2, #50	; 0x32
 8000ed4:	2114      	movs	r1, #20
 8000ed6:	480c      	ldr	r0, [pc, #48]	; (8000f08 <main+0x70>)
 8000ed8:	f000 fa2a 	bl	8001330 <SCH_Add_Task>
  SCH_Add_Task(&fsm_pedestrian, 20, 50);
 8000edc:	2232      	movs	r2, #50	; 0x32
 8000ede:	2114      	movs	r1, #20
 8000ee0:	480a      	ldr	r0, [pc, #40]	; (8000f0c <main+0x74>)
 8000ee2:	f000 fa25 	bl	8001330 <SCH_Add_Task>
  SCH_Add_Task(&fsm_manual, 20, 50);
 8000ee6:	2232      	movs	r2, #50	; 0x32
 8000ee8:	2114      	movs	r1, #20
 8000eea:	4809      	ldr	r0, [pc, #36]	; (8000f10 <main+0x78>)
 8000eec:	f000 fa20 	bl	8001330 <SCH_Add_Task>
  SCH_Add_Task(&fsm_tuning, 20, 50);
 8000ef0:	2232      	movs	r2, #50	; 0x32
 8000ef2:	2114      	movs	r1, #20
 8000ef4:	4807      	ldr	r0, [pc, #28]	; (8000f14 <main+0x7c>)
 8000ef6:	f000 fa1b 	bl	8001330 <SCH_Add_Task>

//  int i = 50;
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000efa:	f000 fae9 	bl	80014d0 <SCH_Dispatch_Tasks>
 8000efe:	e7fc      	b.n	8000efa <main+0x62>
 8000f00:	200001e4 	.word	0x200001e4
 8000f04:	2000019c 	.word	0x2000019c
 8000f08:	08000359 	.word	0x08000359
 8000f0c:	08000879 	.word	0x08000879
 8000f10:	0800079d 	.word	0x0800079d
 8000f14:	08000975 	.word	0x08000975

08000f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b090      	sub	sp, #64	; 0x40
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 0318 	add.w	r3, r7, #24
 8000f22:	2228      	movs	r2, #40	; 0x28
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 fdc4 	bl	8003ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f42:	2310      	movs	r3, #16
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f46:	2302      	movs	r3, #2
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f4e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f54:	f107 0318 	add.w	r3, r7, #24
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 f82d 	bl	8001fb8 <HAL_RCC_OscConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f64:	f000 f982 	bl	800126c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f68:	230f      	movs	r3, #15
 8000f6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2102      	movs	r1, #2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f001 fa98 	bl	80024b8 <HAL_RCC_ClockConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f8e:	f000 f96d 	bl	800126c <Error_Handler>
  }
}
 8000f92:	bf00      	nop
 8000f94:	3740      	adds	r7, #64	; 0x40
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa2:	f107 0308 	add.w	r3, r7, #8
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_TIM2_Init+0x94>)
 8000fba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_TIM2_Init+0x94>)
 8000fc2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000fc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_TIM2_Init+0x94>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_TIM2_Init+0x94>)
 8000fd0:	224f      	movs	r2, #79	; 0x4f
 8000fd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_TIM2_Init+0x94>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <MX_TIM2_Init+0x94>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fe0:	4813      	ldr	r0, [pc, #76]	; (8001030 <MX_TIM2_Init+0x94>)
 8000fe2:	f001 fbf7 	bl	80027d4 <HAL_TIM_Base_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fec:	f000 f93e 	bl	800126c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <MX_TIM2_Init+0x94>)
 8000ffe:	f001 ff4f 	bl	8002ea0 <HAL_TIM_ConfigClockSource>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001008:	f000 f930 	bl	800126c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001014:	463b      	mov	r3, r7
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_TIM2_Init+0x94>)
 800101a:	f002 fad1 	bl	80035c0 <HAL_TIMEx_MasterConfigSynchronization>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001024:	f000 f922 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200001e4 	.word	0x200001e4

08001034 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	; 0x38
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	f107 0320 	add.w	r3, r7, #32
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
 8001060:	615a      	str	r2, [r3, #20]
 8001062:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001064:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <MX_TIM3_Init+0xe4>)
 8001066:	4a2d      	ldr	r2, [pc, #180]	; (800111c <MX_TIM3_Init+0xe8>)
 8001068:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 800106a:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <MX_TIM3_Init+0xe4>)
 800106c:	224f      	movs	r2, #79	; 0x4f
 800106e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b29      	ldr	r3, [pc, #164]	; (8001118 <MX_TIM3_Init+0xe4>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 8001076:	4b28      	ldr	r3, [pc, #160]	; (8001118 <MX_TIM3_Init+0xe4>)
 8001078:	224f      	movs	r2, #79	; 0x4f
 800107a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <MX_TIM3_Init+0xe4>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001082:	4b25      	ldr	r3, [pc, #148]	; (8001118 <MX_TIM3_Init+0xe4>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001088:	4823      	ldr	r0, [pc, #140]	; (8001118 <MX_TIM3_Init+0xe4>)
 800108a:	f001 fba3 	bl	80027d4 <HAL_TIM_Base_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001094:	f000 f8ea 	bl	800126c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800109e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a2:	4619      	mov	r1, r3
 80010a4:	481c      	ldr	r0, [pc, #112]	; (8001118 <MX_TIM3_Init+0xe4>)
 80010a6:	f001 fefb 	bl	8002ea0 <HAL_TIM_ConfigClockSource>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80010b0:	f000 f8dc 	bl	800126c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010b4:	4818      	ldr	r0, [pc, #96]	; (8001118 <MX_TIM3_Init+0xe4>)
 80010b6:	f001 fc2f 	bl	8002918 <HAL_TIM_PWM_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80010c0:	f000 f8d4 	bl	800126c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010cc:	f107 0320 	add.w	r3, r7, #32
 80010d0:	4619      	mov	r1, r3
 80010d2:	4811      	ldr	r0, [pc, #68]	; (8001118 <MX_TIM3_Init+0xe4>)
 80010d4:	f002 fa74 	bl	80035c0 <HAL_TIMEx_MasterConfigSynchronization>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80010de:	f000 f8c5 	bl	800126c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e2:	2360      	movs	r3, #96	; 0x60
 80010e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	4619      	mov	r1, r3
 80010f8:	4807      	ldr	r0, [pc, #28]	; (8001118 <MX_TIM3_Init+0xe4>)
 80010fa:	f001 fe0f 	bl	8002d1c <HAL_TIM_PWM_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001104:	f000 f8b2 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001108:	4803      	ldr	r0, [pc, #12]	; (8001118 <MX_TIM3_Init+0xe4>)
 800110a:	f000 fb21 	bl	8001750 <HAL_TIM_MspPostInit>

}
 800110e:	bf00      	nop
 8001110:	3738      	adds	r7, #56	; 0x38
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000019c 	.word	0x2000019c
 800111c:	40000400 	.word	0x40000400

08001120 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001126:	4a12      	ldr	r2, [pc, #72]	; (8001170 <MX_USART2_UART_Init+0x50>)
 8001128:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <MX_USART2_UART_Init+0x4c>)
 800112c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001130:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_USART2_UART_Init+0x4c>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001146:	220c      	movs	r2, #12
 8001148:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_USART2_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001158:	f002 faa2 	bl	80036a0 <HAL_UART_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001162:	f000 f883 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000022c 	.word	0x2000022c
 8001170:	40004400 	.word	0x40004400

08001174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <MX_GPIO_Init+0xd0>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a2d      	ldr	r2, [pc, #180]	; (8001244 <MX_GPIO_Init+0xd0>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <MX_GPIO_Init+0xd0>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a0:	4b28      	ldr	r3, [pc, #160]	; (8001244 <MX_GPIO_Init+0xd0>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a27      	ldr	r2, [pc, #156]	; (8001244 <MX_GPIO_Init+0xd0>)
 80011a6:	f043 0308 	orr.w	r3, r3, #8
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b25      	ldr	r3, [pc, #148]	; (8001244 <MX_GPIO_Init+0xd0>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PED_0_Pin|LED_01_Pin|LED_11_Pin|LED_10_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80011be:	4822      	ldr	r0, [pc, #136]	; (8001248 <MX_GPIO_Init+0xd4>)
 80011c0:	f000 fee1 	bl	8001f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PED_1_Pin|LED_00_Pin, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80011ca:	4820      	ldr	r0, [pc, #128]	; (800124c <MX_GPIO_Init+0xd8>)
 80011cc:	f000 fedb 	bl	8001f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN3_Pin BTN0_Pin BTN1_Pin */
  GPIO_InitStruct.Pin = BTN3_Pin|BTN0_Pin|BTN1_Pin;
 80011d0:	2313      	movs	r3, #19
 80011d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d8:	2301      	movs	r3, #1
 80011da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	4619      	mov	r1, r3
 80011e2:	481a      	ldr	r0, [pc, #104]	; (800124c <MX_GPIO_Init+0xd8>)
 80011e4:	f000 fd34 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 80011e8:	2301      	movs	r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	4619      	mov	r1, r3
 80011fa:	4813      	ldr	r0, [pc, #76]	; (8001248 <MX_GPIO_Init+0xd4>)
 80011fc:	f000 fd28 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PED_0_Pin LED_01_Pin LED_11_Pin LED_10_Pin */
  GPIO_InitStruct.Pin = PED_0_Pin|LED_01_Pin|LED_11_Pin|LED_10_Pin;
 8001200:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001204:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2302      	movs	r3, #2
 8001210:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	4619      	mov	r1, r3
 8001218:	480b      	ldr	r0, [pc, #44]	; (8001248 <MX_GPIO_Init+0xd4>)
 800121a:	f000 fd19 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PED_1_Pin LED_00_Pin */
  GPIO_InitStruct.Pin = PED_1_Pin|LED_00_Pin;
 800121e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001222:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2302      	movs	r3, #2
 800122e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	4619      	mov	r1, r3
 8001236:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_GPIO_Init+0xd8>)
 8001238:	f000 fd0a 	bl	8001c50 <HAL_GPIO_Init>

}
 800123c:	bf00      	nop
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021000 	.word	0x40021000
 8001248:	40010c00 	.word	0x40010c00
 800124c:	40010800 	.word	0x40010800

08001250 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001258:	f000 f90e 	bl	8001478 <SCH_Update>
	timerRun();
 800125c:	f000 f9fa 	bl	8001654 <timerRun>
	getKeyInput();
 8001260:	f7fe ff9e 	bl	80001a0 <getKeyInput>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001270:	b672      	cpsid	i
}
 8001272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001274:	e7fe      	b.n	8001274 <Error_Handler+0x8>
	...

08001278 <SCH_Find_Position>:
}*sTaskList = 0;

char str[100];
uint8_t tracker[MAX_SCHEDULER_TASKS], mutex_lock;

void SCH_Find_Position(struct sTask *index){
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	if(index == sTaskList){
 8001280:	4b2a      	ldr	r3, [pc, #168]	; (800132c <SCH_Find_Position+0xb4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	429a      	cmp	r2, r3
 8001288:	d04b      	beq.n	8001322 <SCH_Find_Position+0xaa>
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "FIND POSITION: only 1 task\r\n"), 200);
		return;
	}
	struct sTask *iterator = sTaskList;
 800128a:	4b28      	ldr	r3, [pc, #160]	; (800132c <SCH_Find_Position+0xb4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	60fb      	str	r3, [r7, #12]
	//Not yet found position
	uint8_t check = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	72fb      	strb	r3, [r7, #11]
	while(iterator->delay <= index->delay){
 8001294:	e014      	b.n	80012c0 <SCH_Find_Position+0x48>
		if(iterator == sTaskList) check += 1;
 8001296:	4b25      	ldr	r3, [pc, #148]	; (800132c <SCH_Find_Position+0xb4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d102      	bne.n	80012a6 <SCH_Find_Position+0x2e>
 80012a0:	7afb      	ldrb	r3, [r7, #11]
 80012a2:	3301      	adds	r3, #1
 80012a4:	72fb      	strb	r3, [r7, #11]
		if(check == 2) break;
 80012a6:	7afb      	ldrb	r3, [r7, #11]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d010      	beq.n	80012ce <SCH_Find_Position+0x56>
		index->delay -= iterator->delay;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	1ad2      	subs	r2, r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60da      	str	r2, [r3, #12]
		iterator = iterator->right;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	60fb      	str	r3, [r7, #12]
	while(iterator->delay <= index->delay){
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d9e4      	bls.n	8001296 <SCH_Find_Position+0x1e>
 80012cc:	e000      	b.n	80012d0 <SCH_Find_Position+0x58>
		if(check == 2) break;
 80012ce:	bf00      	nop
	}
	//Found position
	if(index->delay == 0) index->run_flag = 1;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <SCH_Find_Position+0x66>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	761a      	strb	r2, [r3, #24]
	index->right = iterator;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	605a      	str	r2, [r3, #4]
	index->left = iterator->left;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	601a      	str	r2, [r3, #0]
	iterator->left->right = index;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	605a      	str	r2, [r3, #4]
	iterator->left = index;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	601a      	str	r2, [r3, #0]
	//Update the immediately after
	if(iterator != sTaskList){
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <SCH_Find_Position+0xb4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d00f      	beq.n	8001324 <SCH_Find_Position+0xac>
		iterator->delay -= index->delay;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	1ad2      	subs	r2, r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	60da      	str	r2, [r3, #12]
		if(iterator->delay == 0) iterator->run_flag = 1;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d104      	bne.n	8001324 <SCH_Find_Position+0xac>
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2201      	movs	r2, #1
 800131e:	761a      	strb	r2, [r3, #24]
 8001320:	e000      	b.n	8001324 <SCH_Find_Position+0xac>
		return;
 8001322:	bf00      	nop
	}
	//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "FIND POSITION: %lu %lu\r\n", index->taskID, index->delay), 200);
	//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "FIND POSITION: Before %lu %lu\r\n", index->left->taskID, index->left->delay), 200);
	//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "FIND POSITION: After %lu %lu\r\n", index->right->taskID, index->right->delay), 200);
}
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	2000013c 	.word	0x2000013c

08001330 <SCH_Add_Task>:

int SCH_Add_Task(void (*funcPointer)(), uint32_t delay, uint32_t period){
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
	if(!funcPointer){
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10d      	bne.n	800135e <SCH_Add_Task+0x2e>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Function pointer invalid\r\n"), 200);
 8001342:	4943      	ldr	r1, [pc, #268]	; (8001450 <SCH_Add_Task+0x120>)
 8001344:	4843      	ldr	r0, [pc, #268]	; (8001454 <SCH_Add_Task+0x124>)
 8001346:	f002 fc73 	bl	8003c30 <siprintf>
 800134a:	4603      	mov	r3, r0
 800134c:	b29a      	uxth	r2, r3
 800134e:	23c8      	movs	r3, #200	; 0xc8
 8001350:	4940      	ldr	r1, [pc, #256]	; (8001454 <SCH_Add_Task+0x124>)
 8001352:	4841      	ldr	r0, [pc, #260]	; (8001458 <SCH_Add_Task+0x128>)
 8001354:	f002 f9f4 	bl	8003740 <HAL_UART_Transmit>
		return -1;
 8001358:	f04f 33ff 	mov.w	r3, #4294967295
 800135c:	e074      	b.n	8001448 <SCH_Add_Task+0x118>
	}
	uint32_t runnerID = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
	while((runnerID < MAX_SCHEDULER_TASKS) && (tracker[runnerID])){
 8001362:	e002      	b.n	800136a <SCH_Add_Task+0x3a>
		runnerID += 1;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	3301      	adds	r3, #1
 8001368:	617b      	str	r3, [r7, #20]
	while((runnerID < MAX_SCHEDULER_TASKS) && (tracker[runnerID])){
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	2b27      	cmp	r3, #39	; 0x27
 800136e:	d805      	bhi.n	800137c <SCH_Add_Task+0x4c>
 8001370:	4a3a      	ldr	r2, [pc, #232]	; (800145c <SCH_Add_Task+0x12c>)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f3      	bne.n	8001364 <SCH_Add_Task+0x34>
	}
	if(runnerID == MAX_SCHEDULER_TASKS){
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2b28      	cmp	r3, #40	; 0x28
 8001380:	d10d      	bne.n	800139e <SCH_Add_Task+0x6e>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Scheduler full\r\n"), 200);
 8001382:	4937      	ldr	r1, [pc, #220]	; (8001460 <SCH_Add_Task+0x130>)
 8001384:	4833      	ldr	r0, [pc, #204]	; (8001454 <SCH_Add_Task+0x124>)
 8001386:	f002 fc53 	bl	8003c30 <siprintf>
 800138a:	4603      	mov	r3, r0
 800138c:	b29a      	uxth	r2, r3
 800138e:	23c8      	movs	r3, #200	; 0xc8
 8001390:	4930      	ldr	r1, [pc, #192]	; (8001454 <SCH_Add_Task+0x124>)
 8001392:	4831      	ldr	r0, [pc, #196]	; (8001458 <SCH_Add_Task+0x128>)
 8001394:	f002 f9d4 	bl	8003740 <HAL_UART_Transmit>
		return -1;
 8001398:	f04f 33ff 	mov.w	r3, #4294967295
 800139c:	e054      	b.n	8001448 <SCH_Add_Task+0x118>
	}else tracker[runnerID] = 1;
 800139e:	4a2f      	ldr	r2, [pc, #188]	; (800145c <SCH_Add_Task+0x12c>)
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	4413      	add	r3, r2
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
	mutex_lock = 1;
 80013a8:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <SCH_Add_Task+0x134>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
	struct sTask *curTask = (struct sTask*)malloc(sizeof(struct sTask));
 80013ae:	201c      	movs	r0, #28
 80013b0:	f002 fb70 	bl	8003a94 <malloc>
 80013b4:	4603      	mov	r3, r0
 80013b6:	613b      	str	r3, [r7, #16]
	curTask->delay = delay/TIMER_INTERRUPT_PERIOD;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4a2b      	ldr	r2, [pc, #172]	; (8001468 <SCH_Add_Task+0x138>)
 80013bc:	fba2 2303 	umull	r2, r3, r2, r3
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	60da      	str	r2, [r3, #12]
	curTask->period = period/TIMER_INTERRUPT_PERIOD;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a27      	ldr	r2, [pc, #156]	; (8001468 <SCH_Add_Task+0x138>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	08da      	lsrs	r2, r3, #3
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	611a      	str	r2, [r3, #16]
	curTask->funcPointer = funcPointer;
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	609a      	str	r2, [r3, #8]
	curTask->taskID = runnerID;
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	615a      	str	r2, [r3, #20]
	curTask->run_flag = 0;
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	2200      	movs	r2, #0
 80013e4:	761a      	strb	r2, [r3, #24]
	if(sTaskList){
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <SCH_Add_Task+0x13c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d011      	beq.n	8001412 <SCH_Add_Task+0xe2>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Added %lu\r\n", curTask->taskID), 200);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	461a      	mov	r2, r3
 80013f4:	491e      	ldr	r1, [pc, #120]	; (8001470 <SCH_Add_Task+0x140>)
 80013f6:	4817      	ldr	r0, [pc, #92]	; (8001454 <SCH_Add_Task+0x124>)
 80013f8:	f002 fc1a 	bl	8003c30 <siprintf>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	23c8      	movs	r3, #200	; 0xc8
 8001402:	4914      	ldr	r1, [pc, #80]	; (8001454 <SCH_Add_Task+0x124>)
 8001404:	4814      	ldr	r0, [pc, #80]	; (8001458 <SCH_Add_Task+0x128>)
 8001406:	f002 f99b 	bl	8003740 <HAL_UART_Transmit>
		SCH_Find_Position(curTask);
 800140a:	6938      	ldr	r0, [r7, #16]
 800140c:	f7ff ff34 	bl	8001278 <SCH_Find_Position>
 8001410:	e016      	b.n	8001440 <SCH_Add_Task+0x110>
	}else{
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Added first %lu\r\n", curTask->taskID), 200);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	461a      	mov	r2, r3
 8001418:	4916      	ldr	r1, [pc, #88]	; (8001474 <SCH_Add_Task+0x144>)
 800141a:	480e      	ldr	r0, [pc, #56]	; (8001454 <SCH_Add_Task+0x124>)
 800141c:	f002 fc08 	bl	8003c30 <siprintf>
 8001420:	4603      	mov	r3, r0
 8001422:	b29a      	uxth	r2, r3
 8001424:	23c8      	movs	r3, #200	; 0xc8
 8001426:	490b      	ldr	r1, [pc, #44]	; (8001454 <SCH_Add_Task+0x124>)
 8001428:	480b      	ldr	r0, [pc, #44]	; (8001458 <SCH_Add_Task+0x128>)
 800142a:	f002 f989 	bl	8003740 <HAL_UART_Transmit>
		curTask->left = curTask;
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	601a      	str	r2, [r3, #0]
		curTask->right = curTask;
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	605a      	str	r2, [r3, #4]
		sTaskList = curTask;
 800143a:	4a0c      	ldr	r2, [pc, #48]	; (800146c <SCH_Add_Task+0x13c>)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	6013      	str	r3, [r2, #0]
	}
	mutex_lock = 0;
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <SCH_Add_Task+0x134>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
	return runnerID;
 8001446:	697b      	ldr	r3, [r7, #20]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	08004590 	.word	0x08004590
 8001454:	20000278 	.word	0x20000278
 8001458:	2000022c 	.word	0x2000022c
 800145c:	200002dc 	.word	0x200002dc
 8001460:	080045b8 	.word	0x080045b8
 8001464:	20000274 	.word	0x20000274
 8001468:	cccccccd 	.word	0xcccccccd
 800146c:	2000013c 	.word	0x2000013c
 8001470:	080045d4 	.word	0x080045d4
 8001474:	080045ec 	.word	0x080045ec

08001478 <SCH_Update>:

void SCH_Update(){
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	if((sTaskList) && (!sTaskList->run_flag) && (!mutex_lock)){
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <SCH_Update+0x50>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d01d      	beq.n	80014c0 <SCH_Update+0x48>
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <SCH_Update+0x50>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	7e1b      	ldrb	r3, [r3, #24]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d118      	bne.n	80014c0 <SCH_Update+0x48>
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <SCH_Update+0x54>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d114      	bne.n	80014c0 <SCH_Update+0x48>
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "UPDATE: %lu\r\n", sTaskList->taskID), 50);
		if(sTaskList->delay > 0) sTaskList->delay -= 1;
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <SCH_Update+0x50>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d006      	beq.n	80014ae <SCH_Update+0x36>
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <SCH_Update+0x50>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <SCH_Update+0x50>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	3a01      	subs	r2, #1
 80014ac:	60da      	str	r2, [r3, #12]
		if(sTaskList->delay <= 0) sTaskList->run_flag = 1;
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <SCH_Update+0x50>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d103      	bne.n	80014c0 <SCH_Update+0x48>
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <SCH_Update+0x50>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2201      	movs	r2, #1
 80014be:	761a      	strb	r2, [r3, #24]
	}
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	2000013c 	.word	0x2000013c
 80014cc:	20000274 	.word	0x20000274

080014d0 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
	mutex_lock = 1;
 80014d6:	4b25      	ldr	r3, [pc, #148]	; (800156c <SCH_Dispatch_Tasks+0x9c>)
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
	while((sTaskList) && (sTaskList->run_flag)){
 80014dc:	e036      	b.n	800154c <SCH_Dispatch_Tasks+0x7c>
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "DISPATCH: Task executing %lu\r\n", sTaskList->taskID), 200);
		(*sTaskList->funcPointer)();
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <SCH_Dispatch_Tasks+0xa0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	4798      	blx	r3
		if(sTaskList->period == 0){
 80014e6:	4b22      	ldr	r3, [pc, #136]	; (8001570 <SCH_Dispatch_Tasks+0xa0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10d      	bne.n	800150c <SCH_Dispatch_Tasks+0x3c>
			struct sTask *toDelete = sTaskList;
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <SCH_Dispatch_Tasks+0xa0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	603b      	str	r3, [r7, #0]
			sTaskList = sTaskList->right;
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <SCH_Dispatch_Tasks+0xa0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <SCH_Dispatch_Tasks+0xa0>)
 80014fe:	6013      	str	r3, [r2, #0]
			SCH_Delete_Task(toDelete->taskID);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	4618      	mov	r0, r3
 8001506:	f000 f835 	bl	8001574 <SCH_Delete_Task>
 800150a:	e01f      	b.n	800154c <SCH_Dispatch_Tasks+0x7c>
		}else{
			struct sTask *toFind = sTaskList;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <SCH_Dispatch_Tasks+0xa0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	607b      	str	r3, [r7, #4]
			sTaskList->right->left = sTaskList->left;
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <SCH_Dispatch_Tasks+0xa0>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <SCH_Dispatch_Tasks+0xa0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	6812      	ldr	r2, [r2, #0]
 800151e:	601a      	str	r2, [r3, #0]
			sTaskList->left->right = sTaskList->right;
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <SCH_Dispatch_Tasks+0xa0>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <SCH_Dispatch_Tasks+0xa0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6852      	ldr	r2, [r2, #4]
 800152c:	605a      	str	r2, [r3, #4]
			sTaskList = sTaskList->right;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <SCH_Dispatch_Tasks+0xa0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <SCH_Dispatch_Tasks+0xa0>)
 8001536:	6013      	str	r3, [r2, #0]
			toFind->run_flag = 0;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	761a      	strb	r2, [r3, #24]
			toFind->delay = toFind->period;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60da      	str	r2, [r3, #12]
			SCH_Find_Position(toFind);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff fe96 	bl	8001278 <SCH_Find_Position>
	while((sTaskList) && (sTaskList->run_flag)){
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <SCH_Dispatch_Tasks+0xa0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <SCH_Dispatch_Tasks+0x8e>
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <SCH_Dispatch_Tasks+0xa0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	7e1b      	ldrb	r3, [r3, #24]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1bf      	bne.n	80014de <SCH_Dispatch_Tasks+0xe>
		}
	}
	mutex_lock = 0;
 800155e:	4b03      	ldr	r3, [pc, #12]	; (800156c <SCH_Dispatch_Tasks+0x9c>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000274 	.word	0x20000274
 8001570:	2000013c 	.word	0x2000013c

08001574 <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t index){
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	if(tracker[index]){
 800157c:	4a13      	ldr	r2, [pc, #76]	; (80015cc <SCH_Delete_Task+0x58>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d01d      	beq.n	80015c4 <SCH_Delete_Task+0x50>
		tracker[index] = 0;
 8001588:	4a10      	ldr	r2, [pc, #64]	; (80015cc <SCH_Delete_Task+0x58>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
		struct sTask *iterator = sTaskList;
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <SCH_Delete_Task+0x5c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	60fb      	str	r3, [r7, #12]
		while(iterator->taskID != index){
 8001598:	e002      	b.n	80015a0 <SCH_Delete_Task+0x2c>
			iterator = iterator->right;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	60fb      	str	r3, [r7, #12]
		while(iterator->taskID != index){
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d1f7      	bne.n	800159a <SCH_Delete_Task+0x26>
		}
		iterator->right->left = iterator->left;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	601a      	str	r2, [r3, #0]
		iterator->left->right = iterator->right;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	6852      	ldr	r2, [r2, #4]
 80015bc:	605a      	str	r2, [r3, #4]
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "DELETE: Free %lu\r\n", iterator->taskID), 200);
		free(iterator);
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f002 fa70 	bl	8003aa4 <free>
	}else{
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "DELETE: Position empty\r\n"), 200);
	}
}
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200002dc 	.word	0x200002dc
 80015d0:	2000013c 	.word	0x2000013c

080015d4 <setTimer>:
#include "software_timer.h"

int timer_flag[10] = {0};
int timer_cnt[10] = {0};

void setTimer(int i, int duration){
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
	timer_flag[i] = 0;
 80015de:	4a07      	ldr	r2, [pc, #28]	; (80015fc <setTimer+0x28>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2100      	movs	r1, #0
 80015e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_cnt[i] = duration;
 80015e8:	4905      	ldr	r1, [pc, #20]	; (8001600 <setTimer+0x2c>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	20000140 	.word	0x20000140
 8001600:	20000168 	.word	0x20000168

08001604 <timer_run>:

void timer_run(int i){
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	if(timer_cnt[i] > 0){
 800160c:	4a0f      	ldr	r2, [pc, #60]	; (800164c <timer_run+0x48>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dd13      	ble.n	8001640 <timer_run+0x3c>
		timer_cnt[i]--;
 8001618:	4a0c      	ldr	r2, [pc, #48]	; (800164c <timer_run+0x48>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001620:	1e5a      	subs	r2, r3, #1
 8001622:	490a      	ldr	r1, [pc, #40]	; (800164c <timer_run+0x48>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_cnt[i] <= 0) timer_flag[i] = 1;
 800162a:	4a08      	ldr	r2, [pc, #32]	; (800164c <timer_run+0x48>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001632:	2b00      	cmp	r3, #0
 8001634:	dc04      	bgt.n	8001640 <timer_run+0x3c>
 8001636:	4a06      	ldr	r2, [pc, #24]	; (8001650 <timer_run+0x4c>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2101      	movs	r1, #1
 800163c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000168 	.word	0x20000168
 8001650:	20000140 	.word	0x20000140

08001654 <timerRun>:

void timerRun(){
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	timer_run(0);
 8001658:	2000      	movs	r0, #0
 800165a:	f7ff ffd3 	bl	8001604 <timer_run>
	timer_run(1);
 800165e:	2001      	movs	r0, #1
 8001660:	f7ff ffd0 	bl	8001604 <timer_run>
	timer_run(2);
 8001664:	2002      	movs	r0, #2
 8001666:	f7ff ffcd 	bl	8001604 <timer_run>
	timer_run(3);
 800166a:	2003      	movs	r0, #3
 800166c:	f7ff ffca 	bl	8001604 <timer_run>
	timer_run(4);
 8001670:	2004      	movs	r0, #4
 8001672:	f7ff ffc7 	bl	8001604 <timer_run>
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_MspInit+0x5c>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <HAL_MspInit+0x5c>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6193      	str	r3, [r2, #24]
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_MspInit+0x5c>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_MspInit+0x5c>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <HAL_MspInit+0x5c>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	61d3      	str	r3, [r2, #28]
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_MspInit+0x5c>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_MspInit+0x60>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	4a04      	ldr	r2, [pc, #16]	; (80016dc <HAL_MspInit+0x60>)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40010000 	.word	0x40010000

080016e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f0:	d114      	bne.n	800171c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_TIM_Base_MspInit+0x68>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a14      	ldr	r2, [pc, #80]	; (8001748 <HAL_TIM_Base_MspInit+0x68>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_TIM_Base_MspInit+0x68>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	201c      	movs	r0, #28
 8001710:	f000 fa67 	bl	8001be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001714:	201c      	movs	r0, #28
 8001716:	f000 fa80 	bl	8001c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800171a:	e010      	b.n	800173e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_TIM_Base_MspInit+0x6c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d10b      	bne.n	800173e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_TIM_Base_MspInit+0x68>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	4a07      	ldr	r2, [pc, #28]	; (8001748 <HAL_TIM_Base_MspInit+0x68>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	61d3      	str	r3, [r2, #28]
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_TIM_Base_MspInit+0x68>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	40000400 	.word	0x40000400

08001750 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <HAL_TIM_MspPostInit+0x58>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d117      	bne.n	80017a0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_TIM_MspPostInit+0x5c>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <HAL_TIM_MspPostInit+0x5c>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_TIM_MspPostInit+0x5c>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001788:	2340      	movs	r3, #64	; 0x40
 800178a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2302      	movs	r3, #2
 8001792:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	4619      	mov	r1, r3
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <HAL_TIM_MspPostInit+0x60>)
 800179c:	f000 fa58 	bl	8001c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017a0:	bf00      	nop
 80017a2:	3720      	adds	r7, #32
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40000400 	.word	0x40000400
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010800 	.word	0x40010800

080017b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a1b      	ldr	r2, [pc, #108]	; (800183c <HAL_UART_MspInit+0x88>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d12f      	bne.n	8001834 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017d4:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <HAL_UART_MspInit+0x8c>)
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	4a19      	ldr	r2, [pc, #100]	; (8001840 <HAL_UART_MspInit+0x8c>)
 80017da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017de:	61d3      	str	r3, [r2, #28]
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <HAL_UART_MspInit+0x8c>)
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <HAL_UART_MspInit+0x8c>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a13      	ldr	r2, [pc, #76]	; (8001840 <HAL_UART_MspInit+0x8c>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_UART_MspInit+0x8c>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001804:	2304      	movs	r3, #4
 8001806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	4619      	mov	r1, r3
 8001816:	480b      	ldr	r0, [pc, #44]	; (8001844 <HAL_UART_MspInit+0x90>)
 8001818:	f000 fa1a 	bl	8001c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800181c:	2308      	movs	r3, #8
 800181e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4619      	mov	r1, r3
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <HAL_UART_MspInit+0x90>)
 8001830:	f000 fa0e 	bl	8001c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001834:	bf00      	nop
 8001836:	3720      	adds	r7, #32
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40004400 	.word	0x40004400
 8001840:	40021000 	.word	0x40021000
 8001844:	40010800 	.word	0x40010800

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800184c:	e7fe      	b.n	800184c <NMI_Handler+0x4>

0800184e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <HardFault_Handler+0x4>

08001854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <MemManage_Handler+0x4>

0800185a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <BusFault_Handler+0x4>

08001860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <UsageFault_Handler+0x4>

08001866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188e:	f000 f8b5 	bl	80019fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <TIM2_IRQHandler+0x10>)
 800189e:	f001 f935 	bl	8002b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200001e4 	.word	0x200001e4

080018ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b4:	4a14      	ldr	r2, [pc, #80]	; (8001908 <_sbrk+0x5c>)
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <_sbrk+0x60>)
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <_sbrk+0x64>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <_sbrk+0x68>)
 80018cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d207      	bcs.n	80018ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018dc:	f002 f8b0 	bl	8003a40 <__errno>
 80018e0:	4603      	mov	r3, r0
 80018e2:	220c      	movs	r2, #12
 80018e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	e009      	b.n	8001900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <_sbrk+0x64>)
 80018fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20005000 	.word	0x20005000
 800190c:	00000400 	.word	0x00000400
 8001910:	20000190 	.word	0x20000190
 8001914:	20000318 	.word	0x20000318

08001918 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001924:	f7ff fff8 	bl	8001918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001928:	480b      	ldr	r0, [pc, #44]	; (8001958 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800192a:	490c      	ldr	r1, [pc, #48]	; (800195c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800192c:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <LoopFillZerobss+0x16>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a09      	ldr	r2, [pc, #36]	; (8001964 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001940:	4c09      	ldr	r4, [pc, #36]	; (8001968 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800194e:	f002 f87d 	bl	8003a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001952:	f7ff faa1 	bl	8000e98 <main>
  bx lr
 8001956:	4770      	bx	lr
  ldr r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800195c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001960:	08004674 	.word	0x08004674
  ldr r2, =_sbss
 8001964:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001968:	20000318 	.word	0x20000318

0800196c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800196c:	e7fe      	b.n	800196c <ADC1_2_IRQHandler>
	...

08001970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_Init+0x28>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a07      	ldr	r2, [pc, #28]	; (8001998 <HAL_Init+0x28>)
 800197a:	f043 0310 	orr.w	r3, r3, #16
 800197e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001980:	2003      	movs	r0, #3
 8001982:	f000 f923 	bl	8001bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001986:	200f      	movs	r0, #15
 8001988:	f000 f808 	bl	800199c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800198c:	f7ff fe76 	bl	800167c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40022000 	.word	0x40022000

0800199c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_InitTick+0x54>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_InitTick+0x58>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f93b 	bl	8001c36 <HAL_SYSTICK_Config>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00e      	b.n	80019e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b0f      	cmp	r3, #15
 80019ce:	d80a      	bhi.n	80019e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d0:	2200      	movs	r2, #0
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f000 f903 	bl	8001be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019dc:	4a06      	ldr	r2, [pc, #24]	; (80019f8 <HAL_InitTick+0x5c>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e000      	b.n	80019e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	2000008c 	.word	0x2000008c
 80019f4:	20000094 	.word	0x20000094
 80019f8:	20000090 	.word	0x20000090

080019fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_IncTick+0x1c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_IncTick+0x20>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a03      	ldr	r2, [pc, #12]	; (8001a1c <HAL_IncTick+0x20>)
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	20000094 	.word	0x20000094
 8001a1c:	20000304 	.word	0x20000304

08001a20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return uwTick;
 8001a24:	4b02      	ldr	r3, [pc, #8]	; (8001a30 <HAL_GetTick+0x10>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	20000304 	.word	0x20000304

08001a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a50:	4013      	ands	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a66:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	60d3      	str	r3, [r2, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <__NVIC_GetPriorityGrouping+0x18>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 0307 	and.w	r3, r3, #7
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	db0b      	blt.n	8001ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	f003 021f 	and.w	r2, r3, #31
 8001ab0:	4906      	ldr	r1, [pc, #24]	; (8001acc <__NVIC_EnableIRQ+0x34>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	2001      	movs	r0, #1
 8001aba:	fa00 f202 	lsl.w	r2, r0, r2
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	; (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	; (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
         );
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	; 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b98:	d301      	bcc.n	8001b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00f      	b.n	8001bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <SysTick_Config+0x40>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba6:	210f      	movs	r1, #15
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f7ff ff90 	bl	8001ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <SysTick_Config+0x40>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb6:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <SysTick_Config+0x40>)
 8001bb8:	2207      	movs	r2, #7
 8001bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	e000e010 	.word	0xe000e010

08001bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ff2d 	bl	8001a34 <__NVIC_SetPriorityGrouping>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf4:	f7ff ff42 	bl	8001a7c <__NVIC_GetPriorityGrouping>
 8001bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	6978      	ldr	r0, [r7, #20]
 8001c00:	f7ff ff90 	bl	8001b24 <NVIC_EncodePriority>
 8001c04:	4602      	mov	r2, r0
 8001c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff5f 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff35 	bl	8001a98 <__NVIC_EnableIRQ>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ffa2 	bl	8001b88 <SysTick_Config>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b08b      	sub	sp, #44	; 0x2c
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c62:	e169      	b.n	8001f38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c64:	2201      	movs	r2, #1
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	f040 8158 	bne.w	8001f32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4a9a      	ldr	r2, [pc, #616]	; (8001ef0 <HAL_GPIO_Init+0x2a0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d05e      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001c8c:	4a98      	ldr	r2, [pc, #608]	; (8001ef0 <HAL_GPIO_Init+0x2a0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d875      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001c92:	4a98      	ldr	r2, [pc, #608]	; (8001ef4 <HAL_GPIO_Init+0x2a4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d058      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001c98:	4a96      	ldr	r2, [pc, #600]	; (8001ef4 <HAL_GPIO_Init+0x2a4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d86f      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001c9e:	4a96      	ldr	r2, [pc, #600]	; (8001ef8 <HAL_GPIO_Init+0x2a8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d052      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001ca4:	4a94      	ldr	r2, [pc, #592]	; (8001ef8 <HAL_GPIO_Init+0x2a8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d869      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001caa:	4a94      	ldr	r2, [pc, #592]	; (8001efc <HAL_GPIO_Init+0x2ac>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d04c      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001cb0:	4a92      	ldr	r2, [pc, #584]	; (8001efc <HAL_GPIO_Init+0x2ac>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d863      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001cb6:	4a92      	ldr	r2, [pc, #584]	; (8001f00 <HAL_GPIO_Init+0x2b0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d046      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001cbc:	4a90      	ldr	r2, [pc, #576]	; (8001f00 <HAL_GPIO_Init+0x2b0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d85d      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001cc2:	2b12      	cmp	r3, #18
 8001cc4:	d82a      	bhi.n	8001d1c <HAL_GPIO_Init+0xcc>
 8001cc6:	2b12      	cmp	r3, #18
 8001cc8:	d859      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001cca:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <HAL_GPIO_Init+0x80>)
 8001ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd0:	08001d4b 	.word	0x08001d4b
 8001cd4:	08001d25 	.word	0x08001d25
 8001cd8:	08001d37 	.word	0x08001d37
 8001cdc:	08001d79 	.word	0x08001d79
 8001ce0:	08001d7f 	.word	0x08001d7f
 8001ce4:	08001d7f 	.word	0x08001d7f
 8001ce8:	08001d7f 	.word	0x08001d7f
 8001cec:	08001d7f 	.word	0x08001d7f
 8001cf0:	08001d7f 	.word	0x08001d7f
 8001cf4:	08001d7f 	.word	0x08001d7f
 8001cf8:	08001d7f 	.word	0x08001d7f
 8001cfc:	08001d7f 	.word	0x08001d7f
 8001d00:	08001d7f 	.word	0x08001d7f
 8001d04:	08001d7f 	.word	0x08001d7f
 8001d08:	08001d7f 	.word	0x08001d7f
 8001d0c:	08001d7f 	.word	0x08001d7f
 8001d10:	08001d7f 	.word	0x08001d7f
 8001d14:	08001d2d 	.word	0x08001d2d
 8001d18:	08001d41 	.word	0x08001d41
 8001d1c:	4a79      	ldr	r2, [pc, #484]	; (8001f04 <HAL_GPIO_Init+0x2b4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d22:	e02c      	b.n	8001d7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	623b      	str	r3, [r7, #32]
          break;
 8001d2a:	e029      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	3304      	adds	r3, #4
 8001d32:	623b      	str	r3, [r7, #32]
          break;
 8001d34:	e024      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	3308      	adds	r3, #8
 8001d3c:	623b      	str	r3, [r7, #32]
          break;
 8001d3e:	e01f      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	330c      	adds	r3, #12
 8001d46:	623b      	str	r3, [r7, #32]
          break;
 8001d48:	e01a      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d102      	bne.n	8001d58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d52:	2304      	movs	r3, #4
 8001d54:	623b      	str	r3, [r7, #32]
          break;
 8001d56:	e013      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d105      	bne.n	8001d6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d60:	2308      	movs	r3, #8
 8001d62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	611a      	str	r2, [r3, #16]
          break;
 8001d6a:	e009      	b.n	8001d80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	615a      	str	r2, [r3, #20]
          break;
 8001d76:	e003      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
          break;
 8001d7c:	e000      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          break;
 8001d7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2bff      	cmp	r3, #255	; 0xff
 8001d84:	d801      	bhi.n	8001d8a <HAL_GPIO_Init+0x13a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	e001      	b.n	8001d8e <HAL_GPIO_Init+0x13e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2bff      	cmp	r3, #255	; 0xff
 8001d94:	d802      	bhi.n	8001d9c <HAL_GPIO_Init+0x14c>
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	e002      	b.n	8001da2 <HAL_GPIO_Init+0x152>
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	3b08      	subs	r3, #8
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	210f      	movs	r1, #15
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	401a      	ands	r2, r3
 8001db4:	6a39      	ldr	r1, [r7, #32]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 80b1 	beq.w	8001f32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dd0:	4b4d      	ldr	r3, [pc, #308]	; (8001f08 <HAL_GPIO_Init+0x2b8>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	4a4c      	ldr	r2, [pc, #304]	; (8001f08 <HAL_GPIO_Init+0x2b8>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6193      	str	r3, [r2, #24]
 8001ddc:	4b4a      	ldr	r3, [pc, #296]	; (8001f08 <HAL_GPIO_Init+0x2b8>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001de8:	4a48      	ldr	r2, [pc, #288]	; (8001f0c <HAL_GPIO_Init+0x2bc>)
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	220f      	movs	r2, #15
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a40      	ldr	r2, [pc, #256]	; (8001f10 <HAL_GPIO_Init+0x2c0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d013      	beq.n	8001e3c <HAL_GPIO_Init+0x1ec>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a3f      	ldr	r2, [pc, #252]	; (8001f14 <HAL_GPIO_Init+0x2c4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d00d      	beq.n	8001e38 <HAL_GPIO_Init+0x1e8>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a3e      	ldr	r2, [pc, #248]	; (8001f18 <HAL_GPIO_Init+0x2c8>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d007      	beq.n	8001e34 <HAL_GPIO_Init+0x1e4>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a3d      	ldr	r2, [pc, #244]	; (8001f1c <HAL_GPIO_Init+0x2cc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d101      	bne.n	8001e30 <HAL_GPIO_Init+0x1e0>
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e006      	b.n	8001e3e <HAL_GPIO_Init+0x1ee>
 8001e30:	2304      	movs	r3, #4
 8001e32:	e004      	b.n	8001e3e <HAL_GPIO_Init+0x1ee>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e002      	b.n	8001e3e <HAL_GPIO_Init+0x1ee>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_GPIO_Init+0x1ee>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e40:	f002 0203 	and.w	r2, r2, #3
 8001e44:	0092      	lsls	r2, r2, #2
 8001e46:	4093      	lsls	r3, r2
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e4e:	492f      	ldr	r1, [pc, #188]	; (8001f0c <HAL_GPIO_Init+0x2bc>)
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	3302      	adds	r3, #2
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e68:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	492c      	ldr	r1, [pc, #176]	; (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e76:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	4928      	ldr	r1, [pc, #160]	; (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d006      	beq.n	8001e9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e90:	4b23      	ldr	r3, [pc, #140]	; (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	4922      	ldr	r1, [pc, #136]	; (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60cb      	str	r3, [r1, #12]
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	491e      	ldr	r1, [pc, #120]	; (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d006      	beq.n	8001ec6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	4918      	ldr	r1, [pc, #96]	; (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
 8001ec4:	e006      	b.n	8001ed4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ec6:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	4914      	ldr	r1, [pc, #80]	; (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d021      	beq.n	8001f24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	490e      	ldr	r1, [pc, #56]	; (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
 8001eec:	e021      	b.n	8001f32 <HAL_GPIO_Init+0x2e2>
 8001eee:	bf00      	nop
 8001ef0:	10320000 	.word	0x10320000
 8001ef4:	10310000 	.word	0x10310000
 8001ef8:	10220000 	.word	0x10220000
 8001efc:	10210000 	.word	0x10210000
 8001f00:	10120000 	.word	0x10120000
 8001f04:	10110000 	.word	0x10110000
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40010000 	.word	0x40010000
 8001f10:	40010800 	.word	0x40010800
 8001f14:	40010c00 	.word	0x40010c00
 8001f18:	40011000 	.word	0x40011000
 8001f1c:	40011400 	.word	0x40011400
 8001f20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_GPIO_Init+0x304>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	4909      	ldr	r1, [pc, #36]	; (8001f54 <HAL_GPIO_Init+0x304>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	3301      	adds	r3, #1
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f47f ae8e 	bne.w	8001c64 <HAL_GPIO_Init+0x14>
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	372c      	adds	r7, #44	; 0x2c
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	40010400 	.word	0x40010400

08001f58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	887b      	ldrh	r3, [r7, #2]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	e001      	b.n	8001f7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	807b      	strh	r3, [r7, #2]
 8001f92:	4613      	mov	r3, r2
 8001f94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f96:	787b      	ldrb	r3, [r7, #1]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9c:	887a      	ldrh	r2, [r7, #2]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fa2:	e003      	b.n	8001fac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	041a      	lsls	r2, r3, #16
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	611a      	str	r2, [r3, #16]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e26c      	b.n	80024a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8087 	beq.w	80020e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fd8:	4b92      	ldr	r3, [pc, #584]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d00c      	beq.n	8001ffe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fe4:	4b8f      	ldr	r3, [pc, #572]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d112      	bne.n	8002016 <HAL_RCC_OscConfig+0x5e>
 8001ff0:	4b8c      	ldr	r3, [pc, #560]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffc:	d10b      	bne.n	8002016 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffe:	4b89      	ldr	r3, [pc, #548]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d06c      	beq.n	80020e4 <HAL_RCC_OscConfig+0x12c>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d168      	bne.n	80020e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e246      	b.n	80024a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201e:	d106      	bne.n	800202e <HAL_RCC_OscConfig+0x76>
 8002020:	4b80      	ldr	r3, [pc, #512]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a7f      	ldr	r2, [pc, #508]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	e02e      	b.n	800208c <HAL_RCC_OscConfig+0xd4>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0x98>
 8002036:	4b7b      	ldr	r3, [pc, #492]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a7a      	ldr	r2, [pc, #488]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 800203c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b78      	ldr	r3, [pc, #480]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a77      	ldr	r2, [pc, #476]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002048:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e01d      	b.n	800208c <HAL_RCC_OscConfig+0xd4>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0xbc>
 800205a:	4b72      	ldr	r3, [pc, #456]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a71      	ldr	r2, [pc, #452]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	4b6f      	ldr	r3, [pc, #444]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a6e      	ldr	r2, [pc, #440]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 800206c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e00b      	b.n	800208c <HAL_RCC_OscConfig+0xd4>
 8002074:	4b6b      	ldr	r3, [pc, #428]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a6a      	ldr	r2, [pc, #424]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 800207a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	4b68      	ldr	r3, [pc, #416]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a67      	ldr	r2, [pc, #412]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800208a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d013      	beq.n	80020bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7ff fcc4 	bl	8001a20 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800209c:	f7ff fcc0 	bl	8001a20 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	; 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e1fa      	b.n	80024a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	4b5d      	ldr	r3, [pc, #372]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0xe4>
 80020ba:	e014      	b.n	80020e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7ff fcb0 	bl	8001a20 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c4:	f7ff fcac 	bl	8001a20 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	; 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e1e6      	b.n	80024a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d6:	4b53      	ldr	r3, [pc, #332]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x10c>
 80020e2:	e000      	b.n	80020e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d063      	beq.n	80021ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020f2:	4b4c      	ldr	r3, [pc, #304]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00b      	beq.n	8002116 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020fe:	4b49      	ldr	r3, [pc, #292]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b08      	cmp	r3, #8
 8002108:	d11c      	bne.n	8002144 <HAL_RCC_OscConfig+0x18c>
 800210a:	4b46      	ldr	r3, [pc, #280]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d116      	bne.n	8002144 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002116:	4b43      	ldr	r3, [pc, #268]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_RCC_OscConfig+0x176>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d001      	beq.n	800212e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e1ba      	b.n	80024a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212e:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4939      	ldr	r1, [pc, #228]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002142:	e03a      	b.n	80021ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d020      	beq.n	800218e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800214c:	4b36      	ldr	r3, [pc, #216]	; (8002228 <HAL_RCC_OscConfig+0x270>)
 800214e:	2201      	movs	r2, #1
 8002150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7ff fc65 	bl	8001a20 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800215a:	f7ff fc61 	bl	8001a20 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e19b      	b.n	80024a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216c:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002178:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4927      	ldr	r1, [pc, #156]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002188:	4313      	orrs	r3, r2
 800218a:	600b      	str	r3, [r1, #0]
 800218c:	e015      	b.n	80021ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800218e:	4b26      	ldr	r3, [pc, #152]	; (8002228 <HAL_RCC_OscConfig+0x270>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff fc44 	bl	8001a20 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219c:	f7ff fc40 	bl	8001a20 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e17a      	b.n	80024a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d03a      	beq.n	800223c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d019      	beq.n	8002202 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ce:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_RCC_OscConfig+0x274>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d4:	f7ff fc24 	bl	8001a20 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021dc:	f7ff fc20 	bl	8001a20 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e15a      	b.n	80024a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021fa:	2001      	movs	r0, #1
 80021fc:	f000 facc 	bl	8002798 <RCC_Delay>
 8002200:	e01c      	b.n	800223c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <HAL_RCC_OscConfig+0x274>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002208:	f7ff fc0a 	bl	8001a20 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800220e:	e00f      	b.n	8002230 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002210:	f7ff fc06 	bl	8001a20 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d908      	bls.n	8002230 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e140      	b.n	80024a4 <HAL_RCC_OscConfig+0x4ec>
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000
 8002228:	42420000 	.word	0x42420000
 800222c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002230:	4b9e      	ldr	r3, [pc, #632]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1e9      	bne.n	8002210 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80a6 	beq.w	8002396 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224a:	2300      	movs	r3, #0
 800224c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224e:	4b97      	ldr	r3, [pc, #604]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10d      	bne.n	8002276 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	4b94      	ldr	r3, [pc, #592]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	4a93      	ldr	r2, [pc, #588]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002264:	61d3      	str	r3, [r2, #28]
 8002266:	4b91      	ldr	r3, [pc, #580]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002272:	2301      	movs	r3, #1
 8002274:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002276:	4b8e      	ldr	r3, [pc, #568]	; (80024b0 <HAL_RCC_OscConfig+0x4f8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d118      	bne.n	80022b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002282:	4b8b      	ldr	r3, [pc, #556]	; (80024b0 <HAL_RCC_OscConfig+0x4f8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a8a      	ldr	r2, [pc, #552]	; (80024b0 <HAL_RCC_OscConfig+0x4f8>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228e:	f7ff fbc7 	bl	8001a20 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002296:	f7ff fbc3 	bl	8001a20 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b64      	cmp	r3, #100	; 0x64
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e0fd      	b.n	80024a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	4b81      	ldr	r3, [pc, #516]	; (80024b0 <HAL_RCC_OscConfig+0x4f8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d106      	bne.n	80022ca <HAL_RCC_OscConfig+0x312>
 80022bc:	4b7b      	ldr	r3, [pc, #492]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4a7a      	ldr	r2, [pc, #488]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6213      	str	r3, [r2, #32]
 80022c8:	e02d      	b.n	8002326 <HAL_RCC_OscConfig+0x36e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0x334>
 80022d2:	4b76      	ldr	r3, [pc, #472]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	4a75      	ldr	r2, [pc, #468]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 80022d8:	f023 0301 	bic.w	r3, r3, #1
 80022dc:	6213      	str	r3, [r2, #32]
 80022de:	4b73      	ldr	r3, [pc, #460]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4a72      	ldr	r2, [pc, #456]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 80022e4:	f023 0304 	bic.w	r3, r3, #4
 80022e8:	6213      	str	r3, [r2, #32]
 80022ea:	e01c      	b.n	8002326 <HAL_RCC_OscConfig+0x36e>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d10c      	bne.n	800230e <HAL_RCC_OscConfig+0x356>
 80022f4:	4b6d      	ldr	r3, [pc, #436]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4a6c      	ldr	r2, [pc, #432]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 80022fa:	f043 0304 	orr.w	r3, r3, #4
 80022fe:	6213      	str	r3, [r2, #32]
 8002300:	4b6a      	ldr	r3, [pc, #424]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4a69      	ldr	r2, [pc, #420]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6213      	str	r3, [r2, #32]
 800230c:	e00b      	b.n	8002326 <HAL_RCC_OscConfig+0x36e>
 800230e:	4b67      	ldr	r3, [pc, #412]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	4a66      	ldr	r2, [pc, #408]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	6213      	str	r3, [r2, #32]
 800231a:	4b64      	ldr	r3, [pc, #400]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4a63      	ldr	r2, [pc, #396]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 8002320:	f023 0304 	bic.w	r3, r3, #4
 8002324:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d015      	beq.n	800235a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232e:	f7ff fb77 	bl	8001a20 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002334:	e00a      	b.n	800234c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002336:	f7ff fb73 	bl	8001a20 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f241 3288 	movw	r2, #5000	; 0x1388
 8002344:	4293      	cmp	r3, r2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e0ab      	b.n	80024a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234c:	4b57      	ldr	r3, [pc, #348]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0ee      	beq.n	8002336 <HAL_RCC_OscConfig+0x37e>
 8002358:	e014      	b.n	8002384 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235a:	f7ff fb61 	bl	8001a20 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002360:	e00a      	b.n	8002378 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7ff fb5d 	bl	8001a20 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e095      	b.n	80024a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002378:	4b4c      	ldr	r3, [pc, #304]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1ee      	bne.n	8002362 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002384:	7dfb      	ldrb	r3, [r7, #23]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d105      	bne.n	8002396 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800238a:	4b48      	ldr	r3, [pc, #288]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	4a47      	ldr	r2, [pc, #284]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 8002390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002394:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 8081 	beq.w	80024a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023a0:	4b42      	ldr	r3, [pc, #264]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 030c 	and.w	r3, r3, #12
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d061      	beq.n	8002470 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d146      	bne.n	8002442 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b4:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <HAL_RCC_OscConfig+0x4fc>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ba:	f7ff fb31 	bl	8001a20 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c2:	f7ff fb2d 	bl	8001a20 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e067      	b.n	80024a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d4:	4b35      	ldr	r3, [pc, #212]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f0      	bne.n	80023c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e8:	d108      	bne.n	80023fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023ea:	4b30      	ldr	r3, [pc, #192]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	492d      	ldr	r1, [pc, #180]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023fc:	4b2b      	ldr	r3, [pc, #172]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a19      	ldr	r1, [r3, #32]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	430b      	orrs	r3, r1
 800240e:	4927      	ldr	r1, [pc, #156]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002414:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <HAL_RCC_OscConfig+0x4fc>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241a:	f7ff fb01 	bl	8001a20 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002422:	f7ff fafd 	bl	8001a20 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e037      	b.n	80024a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002434:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x46a>
 8002440:	e02f      	b.n	80024a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002442:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <HAL_RCC_OscConfig+0x4fc>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7ff faea 	bl	8001a20 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002450:	f7ff fae6 	bl	8001a20 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e020      	b.n	80024a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x498>
 800246e:	e018      	b.n	80024a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e013      	b.n	80024a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_RCC_OscConfig+0x4f4>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	429a      	cmp	r2, r3
 800248e:	d106      	bne.n	800249e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d001      	beq.n	80024a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40007000 	.word	0x40007000
 80024b4:	42420060 	.word	0x42420060

080024b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0d0      	b.n	800266e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024cc:	4b6a      	ldr	r3, [pc, #424]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d910      	bls.n	80024fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	4b67      	ldr	r3, [pc, #412]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 0207 	bic.w	r2, r3, #7
 80024e2:	4965      	ldr	r1, [pc, #404]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	4b63      	ldr	r3, [pc, #396]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0b8      	b.n	800266e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d020      	beq.n	800254a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002514:	4b59      	ldr	r3, [pc, #356]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4a58      	ldr	r2, [pc, #352]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800251e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800252c:	4b53      	ldr	r3, [pc, #332]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4a52      	ldr	r2, [pc, #328]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002536:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002538:	4b50      	ldr	r3, [pc, #320]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	494d      	ldr	r1, [pc, #308]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d040      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d107      	bne.n	800256e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	4b47      	ldr	r3, [pc, #284]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d115      	bne.n	8002596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e07f      	b.n	800266e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d107      	bne.n	8002586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002576:	4b41      	ldr	r3, [pc, #260]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e073      	b.n	800266e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002586:	4b3d      	ldr	r3, [pc, #244]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e06b      	b.n	800266e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002596:	4b39      	ldr	r3, [pc, #228]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f023 0203 	bic.w	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	4936      	ldr	r1, [pc, #216]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a8:	f7ff fa3a 	bl	8001a20 <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ae:	e00a      	b.n	80025c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b0:	f7ff fa36 	bl	8001a20 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e053      	b.n	800266e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	4b2d      	ldr	r3, [pc, #180]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 020c 	and.w	r2, r3, #12
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d1eb      	bne.n	80025b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d210      	bcs.n	8002608 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b24      	ldr	r3, [pc, #144]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 0207 	bic.w	r2, r3, #7
 80025ee:	4922      	ldr	r1, [pc, #136]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b20      	ldr	r3, [pc, #128]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e032      	b.n	800266e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002614:	4b19      	ldr	r3, [pc, #100]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4916      	ldr	r1, [pc, #88]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d009      	beq.n	8002646 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	490e      	ldr	r1, [pc, #56]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002646:	f000 f821 	bl	800268c <HAL_RCC_GetSysClockFreq>
 800264a:	4602      	mov	r2, r0
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	490a      	ldr	r1, [pc, #40]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 8002658:	5ccb      	ldrb	r3, [r1, r3]
 800265a:	fa22 f303 	lsr.w	r3, r2, r3
 800265e:	4a09      	ldr	r2, [pc, #36]	; (8002684 <HAL_RCC_ClockConfig+0x1cc>)
 8002660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_RCC_ClockConfig+0x1d0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff f998 	bl	800199c <HAL_InitTick>

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40022000 	.word	0x40022000
 800267c:	40021000 	.word	0x40021000
 8002680:	0800460c 	.word	0x0800460c
 8002684:	2000008c 	.word	0x2000008c
 8002688:	20000090 	.word	0x20000090

0800268c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	2300      	movs	r3, #0
 80026a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026a6:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <HAL_RCC_GetSysClockFreq+0x94>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d002      	beq.n	80026bc <HAL_RCC_GetSysClockFreq+0x30>
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d003      	beq.n	80026c2 <HAL_RCC_GetSysClockFreq+0x36>
 80026ba:	e027      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_RCC_GetSysClockFreq+0x98>)
 80026be:	613b      	str	r3, [r7, #16]
      break;
 80026c0:	e027      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	0c9b      	lsrs	r3, r3, #18
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	4a17      	ldr	r2, [pc, #92]	; (8002728 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026cc:	5cd3      	ldrb	r3, [r2, r3]
 80026ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d010      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026da:	4b11      	ldr	r3, [pc, #68]	; (8002720 <HAL_RCC_GetSysClockFreq+0x94>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	0c5b      	lsrs	r3, r3, #17
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	4a11      	ldr	r2, [pc, #68]	; (800272c <HAL_RCC_GetSysClockFreq+0xa0>)
 80026e6:	5cd3      	ldrb	r3, [r2, r3]
 80026e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a0d      	ldr	r2, [pc, #52]	; (8002724 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ee:	fb02 f203 	mul.w	r2, r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	e004      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a0c      	ldr	r2, [pc, #48]	; (8002730 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002700:	fb02 f303 	mul.w	r3, r2, r3
 8002704:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	613b      	str	r3, [r7, #16]
      break;
 800270a:	e002      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_RCC_GetSysClockFreq+0x98>)
 800270e:	613b      	str	r3, [r7, #16]
      break;
 8002710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002712:	693b      	ldr	r3, [r7, #16]
}
 8002714:	4618      	mov	r0, r3
 8002716:	371c      	adds	r7, #28
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	007a1200 	.word	0x007a1200
 8002728:	08004624 	.word	0x08004624
 800272c:	08004634 	.word	0x08004634
 8002730:	003d0900 	.word	0x003d0900

08002734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002738:	4b02      	ldr	r3, [pc, #8]	; (8002744 <HAL_RCC_GetHCLKFreq+0x10>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	2000008c 	.word	0x2000008c

08002748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800274c:	f7ff fff2 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 8002750:	4602      	mov	r2, r0
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	0a1b      	lsrs	r3, r3, #8
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	4903      	ldr	r1, [pc, #12]	; (800276c <HAL_RCC_GetPCLK1Freq+0x24>)
 800275e:	5ccb      	ldrb	r3, [r1, r3]
 8002760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000
 800276c:	0800461c 	.word	0x0800461c

08002770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002774:	f7ff ffde 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 8002778:	4602      	mov	r2, r0
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RCC_GetPCLK2Freq+0x20>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	0adb      	lsrs	r3, r3, #11
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	4903      	ldr	r1, [pc, #12]	; (8002794 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002786:	5ccb      	ldrb	r3, [r1, r3]
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	0800461c 	.word	0x0800461c

08002798 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <RCC_Delay+0x34>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <RCC_Delay+0x38>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	0a5b      	lsrs	r3, r3, #9
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027b4:	bf00      	nop
  }
  while (Delay --);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1e5a      	subs	r2, r3, #1
 80027ba:	60fa      	str	r2, [r7, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f9      	bne.n	80027b4 <RCC_Delay+0x1c>
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	2000008c 	.word	0x2000008c
 80027d0:	10624dd3 	.word	0x10624dd3

080027d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e041      	b.n	800286a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe ff70 	bl	80016e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3304      	adds	r3, #4
 8002810:	4619      	mov	r1, r3
 8002812:	4610      	mov	r0, r2
 8002814:	f000 fc30 	bl	8003078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d001      	beq.n	800288c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e03a      	b.n	8002902 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a18      	ldr	r2, [pc, #96]	; (800290c <HAL_TIM_Base_Start_IT+0x98>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00e      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0x58>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b6:	d009      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0x58>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a14      	ldr	r2, [pc, #80]	; (8002910 <HAL_TIM_Base_Start_IT+0x9c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d004      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0x58>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a13      	ldr	r2, [pc, #76]	; (8002914 <HAL_TIM_Base_Start_IT+0xa0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d111      	bne.n	80028f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2b06      	cmp	r3, #6
 80028dc:	d010      	beq.n	8002900 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0201 	orr.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ee:	e007      	b.n	8002900 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	40012c00 	.word	0x40012c00
 8002910:	40000400 	.word	0x40000400
 8002914:	40000800 	.word	0x40000800

08002918 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e041      	b.n	80029ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f839 	bl	80029b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3304      	adds	r3, #4
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f000 fb8e 	bl	8003078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_TIM_PWM_Start+0x24>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	bf14      	ite	ne
 80029e4:	2301      	movne	r3, #1
 80029e6:	2300      	moveq	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	e022      	b.n	8002a32 <HAL_TIM_PWM_Start+0x6a>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d109      	bne.n	8002a06 <HAL_TIM_PWM_Start+0x3e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	bf14      	ite	ne
 80029fe:	2301      	movne	r3, #1
 8002a00:	2300      	moveq	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	e015      	b.n	8002a32 <HAL_TIM_PWM_Start+0x6a>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d109      	bne.n	8002a20 <HAL_TIM_PWM_Start+0x58>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	bf14      	ite	ne
 8002a18:	2301      	movne	r3, #1
 8002a1a:	2300      	moveq	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	e008      	b.n	8002a32 <HAL_TIM_PWM_Start+0x6a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	bf14      	ite	ne
 8002a2c:	2301      	movne	r3, #1
 8002a2e:	2300      	moveq	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e05e      	b.n	8002af8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d104      	bne.n	8002a4a <HAL_TIM_PWM_Start+0x82>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a48:	e013      	b.n	8002a72 <HAL_TIM_PWM_Start+0xaa>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d104      	bne.n	8002a5a <HAL_TIM_PWM_Start+0x92>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a58:	e00b      	b.n	8002a72 <HAL_TIM_PWM_Start+0xaa>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d104      	bne.n	8002a6a <HAL_TIM_PWM_Start+0xa2>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a68:	e003      	b.n	8002a72 <HAL_TIM_PWM_Start+0xaa>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2201      	movs	r2, #1
 8002a78:	6839      	ldr	r1, [r7, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fd7c 	bl	8003578 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1e      	ldr	r2, [pc, #120]	; (8002b00 <HAL_TIM_PWM_Start+0x138>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d107      	bne.n	8002a9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a18      	ldr	r2, [pc, #96]	; (8002b00 <HAL_TIM_PWM_Start+0x138>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00e      	beq.n	8002ac2 <HAL_TIM_PWM_Start+0xfa>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aac:	d009      	beq.n	8002ac2 <HAL_TIM_PWM_Start+0xfa>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a14      	ldr	r2, [pc, #80]	; (8002b04 <HAL_TIM_PWM_Start+0x13c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d004      	beq.n	8002ac2 <HAL_TIM_PWM_Start+0xfa>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <HAL_TIM_PWM_Start+0x140>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d111      	bne.n	8002ae6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b06      	cmp	r3, #6
 8002ad2:	d010      	beq.n	8002af6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae4:	e007      	b.n	8002af6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0201 	orr.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40012c00 	.word	0x40012c00
 8002b04:	40000400 	.word	0x40000400
 8002b08:	40000800 	.word	0x40000800

08002b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d122      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d11b      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0202 	mvn.w	r2, #2
 8002b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fa76 	bl	8003040 <HAL_TIM_IC_CaptureCallback>
 8002b54:	e005      	b.n	8002b62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fa69 	bl	800302e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 fa78 	bl	8003052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d122      	bne.n	8002bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d11b      	bne.n	8002bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0204 	mvn.w	r2, #4
 8002b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2202      	movs	r2, #2
 8002b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fa4c 	bl	8003040 <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fa3f 	bl	800302e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fa4e 	bl	8003052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d122      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d11b      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0208 	mvn.w	r2, #8
 8002be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2204      	movs	r2, #4
 8002be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fa22 	bl	8003040 <HAL_TIM_IC_CaptureCallback>
 8002bfc:	e005      	b.n	8002c0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fa15 	bl	800302e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 fa24 	bl	8003052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	2b10      	cmp	r3, #16
 8002c1c:	d122      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d11b      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0210 	mvn.w	r2, #16
 8002c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2208      	movs	r2, #8
 8002c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f9f8 	bl	8003040 <HAL_TIM_IC_CaptureCallback>
 8002c50:	e005      	b.n	8002c5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f9eb 	bl	800302e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f9fa 	bl	8003052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d10e      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d107      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0201 	mvn.w	r2, #1
 8002c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fe fae0 	bl	8001250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9a:	2b80      	cmp	r3, #128	; 0x80
 8002c9c:	d10e      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca8:	2b80      	cmp	r3, #128	; 0x80
 8002caa:	d107      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fce9 	bl	800368e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc6:	2b40      	cmp	r3, #64	; 0x40
 8002cc8:	d10e      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd4:	2b40      	cmp	r3, #64	; 0x40
 8002cd6:	d107      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f9be 	bl	8003064 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d10e      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d107      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0220 	mvn.w	r2, #32
 8002d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fcb4 	bl	800367c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e0ae      	b.n	8002e98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b0c      	cmp	r3, #12
 8002d46:	f200 809f 	bhi.w	8002e88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d4a:	a201      	add	r2, pc, #4	; (adr r2, 8002d50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d50:	08002d85 	.word	0x08002d85
 8002d54:	08002e89 	.word	0x08002e89
 8002d58:	08002e89 	.word	0x08002e89
 8002d5c:	08002e89 	.word	0x08002e89
 8002d60:	08002dc5 	.word	0x08002dc5
 8002d64:	08002e89 	.word	0x08002e89
 8002d68:	08002e89 	.word	0x08002e89
 8002d6c:	08002e89 	.word	0x08002e89
 8002d70:	08002e07 	.word	0x08002e07
 8002d74:	08002e89 	.word	0x08002e89
 8002d78:	08002e89 	.word	0x08002e89
 8002d7c:	08002e89 	.word	0x08002e89
 8002d80:	08002e47 	.word	0x08002e47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 f9d6 	bl	800313c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0208 	orr.w	r2, r2, #8
 8002d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0204 	bic.w	r2, r2, #4
 8002dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6999      	ldr	r1, [r3, #24]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	619a      	str	r2, [r3, #24]
      break;
 8002dc2:	e064      	b.n	8002e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fa1c 	bl	8003208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699a      	ldr	r2, [r3, #24]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6999      	ldr	r1, [r3, #24]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	021a      	lsls	r2, r3, #8
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	619a      	str	r2, [r3, #24]
      break;
 8002e04:	e043      	b.n	8002e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fa65 	bl	80032dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69da      	ldr	r2, [r3, #28]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0208 	orr.w	r2, r2, #8
 8002e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0204 	bic.w	r2, r2, #4
 8002e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69d9      	ldr	r1, [r3, #28]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	61da      	str	r2, [r3, #28]
      break;
 8002e44:	e023      	b.n	8002e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 faaf 	bl	80033b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69da      	ldr	r2, [r3, #28]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	69da      	ldr	r2, [r3, #28]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69d9      	ldr	r1, [r3, #28]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	021a      	lsls	r2, r3, #8
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	61da      	str	r2, [r3, #28]
      break;
 8002e86:	e002      	b.n	8002e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_TIM_ConfigClockSource+0x1c>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e0b4      	b.n	8003026 <HAL_TIM_ConfigClockSource+0x186>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef4:	d03e      	beq.n	8002f74 <HAL_TIM_ConfigClockSource+0xd4>
 8002ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002efa:	f200 8087 	bhi.w	800300c <HAL_TIM_ConfigClockSource+0x16c>
 8002efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f02:	f000 8086 	beq.w	8003012 <HAL_TIM_ConfigClockSource+0x172>
 8002f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0a:	d87f      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x16c>
 8002f0c:	2b70      	cmp	r3, #112	; 0x70
 8002f0e:	d01a      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0xa6>
 8002f10:	2b70      	cmp	r3, #112	; 0x70
 8002f12:	d87b      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x16c>
 8002f14:	2b60      	cmp	r3, #96	; 0x60
 8002f16:	d050      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x11a>
 8002f18:	2b60      	cmp	r3, #96	; 0x60
 8002f1a:	d877      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x16c>
 8002f1c:	2b50      	cmp	r3, #80	; 0x50
 8002f1e:	d03c      	beq.n	8002f9a <HAL_TIM_ConfigClockSource+0xfa>
 8002f20:	2b50      	cmp	r3, #80	; 0x50
 8002f22:	d873      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x16c>
 8002f24:	2b40      	cmp	r3, #64	; 0x40
 8002f26:	d058      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0x13a>
 8002f28:	2b40      	cmp	r3, #64	; 0x40
 8002f2a:	d86f      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x16c>
 8002f2c:	2b30      	cmp	r3, #48	; 0x30
 8002f2e:	d064      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0x15a>
 8002f30:	2b30      	cmp	r3, #48	; 0x30
 8002f32:	d86b      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x16c>
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d060      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0x15a>
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d867      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x16c>
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d05c      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0x15a>
 8002f40:	2b10      	cmp	r3, #16
 8002f42:	d05a      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0x15a>
 8002f44:	e062      	b.n	800300c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6899      	ldr	r1, [r3, #8]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f000 faf0 	bl	800353a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	609a      	str	r2, [r3, #8]
      break;
 8002f72:	e04f      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6899      	ldr	r1, [r3, #8]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f000 fad9 	bl	800353a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f96:	609a      	str	r2, [r3, #8]
      break;
 8002f98:	e03c      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f000 fa50 	bl	800344c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2150      	movs	r1, #80	; 0x50
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 faa7 	bl	8003506 <TIM_ITRx_SetConfig>
      break;
 8002fb8:	e02c      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6859      	ldr	r1, [r3, #4]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f000 fa6e 	bl	80034a8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2160      	movs	r1, #96	; 0x60
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fa97 	bl	8003506 <TIM_ITRx_SetConfig>
      break;
 8002fd8:	e01c      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6859      	ldr	r1, [r3, #4]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f000 fa30 	bl	800344c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2140      	movs	r1, #64	; 0x40
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fa87 	bl	8003506 <TIM_ITRx_SetConfig>
      break;
 8002ff8:	e00c      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4619      	mov	r1, r3
 8003004:	4610      	mov	r0, r2
 8003006:	f000 fa7e 	bl	8003506 <TIM_ITRx_SetConfig>
      break;
 800300a:	e003      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
      break;
 8003010:	e000      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003024:	7bfb      	ldrb	r3, [r7, #15]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr
	...

08003078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a29      	ldr	r2, [pc, #164]	; (8003130 <TIM_Base_SetConfig+0xb8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d00b      	beq.n	80030a8 <TIM_Base_SetConfig+0x30>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003096:	d007      	beq.n	80030a8 <TIM_Base_SetConfig+0x30>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a26      	ldr	r2, [pc, #152]	; (8003134 <TIM_Base_SetConfig+0xbc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d003      	beq.n	80030a8 <TIM_Base_SetConfig+0x30>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a25      	ldr	r2, [pc, #148]	; (8003138 <TIM_Base_SetConfig+0xc0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d108      	bne.n	80030ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a1c      	ldr	r2, [pc, #112]	; (8003130 <TIM_Base_SetConfig+0xb8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00b      	beq.n	80030da <TIM_Base_SetConfig+0x62>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c8:	d007      	beq.n	80030da <TIM_Base_SetConfig+0x62>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a19      	ldr	r2, [pc, #100]	; (8003134 <TIM_Base_SetConfig+0xbc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d003      	beq.n	80030da <TIM_Base_SetConfig+0x62>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a18      	ldr	r2, [pc, #96]	; (8003138 <TIM_Base_SetConfig+0xc0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d108      	bne.n	80030ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a07      	ldr	r2, [pc, #28]	; (8003130 <TIM_Base_SetConfig+0xb8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d103      	bne.n	8003120 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	615a      	str	r2, [r3, #20]
}
 8003126:	bf00      	nop
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr
 8003130:	40012c00 	.word	0x40012c00
 8003134:	40000400 	.word	0x40000400
 8003138:	40000800 	.word	0x40000800

0800313c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f023 0201 	bic.w	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0303 	bic.w	r3, r3, #3
 8003172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f023 0302 	bic.w	r3, r3, #2
 8003184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4313      	orrs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a1c      	ldr	r2, [pc, #112]	; (8003204 <TIM_OC1_SetConfig+0xc8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d10c      	bne.n	80031b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f023 0308 	bic.w	r3, r3, #8
 800319e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f023 0304 	bic.w	r3, r3, #4
 80031b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a13      	ldr	r2, [pc, #76]	; (8003204 <TIM_OC1_SetConfig+0xc8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d111      	bne.n	80031de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	621a      	str	r2, [r3, #32]
}
 80031f8:	bf00      	nop
 80031fa:	371c      	adds	r7, #28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40012c00 	.word	0x40012c00

08003208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	f023 0210 	bic.w	r2, r3, #16
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800323e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4313      	orrs	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f023 0320 	bic.w	r3, r3, #32
 8003252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a1d      	ldr	r2, [pc, #116]	; (80032d8 <TIM_OC2_SetConfig+0xd0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d10d      	bne.n	8003284 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800326e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003282:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a14      	ldr	r2, [pc, #80]	; (80032d8 <TIM_OC2_SetConfig+0xd0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d113      	bne.n	80032b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003292:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800329a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	621a      	str	r2, [r3, #32]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	40012c00 	.word	0x40012c00

080032dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0303 	bic.w	r3, r3, #3
 8003312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a1d      	ldr	r2, [pc, #116]	; (80033ac <TIM_OC3_SetConfig+0xd0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d10d      	bne.n	8003356 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003340:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a14      	ldr	r2, [pc, #80]	; (80033ac <TIM_OC3_SetConfig+0xd0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d113      	bne.n	8003386 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800336c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	621a      	str	r2, [r3, #32]
}
 80033a0:	bf00      	nop
 80033a2:	371c      	adds	r7, #28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40012c00 	.word	0x40012c00

080033b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	031b      	lsls	r3, r3, #12
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a0f      	ldr	r2, [pc, #60]	; (8003448 <TIM_OC4_SetConfig+0x98>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d109      	bne.n	8003424 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003416:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	019b      	lsls	r3, r3, #6
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	621a      	str	r2, [r3, #32]
}
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	40012c00 	.word	0x40012c00

0800344c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	f023 0201 	bic.w	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f023 030a 	bic.w	r3, r3, #10
 8003488:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	621a      	str	r2, [r3, #32]
}
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f023 0210 	bic.w	r2, r3, #16
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	031b      	lsls	r3, r3, #12
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	621a      	str	r2, [r3, #32]
}
 80034fc:	bf00      	nop
 80034fe:	371c      	adds	r7, #28
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr

08003506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003506:	b480      	push	{r7}
 8003508:	b085      	sub	sp, #20
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	f043 0307 	orr.w	r3, r3, #7
 8003528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	609a      	str	r2, [r3, #8]
}
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr

0800353a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800353a:	b480      	push	{r7}
 800353c:	b087      	sub	sp, #28
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003554:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	021a      	lsls	r2, r3, #8
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	431a      	orrs	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4313      	orrs	r3, r2
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	609a      	str	r2, [r3, #8]
}
 800356e:	bf00      	nop
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	2201      	movs	r2, #1
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a1a      	ldr	r2, [r3, #32]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	43db      	mvns	r3, r3
 800359a:	401a      	ands	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a1a      	ldr	r2, [r3, #32]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	fa01 f303 	lsl.w	r3, r1, r3
 80035b0:	431a      	orrs	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	621a      	str	r2, [r3, #32]
}
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e046      	b.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a16      	ldr	r2, [pc, #88]	; (8003670 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00e      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003624:	d009      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a12      	ldr	r2, [pc, #72]	; (8003674 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d004      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a10      	ldr	r2, [pc, #64]	; (8003678 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d10c      	bne.n	8003654 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003640:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	4313      	orrs	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr
 8003670:	40012c00 	.word	0x40012c00
 8003674:	40000400 	.word	0x40000400
 8003678:	40000800 	.word	0x40000800

0800367c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr

0800368e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr

080036a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e042      	b.n	8003738 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fe f874 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	; 0x24
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f91d 	bl	8003924 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695a      	ldr	r2, [r3, #20]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	; 0x28
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b20      	cmp	r3, #32
 800375e:	d16d      	bne.n	800383c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <HAL_UART_Transmit+0x2c>
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e066      	b.n	800383e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2221      	movs	r2, #33	; 0x21
 800377a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800377e:	f7fe f94f 	bl	8001a20 <HAL_GetTick>
 8003782:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	88fa      	ldrh	r2, [r7, #6]
 8003788:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	88fa      	ldrh	r2, [r7, #6]
 800378e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003798:	d108      	bne.n	80037ac <HAL_UART_Transmit+0x6c>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d104      	bne.n	80037ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	61bb      	str	r3, [r7, #24]
 80037aa:	e003      	b.n	80037b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037b4:	e02a      	b.n	800380c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2200      	movs	r2, #0
 80037be:	2180      	movs	r1, #128	; 0x80
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f840 	bl	8003846 <UART_WaitOnFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e036      	b.n	800383e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	3302      	adds	r3, #2
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	e007      	b.n	80037fe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	781a      	ldrb	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	3301      	adds	r3, #1
 80037fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1cf      	bne.n	80037b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2200      	movs	r2, #0
 800381e:	2140      	movs	r1, #64	; 0x40
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f810 	bl	8003846 <UART_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e006      	b.n	800383e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	e000      	b.n	800383e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800383c:	2302      	movs	r3, #2
  }
}
 800383e:	4618      	mov	r0, r3
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b090      	sub	sp, #64	; 0x40
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	603b      	str	r3, [r7, #0]
 8003852:	4613      	mov	r3, r2
 8003854:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003856:	e050      	b.n	80038fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385e:	d04c      	beq.n	80038fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003862:	2b00      	cmp	r3, #0
 8003864:	d007      	beq.n	8003876 <UART_WaitOnFlagUntilTimeout+0x30>
 8003866:	f7fe f8db 	bl	8001a20 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003872:	429a      	cmp	r2, r3
 8003874:	d241      	bcs.n	80038fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	330c      	adds	r3, #12
 800387c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800388c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	330c      	adds	r3, #12
 8003894:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003896:	637a      	str	r2, [r7, #52]	; 0x34
 8003898:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800389c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800389e:	e841 2300 	strex	r3, r2, [r1]
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1e5      	bne.n	8003876 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3314      	adds	r3, #20
 80038b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	613b      	str	r3, [r7, #16]
   return(result);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3314      	adds	r3, #20
 80038c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038ca:	623a      	str	r2, [r7, #32]
 80038cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	69f9      	ldr	r1, [r7, #28]
 80038d0:	6a3a      	ldr	r2, [r7, #32]
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e5      	bne.n	80038aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e00f      	b.n	800391a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4013      	ands	r3, r2
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	bf0c      	ite	eq
 800390a:	2301      	moveq	r3, #1
 800390c:	2300      	movne	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	429a      	cmp	r2, r3
 8003916:	d09f      	beq.n	8003858 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3740      	adds	r7, #64	; 0x40
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800395e:	f023 030c 	bic.w	r3, r3, #12
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6812      	ldr	r2, [r2, #0]
 8003966:	68b9      	ldr	r1, [r7, #8]
 8003968:	430b      	orrs	r3, r1
 800396a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a2c      	ldr	r2, [pc, #176]	; (8003a38 <UART_SetConfig+0x114>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d103      	bne.n	8003994 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800398c:	f7fe fef0 	bl	8002770 <HAL_RCC_GetPCLK2Freq>
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	e002      	b.n	800399a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003994:	f7fe fed8 	bl	8002748 <HAL_RCC_GetPCLK1Freq>
 8003998:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	009a      	lsls	r2, r3, #2
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	4a22      	ldr	r2, [pc, #136]	; (8003a3c <UART_SetConfig+0x118>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	0119      	lsls	r1, r3, #4
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	009a      	lsls	r2, r3, #2
 80039c4:	441a      	add	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80039d0:	4b1a      	ldr	r3, [pc, #104]	; (8003a3c <UART_SetConfig+0x118>)
 80039d2:	fba3 0302 	umull	r0, r3, r3, r2
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	2064      	movs	r0, #100	; 0x64
 80039da:	fb00 f303 	mul.w	r3, r0, r3
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	3332      	adds	r3, #50	; 0x32
 80039e4:	4a15      	ldr	r2, [pc, #84]	; (8003a3c <UART_SetConfig+0x118>)
 80039e6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f0:	4419      	add	r1, r3
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	009a      	lsls	r2, r3, #2
 80039fc:	441a      	add	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a08:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <UART_SetConfig+0x118>)
 8003a0a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	2064      	movs	r0, #100	; 0x64
 8003a12:	fb00 f303 	mul.w	r3, r0, r3
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	3332      	adds	r3, #50	; 0x32
 8003a1c:	4a07      	ldr	r2, [pc, #28]	; (8003a3c <UART_SetConfig+0x118>)
 8003a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	f003 020f 	and.w	r2, r3, #15
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	440a      	add	r2, r1
 8003a2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a30:	bf00      	nop
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40013800 	.word	0x40013800
 8003a3c:	51eb851f 	.word	0x51eb851f

08003a40 <__errno>:
 8003a40:	4b01      	ldr	r3, [pc, #4]	; (8003a48 <__errno+0x8>)
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	20000098 	.word	0x20000098

08003a4c <__libc_init_array>:
 8003a4c:	b570      	push	{r4, r5, r6, lr}
 8003a4e:	2600      	movs	r6, #0
 8003a50:	4d0c      	ldr	r5, [pc, #48]	; (8003a84 <__libc_init_array+0x38>)
 8003a52:	4c0d      	ldr	r4, [pc, #52]	; (8003a88 <__libc_init_array+0x3c>)
 8003a54:	1b64      	subs	r4, r4, r5
 8003a56:	10a4      	asrs	r4, r4, #2
 8003a58:	42a6      	cmp	r6, r4
 8003a5a:	d109      	bne.n	8003a70 <__libc_init_array+0x24>
 8003a5c:	f000 fc6c 	bl	8004338 <_init>
 8003a60:	2600      	movs	r6, #0
 8003a62:	4d0a      	ldr	r5, [pc, #40]	; (8003a8c <__libc_init_array+0x40>)
 8003a64:	4c0a      	ldr	r4, [pc, #40]	; (8003a90 <__libc_init_array+0x44>)
 8003a66:	1b64      	subs	r4, r4, r5
 8003a68:	10a4      	asrs	r4, r4, #2
 8003a6a:	42a6      	cmp	r6, r4
 8003a6c:	d105      	bne.n	8003a7a <__libc_init_array+0x2e>
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}
 8003a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a74:	4798      	blx	r3
 8003a76:	3601      	adds	r6, #1
 8003a78:	e7ee      	b.n	8003a58 <__libc_init_array+0xc>
 8003a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a7e:	4798      	blx	r3
 8003a80:	3601      	adds	r6, #1
 8003a82:	e7f2      	b.n	8003a6a <__libc_init_array+0x1e>
 8003a84:	0800466c 	.word	0x0800466c
 8003a88:	0800466c 	.word	0x0800466c
 8003a8c:	0800466c 	.word	0x0800466c
 8003a90:	08004670 	.word	0x08004670

08003a94 <malloc>:
 8003a94:	4b02      	ldr	r3, [pc, #8]	; (8003aa0 <malloc+0xc>)
 8003a96:	4601      	mov	r1, r0
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	f000 b85f 	b.w	8003b5c <_malloc_r>
 8003a9e:	bf00      	nop
 8003aa0:	20000098 	.word	0x20000098

08003aa4 <free>:
 8003aa4:	4b02      	ldr	r3, [pc, #8]	; (8003ab0 <free+0xc>)
 8003aa6:	4601      	mov	r1, r0
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	f000 b80b 	b.w	8003ac4 <_free_r>
 8003aae:	bf00      	nop
 8003ab0:	20000098 	.word	0x20000098

08003ab4 <memset>:
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	4402      	add	r2, r0
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d100      	bne.n	8003abe <memset+0xa>
 8003abc:	4770      	bx	lr
 8003abe:	f803 1b01 	strb.w	r1, [r3], #1
 8003ac2:	e7f9      	b.n	8003ab8 <memset+0x4>

08003ac4 <_free_r>:
 8003ac4:	b538      	push	{r3, r4, r5, lr}
 8003ac6:	4605      	mov	r5, r0
 8003ac8:	2900      	cmp	r1, #0
 8003aca:	d043      	beq.n	8003b54 <_free_r+0x90>
 8003acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ad0:	1f0c      	subs	r4, r1, #4
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bfb8      	it	lt
 8003ad6:	18e4      	addlt	r4, r4, r3
 8003ad8:	f000 f8ca 	bl	8003c70 <__malloc_lock>
 8003adc:	4a1e      	ldr	r2, [pc, #120]	; (8003b58 <_free_r+0x94>)
 8003ade:	6813      	ldr	r3, [r2, #0]
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	b933      	cbnz	r3, 8003af2 <_free_r+0x2e>
 8003ae4:	6063      	str	r3, [r4, #4]
 8003ae6:	6014      	str	r4, [r2, #0]
 8003ae8:	4628      	mov	r0, r5
 8003aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aee:	f000 b8c5 	b.w	8003c7c <__malloc_unlock>
 8003af2:	42a3      	cmp	r3, r4
 8003af4:	d90a      	bls.n	8003b0c <_free_r+0x48>
 8003af6:	6821      	ldr	r1, [r4, #0]
 8003af8:	1862      	adds	r2, r4, r1
 8003afa:	4293      	cmp	r3, r2
 8003afc:	bf01      	itttt	eq
 8003afe:	681a      	ldreq	r2, [r3, #0]
 8003b00:	685b      	ldreq	r3, [r3, #4]
 8003b02:	1852      	addeq	r2, r2, r1
 8003b04:	6022      	streq	r2, [r4, #0]
 8003b06:	6063      	str	r3, [r4, #4]
 8003b08:	6004      	str	r4, [r0, #0]
 8003b0a:	e7ed      	b.n	8003ae8 <_free_r+0x24>
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	b10b      	cbz	r3, 8003b16 <_free_r+0x52>
 8003b12:	42a3      	cmp	r3, r4
 8003b14:	d9fa      	bls.n	8003b0c <_free_r+0x48>
 8003b16:	6811      	ldr	r1, [r2, #0]
 8003b18:	1850      	adds	r0, r2, r1
 8003b1a:	42a0      	cmp	r0, r4
 8003b1c:	d10b      	bne.n	8003b36 <_free_r+0x72>
 8003b1e:	6820      	ldr	r0, [r4, #0]
 8003b20:	4401      	add	r1, r0
 8003b22:	1850      	adds	r0, r2, r1
 8003b24:	4283      	cmp	r3, r0
 8003b26:	6011      	str	r1, [r2, #0]
 8003b28:	d1de      	bne.n	8003ae8 <_free_r+0x24>
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4401      	add	r1, r0
 8003b30:	6011      	str	r1, [r2, #0]
 8003b32:	6053      	str	r3, [r2, #4]
 8003b34:	e7d8      	b.n	8003ae8 <_free_r+0x24>
 8003b36:	d902      	bls.n	8003b3e <_free_r+0x7a>
 8003b38:	230c      	movs	r3, #12
 8003b3a:	602b      	str	r3, [r5, #0]
 8003b3c:	e7d4      	b.n	8003ae8 <_free_r+0x24>
 8003b3e:	6820      	ldr	r0, [r4, #0]
 8003b40:	1821      	adds	r1, r4, r0
 8003b42:	428b      	cmp	r3, r1
 8003b44:	bf01      	itttt	eq
 8003b46:	6819      	ldreq	r1, [r3, #0]
 8003b48:	685b      	ldreq	r3, [r3, #4]
 8003b4a:	1809      	addeq	r1, r1, r0
 8003b4c:	6021      	streq	r1, [r4, #0]
 8003b4e:	6063      	str	r3, [r4, #4]
 8003b50:	6054      	str	r4, [r2, #4]
 8003b52:	e7c9      	b.n	8003ae8 <_free_r+0x24>
 8003b54:	bd38      	pop	{r3, r4, r5, pc}
 8003b56:	bf00      	nop
 8003b58:	20000194 	.word	0x20000194

08003b5c <_malloc_r>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	1ccd      	adds	r5, r1, #3
 8003b60:	f025 0503 	bic.w	r5, r5, #3
 8003b64:	3508      	adds	r5, #8
 8003b66:	2d0c      	cmp	r5, #12
 8003b68:	bf38      	it	cc
 8003b6a:	250c      	movcc	r5, #12
 8003b6c:	2d00      	cmp	r5, #0
 8003b6e:	4606      	mov	r6, r0
 8003b70:	db01      	blt.n	8003b76 <_malloc_r+0x1a>
 8003b72:	42a9      	cmp	r1, r5
 8003b74:	d903      	bls.n	8003b7e <_malloc_r+0x22>
 8003b76:	230c      	movs	r3, #12
 8003b78:	6033      	str	r3, [r6, #0]
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b7e:	f000 f877 	bl	8003c70 <__malloc_lock>
 8003b82:	4921      	ldr	r1, [pc, #132]	; (8003c08 <_malloc_r+0xac>)
 8003b84:	680a      	ldr	r2, [r1, #0]
 8003b86:	4614      	mov	r4, r2
 8003b88:	b99c      	cbnz	r4, 8003bb2 <_malloc_r+0x56>
 8003b8a:	4f20      	ldr	r7, [pc, #128]	; (8003c0c <_malloc_r+0xb0>)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	b923      	cbnz	r3, 8003b9a <_malloc_r+0x3e>
 8003b90:	4621      	mov	r1, r4
 8003b92:	4630      	mov	r0, r6
 8003b94:	f000 f83c 	bl	8003c10 <_sbrk_r>
 8003b98:	6038      	str	r0, [r7, #0]
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	f000 f837 	bl	8003c10 <_sbrk_r>
 8003ba2:	1c43      	adds	r3, r0, #1
 8003ba4:	d123      	bne.n	8003bee <_malloc_r+0x92>
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	4630      	mov	r0, r6
 8003baa:	6033      	str	r3, [r6, #0]
 8003bac:	f000 f866 	bl	8003c7c <__malloc_unlock>
 8003bb0:	e7e3      	b.n	8003b7a <_malloc_r+0x1e>
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	1b5b      	subs	r3, r3, r5
 8003bb6:	d417      	bmi.n	8003be8 <_malloc_r+0x8c>
 8003bb8:	2b0b      	cmp	r3, #11
 8003bba:	d903      	bls.n	8003bc4 <_malloc_r+0x68>
 8003bbc:	6023      	str	r3, [r4, #0]
 8003bbe:	441c      	add	r4, r3
 8003bc0:	6025      	str	r5, [r4, #0]
 8003bc2:	e004      	b.n	8003bce <_malloc_r+0x72>
 8003bc4:	6863      	ldr	r3, [r4, #4]
 8003bc6:	42a2      	cmp	r2, r4
 8003bc8:	bf0c      	ite	eq
 8003bca:	600b      	streq	r3, [r1, #0]
 8003bcc:	6053      	strne	r3, [r2, #4]
 8003bce:	4630      	mov	r0, r6
 8003bd0:	f000 f854 	bl	8003c7c <__malloc_unlock>
 8003bd4:	f104 000b 	add.w	r0, r4, #11
 8003bd8:	1d23      	adds	r3, r4, #4
 8003bda:	f020 0007 	bic.w	r0, r0, #7
 8003bde:	1ac2      	subs	r2, r0, r3
 8003be0:	d0cc      	beq.n	8003b7c <_malloc_r+0x20>
 8003be2:	1a1b      	subs	r3, r3, r0
 8003be4:	50a3      	str	r3, [r4, r2]
 8003be6:	e7c9      	b.n	8003b7c <_malloc_r+0x20>
 8003be8:	4622      	mov	r2, r4
 8003bea:	6864      	ldr	r4, [r4, #4]
 8003bec:	e7cc      	b.n	8003b88 <_malloc_r+0x2c>
 8003bee:	1cc4      	adds	r4, r0, #3
 8003bf0:	f024 0403 	bic.w	r4, r4, #3
 8003bf4:	42a0      	cmp	r0, r4
 8003bf6:	d0e3      	beq.n	8003bc0 <_malloc_r+0x64>
 8003bf8:	1a21      	subs	r1, r4, r0
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	f000 f808 	bl	8003c10 <_sbrk_r>
 8003c00:	3001      	adds	r0, #1
 8003c02:	d1dd      	bne.n	8003bc0 <_malloc_r+0x64>
 8003c04:	e7cf      	b.n	8003ba6 <_malloc_r+0x4a>
 8003c06:	bf00      	nop
 8003c08:	20000194 	.word	0x20000194
 8003c0c:	20000198 	.word	0x20000198

08003c10 <_sbrk_r>:
 8003c10:	b538      	push	{r3, r4, r5, lr}
 8003c12:	2300      	movs	r3, #0
 8003c14:	4d05      	ldr	r5, [pc, #20]	; (8003c2c <_sbrk_r+0x1c>)
 8003c16:	4604      	mov	r4, r0
 8003c18:	4608      	mov	r0, r1
 8003c1a:	602b      	str	r3, [r5, #0]
 8003c1c:	f7fd fe46 	bl	80018ac <_sbrk>
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	d102      	bne.n	8003c2a <_sbrk_r+0x1a>
 8003c24:	682b      	ldr	r3, [r5, #0]
 8003c26:	b103      	cbz	r3, 8003c2a <_sbrk_r+0x1a>
 8003c28:	6023      	str	r3, [r4, #0]
 8003c2a:	bd38      	pop	{r3, r4, r5, pc}
 8003c2c:	20000308 	.word	0x20000308

08003c30 <siprintf>:
 8003c30:	b40e      	push	{r1, r2, r3}
 8003c32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c36:	b500      	push	{lr}
 8003c38:	b09c      	sub	sp, #112	; 0x70
 8003c3a:	ab1d      	add	r3, sp, #116	; 0x74
 8003c3c:	9002      	str	r0, [sp, #8]
 8003c3e:	9006      	str	r0, [sp, #24]
 8003c40:	9107      	str	r1, [sp, #28]
 8003c42:	9104      	str	r1, [sp, #16]
 8003c44:	4808      	ldr	r0, [pc, #32]	; (8003c68 <siprintf+0x38>)
 8003c46:	4909      	ldr	r1, [pc, #36]	; (8003c6c <siprintf+0x3c>)
 8003c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c4c:	9105      	str	r1, [sp, #20]
 8003c4e:	6800      	ldr	r0, [r0, #0]
 8003c50:	a902      	add	r1, sp, #8
 8003c52:	9301      	str	r3, [sp, #4]
 8003c54:	f000 f874 	bl	8003d40 <_svfiprintf_r>
 8003c58:	2200      	movs	r2, #0
 8003c5a:	9b02      	ldr	r3, [sp, #8]
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	b01c      	add	sp, #112	; 0x70
 8003c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c64:	b003      	add	sp, #12
 8003c66:	4770      	bx	lr
 8003c68:	20000098 	.word	0x20000098
 8003c6c:	ffff0208 	.word	0xffff0208

08003c70 <__malloc_lock>:
 8003c70:	4801      	ldr	r0, [pc, #4]	; (8003c78 <__malloc_lock+0x8>)
 8003c72:	f000 bafb 	b.w	800426c <__retarget_lock_acquire_recursive>
 8003c76:	bf00      	nop
 8003c78:	20000310 	.word	0x20000310

08003c7c <__malloc_unlock>:
 8003c7c:	4801      	ldr	r0, [pc, #4]	; (8003c84 <__malloc_unlock+0x8>)
 8003c7e:	f000 baf6 	b.w	800426e <__retarget_lock_release_recursive>
 8003c82:	bf00      	nop
 8003c84:	20000310 	.word	0x20000310

08003c88 <__ssputs_r>:
 8003c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c8c:	688e      	ldr	r6, [r1, #8]
 8003c8e:	4682      	mov	sl, r0
 8003c90:	429e      	cmp	r6, r3
 8003c92:	460c      	mov	r4, r1
 8003c94:	4690      	mov	r8, r2
 8003c96:	461f      	mov	r7, r3
 8003c98:	d838      	bhi.n	8003d0c <__ssputs_r+0x84>
 8003c9a:	898a      	ldrh	r2, [r1, #12]
 8003c9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ca0:	d032      	beq.n	8003d08 <__ssputs_r+0x80>
 8003ca2:	6825      	ldr	r5, [r4, #0]
 8003ca4:	6909      	ldr	r1, [r1, #16]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	eba5 0901 	sub.w	r9, r5, r1
 8003cac:	6965      	ldr	r5, [r4, #20]
 8003cae:	444b      	add	r3, r9
 8003cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cb8:	106d      	asrs	r5, r5, #1
 8003cba:	429d      	cmp	r5, r3
 8003cbc:	bf38      	it	cc
 8003cbe:	461d      	movcc	r5, r3
 8003cc0:	0553      	lsls	r3, r2, #21
 8003cc2:	d531      	bpl.n	8003d28 <__ssputs_r+0xa0>
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	f7ff ff49 	bl	8003b5c <_malloc_r>
 8003cca:	4606      	mov	r6, r0
 8003ccc:	b950      	cbnz	r0, 8003ce4 <__ssputs_r+0x5c>
 8003cce:	230c      	movs	r3, #12
 8003cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd4:	f8ca 3000 	str.w	r3, [sl]
 8003cd8:	89a3      	ldrh	r3, [r4, #12]
 8003cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cde:	81a3      	strh	r3, [r4, #12]
 8003ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce4:	464a      	mov	r2, r9
 8003ce6:	6921      	ldr	r1, [r4, #16]
 8003ce8:	f000 fad0 	bl	800428c <memcpy>
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf6:	81a3      	strh	r3, [r4, #12]
 8003cf8:	6126      	str	r6, [r4, #16]
 8003cfa:	444e      	add	r6, r9
 8003cfc:	6026      	str	r6, [r4, #0]
 8003cfe:	463e      	mov	r6, r7
 8003d00:	6165      	str	r5, [r4, #20]
 8003d02:	eba5 0509 	sub.w	r5, r5, r9
 8003d06:	60a5      	str	r5, [r4, #8]
 8003d08:	42be      	cmp	r6, r7
 8003d0a:	d900      	bls.n	8003d0e <__ssputs_r+0x86>
 8003d0c:	463e      	mov	r6, r7
 8003d0e:	4632      	mov	r2, r6
 8003d10:	4641      	mov	r1, r8
 8003d12:	6820      	ldr	r0, [r4, #0]
 8003d14:	f000 fac8 	bl	80042a8 <memmove>
 8003d18:	68a3      	ldr	r3, [r4, #8]
 8003d1a:	6822      	ldr	r2, [r4, #0]
 8003d1c:	1b9b      	subs	r3, r3, r6
 8003d1e:	4432      	add	r2, r6
 8003d20:	2000      	movs	r0, #0
 8003d22:	60a3      	str	r3, [r4, #8]
 8003d24:	6022      	str	r2, [r4, #0]
 8003d26:	e7db      	b.n	8003ce0 <__ssputs_r+0x58>
 8003d28:	462a      	mov	r2, r5
 8003d2a:	f000 fad7 	bl	80042dc <_realloc_r>
 8003d2e:	4606      	mov	r6, r0
 8003d30:	2800      	cmp	r0, #0
 8003d32:	d1e1      	bne.n	8003cf8 <__ssputs_r+0x70>
 8003d34:	4650      	mov	r0, sl
 8003d36:	6921      	ldr	r1, [r4, #16]
 8003d38:	f7ff fec4 	bl	8003ac4 <_free_r>
 8003d3c:	e7c7      	b.n	8003cce <__ssputs_r+0x46>
	...

08003d40 <_svfiprintf_r>:
 8003d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d44:	4698      	mov	r8, r3
 8003d46:	898b      	ldrh	r3, [r1, #12]
 8003d48:	4607      	mov	r7, r0
 8003d4a:	061b      	lsls	r3, r3, #24
 8003d4c:	460d      	mov	r5, r1
 8003d4e:	4614      	mov	r4, r2
 8003d50:	b09d      	sub	sp, #116	; 0x74
 8003d52:	d50e      	bpl.n	8003d72 <_svfiprintf_r+0x32>
 8003d54:	690b      	ldr	r3, [r1, #16]
 8003d56:	b963      	cbnz	r3, 8003d72 <_svfiprintf_r+0x32>
 8003d58:	2140      	movs	r1, #64	; 0x40
 8003d5a:	f7ff feff 	bl	8003b5c <_malloc_r>
 8003d5e:	6028      	str	r0, [r5, #0]
 8003d60:	6128      	str	r0, [r5, #16]
 8003d62:	b920      	cbnz	r0, 8003d6e <_svfiprintf_r+0x2e>
 8003d64:	230c      	movs	r3, #12
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6c:	e0d1      	b.n	8003f12 <_svfiprintf_r+0x1d2>
 8003d6e:	2340      	movs	r3, #64	; 0x40
 8003d70:	616b      	str	r3, [r5, #20]
 8003d72:	2300      	movs	r3, #0
 8003d74:	9309      	str	r3, [sp, #36]	; 0x24
 8003d76:	2320      	movs	r3, #32
 8003d78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d7c:	2330      	movs	r3, #48	; 0x30
 8003d7e:	f04f 0901 	mov.w	r9, #1
 8003d82:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003f2c <_svfiprintf_r+0x1ec>
 8003d8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d8e:	4623      	mov	r3, r4
 8003d90:	469a      	mov	sl, r3
 8003d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d96:	b10a      	cbz	r2, 8003d9c <_svfiprintf_r+0x5c>
 8003d98:	2a25      	cmp	r2, #37	; 0x25
 8003d9a:	d1f9      	bne.n	8003d90 <_svfiprintf_r+0x50>
 8003d9c:	ebba 0b04 	subs.w	fp, sl, r4
 8003da0:	d00b      	beq.n	8003dba <_svfiprintf_r+0x7a>
 8003da2:	465b      	mov	r3, fp
 8003da4:	4622      	mov	r2, r4
 8003da6:	4629      	mov	r1, r5
 8003da8:	4638      	mov	r0, r7
 8003daa:	f7ff ff6d 	bl	8003c88 <__ssputs_r>
 8003dae:	3001      	adds	r0, #1
 8003db0:	f000 80aa 	beq.w	8003f08 <_svfiprintf_r+0x1c8>
 8003db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003db6:	445a      	add	r2, fp
 8003db8:	9209      	str	r2, [sp, #36]	; 0x24
 8003dba:	f89a 3000 	ldrb.w	r3, [sl]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 80a2 	beq.w	8003f08 <_svfiprintf_r+0x1c8>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dce:	f10a 0a01 	add.w	sl, sl, #1
 8003dd2:	9304      	str	r3, [sp, #16]
 8003dd4:	9307      	str	r3, [sp, #28]
 8003dd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dda:	931a      	str	r3, [sp, #104]	; 0x68
 8003ddc:	4654      	mov	r4, sl
 8003dde:	2205      	movs	r2, #5
 8003de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003de4:	4851      	ldr	r0, [pc, #324]	; (8003f2c <_svfiprintf_r+0x1ec>)
 8003de6:	f000 fa43 	bl	8004270 <memchr>
 8003dea:	9a04      	ldr	r2, [sp, #16]
 8003dec:	b9d8      	cbnz	r0, 8003e26 <_svfiprintf_r+0xe6>
 8003dee:	06d0      	lsls	r0, r2, #27
 8003df0:	bf44      	itt	mi
 8003df2:	2320      	movmi	r3, #32
 8003df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003df8:	0711      	lsls	r1, r2, #28
 8003dfa:	bf44      	itt	mi
 8003dfc:	232b      	movmi	r3, #43	; 0x2b
 8003dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e02:	f89a 3000 	ldrb.w	r3, [sl]
 8003e06:	2b2a      	cmp	r3, #42	; 0x2a
 8003e08:	d015      	beq.n	8003e36 <_svfiprintf_r+0xf6>
 8003e0a:	4654      	mov	r4, sl
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	f04f 0c0a 	mov.w	ip, #10
 8003e12:	9a07      	ldr	r2, [sp, #28]
 8003e14:	4621      	mov	r1, r4
 8003e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e1a:	3b30      	subs	r3, #48	; 0x30
 8003e1c:	2b09      	cmp	r3, #9
 8003e1e:	d94e      	bls.n	8003ebe <_svfiprintf_r+0x17e>
 8003e20:	b1b0      	cbz	r0, 8003e50 <_svfiprintf_r+0x110>
 8003e22:	9207      	str	r2, [sp, #28]
 8003e24:	e014      	b.n	8003e50 <_svfiprintf_r+0x110>
 8003e26:	eba0 0308 	sub.w	r3, r0, r8
 8003e2a:	fa09 f303 	lsl.w	r3, r9, r3
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	46a2      	mov	sl, r4
 8003e32:	9304      	str	r3, [sp, #16]
 8003e34:	e7d2      	b.n	8003ddc <_svfiprintf_r+0x9c>
 8003e36:	9b03      	ldr	r3, [sp, #12]
 8003e38:	1d19      	adds	r1, r3, #4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	9103      	str	r1, [sp, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bfbb      	ittet	lt
 8003e42:	425b      	neglt	r3, r3
 8003e44:	f042 0202 	orrlt.w	r2, r2, #2
 8003e48:	9307      	strge	r3, [sp, #28]
 8003e4a:	9307      	strlt	r3, [sp, #28]
 8003e4c:	bfb8      	it	lt
 8003e4e:	9204      	strlt	r2, [sp, #16]
 8003e50:	7823      	ldrb	r3, [r4, #0]
 8003e52:	2b2e      	cmp	r3, #46	; 0x2e
 8003e54:	d10c      	bne.n	8003e70 <_svfiprintf_r+0x130>
 8003e56:	7863      	ldrb	r3, [r4, #1]
 8003e58:	2b2a      	cmp	r3, #42	; 0x2a
 8003e5a:	d135      	bne.n	8003ec8 <_svfiprintf_r+0x188>
 8003e5c:	9b03      	ldr	r3, [sp, #12]
 8003e5e:	3402      	adds	r4, #2
 8003e60:	1d1a      	adds	r2, r3, #4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	9203      	str	r2, [sp, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	bfb8      	it	lt
 8003e6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e6e:	9305      	str	r3, [sp, #20]
 8003e70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f3c <_svfiprintf_r+0x1fc>
 8003e74:	2203      	movs	r2, #3
 8003e76:	4650      	mov	r0, sl
 8003e78:	7821      	ldrb	r1, [r4, #0]
 8003e7a:	f000 f9f9 	bl	8004270 <memchr>
 8003e7e:	b140      	cbz	r0, 8003e92 <_svfiprintf_r+0x152>
 8003e80:	2340      	movs	r3, #64	; 0x40
 8003e82:	eba0 000a 	sub.w	r0, r0, sl
 8003e86:	fa03 f000 	lsl.w	r0, r3, r0
 8003e8a:	9b04      	ldr	r3, [sp, #16]
 8003e8c:	3401      	adds	r4, #1
 8003e8e:	4303      	orrs	r3, r0
 8003e90:	9304      	str	r3, [sp, #16]
 8003e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e96:	2206      	movs	r2, #6
 8003e98:	4825      	ldr	r0, [pc, #148]	; (8003f30 <_svfiprintf_r+0x1f0>)
 8003e9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e9e:	f000 f9e7 	bl	8004270 <memchr>
 8003ea2:	2800      	cmp	r0, #0
 8003ea4:	d038      	beq.n	8003f18 <_svfiprintf_r+0x1d8>
 8003ea6:	4b23      	ldr	r3, [pc, #140]	; (8003f34 <_svfiprintf_r+0x1f4>)
 8003ea8:	bb1b      	cbnz	r3, 8003ef2 <_svfiprintf_r+0x1b2>
 8003eaa:	9b03      	ldr	r3, [sp, #12]
 8003eac:	3307      	adds	r3, #7
 8003eae:	f023 0307 	bic.w	r3, r3, #7
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	9303      	str	r3, [sp, #12]
 8003eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eb8:	4433      	add	r3, r6
 8003eba:	9309      	str	r3, [sp, #36]	; 0x24
 8003ebc:	e767      	b.n	8003d8e <_svfiprintf_r+0x4e>
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ec6:	e7a5      	b.n	8003e14 <_svfiprintf_r+0xd4>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f04f 0c0a 	mov.w	ip, #10
 8003ece:	4619      	mov	r1, r3
 8003ed0:	3401      	adds	r4, #1
 8003ed2:	9305      	str	r3, [sp, #20]
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eda:	3a30      	subs	r2, #48	; 0x30
 8003edc:	2a09      	cmp	r2, #9
 8003ede:	d903      	bls.n	8003ee8 <_svfiprintf_r+0x1a8>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0c5      	beq.n	8003e70 <_svfiprintf_r+0x130>
 8003ee4:	9105      	str	r1, [sp, #20]
 8003ee6:	e7c3      	b.n	8003e70 <_svfiprintf_r+0x130>
 8003ee8:	4604      	mov	r4, r0
 8003eea:	2301      	movs	r3, #1
 8003eec:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ef0:	e7f0      	b.n	8003ed4 <_svfiprintf_r+0x194>
 8003ef2:	ab03      	add	r3, sp, #12
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	462a      	mov	r2, r5
 8003ef8:	4638      	mov	r0, r7
 8003efa:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <_svfiprintf_r+0x1f8>)
 8003efc:	a904      	add	r1, sp, #16
 8003efe:	f3af 8000 	nop.w
 8003f02:	1c42      	adds	r2, r0, #1
 8003f04:	4606      	mov	r6, r0
 8003f06:	d1d6      	bne.n	8003eb6 <_svfiprintf_r+0x176>
 8003f08:	89ab      	ldrh	r3, [r5, #12]
 8003f0a:	065b      	lsls	r3, r3, #25
 8003f0c:	f53f af2c 	bmi.w	8003d68 <_svfiprintf_r+0x28>
 8003f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f12:	b01d      	add	sp, #116	; 0x74
 8003f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f18:	ab03      	add	r3, sp, #12
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	462a      	mov	r2, r5
 8003f1e:	4638      	mov	r0, r7
 8003f20:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <_svfiprintf_r+0x1f8>)
 8003f22:	a904      	add	r1, sp, #16
 8003f24:	f000 f87c 	bl	8004020 <_printf_i>
 8003f28:	e7eb      	b.n	8003f02 <_svfiprintf_r+0x1c2>
 8003f2a:	bf00      	nop
 8003f2c:	08004636 	.word	0x08004636
 8003f30:	08004640 	.word	0x08004640
 8003f34:	00000000 	.word	0x00000000
 8003f38:	08003c89 	.word	0x08003c89
 8003f3c:	0800463c 	.word	0x0800463c

08003f40 <_printf_common>:
 8003f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f44:	4616      	mov	r6, r2
 8003f46:	4699      	mov	r9, r3
 8003f48:	688a      	ldr	r2, [r1, #8]
 8003f4a:	690b      	ldr	r3, [r1, #16]
 8003f4c:	4607      	mov	r7, r0
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	bfb8      	it	lt
 8003f52:	4613      	movlt	r3, r2
 8003f54:	6033      	str	r3, [r6, #0]
 8003f56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f60:	b10a      	cbz	r2, 8003f66 <_printf_common+0x26>
 8003f62:	3301      	adds	r3, #1
 8003f64:	6033      	str	r3, [r6, #0]
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	0699      	lsls	r1, r3, #26
 8003f6a:	bf42      	ittt	mi
 8003f6c:	6833      	ldrmi	r3, [r6, #0]
 8003f6e:	3302      	addmi	r3, #2
 8003f70:	6033      	strmi	r3, [r6, #0]
 8003f72:	6825      	ldr	r5, [r4, #0]
 8003f74:	f015 0506 	ands.w	r5, r5, #6
 8003f78:	d106      	bne.n	8003f88 <_printf_common+0x48>
 8003f7a:	f104 0a19 	add.w	sl, r4, #25
 8003f7e:	68e3      	ldr	r3, [r4, #12]
 8003f80:	6832      	ldr	r2, [r6, #0]
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	42ab      	cmp	r3, r5
 8003f86:	dc28      	bgt.n	8003fda <_printf_common+0x9a>
 8003f88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f8c:	1e13      	subs	r3, r2, #0
 8003f8e:	6822      	ldr	r2, [r4, #0]
 8003f90:	bf18      	it	ne
 8003f92:	2301      	movne	r3, #1
 8003f94:	0692      	lsls	r2, r2, #26
 8003f96:	d42d      	bmi.n	8003ff4 <_printf_common+0xb4>
 8003f98:	4649      	mov	r1, r9
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fa0:	47c0      	blx	r8
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	d020      	beq.n	8003fe8 <_printf_common+0xa8>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	68e5      	ldr	r5, [r4, #12]
 8003faa:	f003 0306 	and.w	r3, r3, #6
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	bf18      	it	ne
 8003fb2:	2500      	movne	r5, #0
 8003fb4:	6832      	ldr	r2, [r6, #0]
 8003fb6:	f04f 0600 	mov.w	r6, #0
 8003fba:	68a3      	ldr	r3, [r4, #8]
 8003fbc:	bf08      	it	eq
 8003fbe:	1aad      	subeq	r5, r5, r2
 8003fc0:	6922      	ldr	r2, [r4, #16]
 8003fc2:	bf08      	it	eq
 8003fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	bfc4      	itt	gt
 8003fcc:	1a9b      	subgt	r3, r3, r2
 8003fce:	18ed      	addgt	r5, r5, r3
 8003fd0:	341a      	adds	r4, #26
 8003fd2:	42b5      	cmp	r5, r6
 8003fd4:	d11a      	bne.n	800400c <_printf_common+0xcc>
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	e008      	b.n	8003fec <_printf_common+0xac>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	4652      	mov	r2, sl
 8003fde:	4649      	mov	r1, r9
 8003fe0:	4638      	mov	r0, r7
 8003fe2:	47c0      	blx	r8
 8003fe4:	3001      	adds	r0, #1
 8003fe6:	d103      	bne.n	8003ff0 <_printf_common+0xb0>
 8003fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff0:	3501      	adds	r5, #1
 8003ff2:	e7c4      	b.n	8003f7e <_printf_common+0x3e>
 8003ff4:	2030      	movs	r0, #48	; 0x30
 8003ff6:	18e1      	adds	r1, r4, r3
 8003ff8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004002:	4422      	add	r2, r4
 8004004:	3302      	adds	r3, #2
 8004006:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800400a:	e7c5      	b.n	8003f98 <_printf_common+0x58>
 800400c:	2301      	movs	r3, #1
 800400e:	4622      	mov	r2, r4
 8004010:	4649      	mov	r1, r9
 8004012:	4638      	mov	r0, r7
 8004014:	47c0      	blx	r8
 8004016:	3001      	adds	r0, #1
 8004018:	d0e6      	beq.n	8003fe8 <_printf_common+0xa8>
 800401a:	3601      	adds	r6, #1
 800401c:	e7d9      	b.n	8003fd2 <_printf_common+0x92>
	...

08004020 <_printf_i>:
 8004020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004024:	460c      	mov	r4, r1
 8004026:	7e27      	ldrb	r7, [r4, #24]
 8004028:	4691      	mov	r9, r2
 800402a:	2f78      	cmp	r7, #120	; 0x78
 800402c:	4680      	mov	r8, r0
 800402e:	469a      	mov	sl, r3
 8004030:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004032:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004036:	d807      	bhi.n	8004048 <_printf_i+0x28>
 8004038:	2f62      	cmp	r7, #98	; 0x62
 800403a:	d80a      	bhi.n	8004052 <_printf_i+0x32>
 800403c:	2f00      	cmp	r7, #0
 800403e:	f000 80d9 	beq.w	80041f4 <_printf_i+0x1d4>
 8004042:	2f58      	cmp	r7, #88	; 0x58
 8004044:	f000 80a4 	beq.w	8004190 <_printf_i+0x170>
 8004048:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800404c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004050:	e03a      	b.n	80040c8 <_printf_i+0xa8>
 8004052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004056:	2b15      	cmp	r3, #21
 8004058:	d8f6      	bhi.n	8004048 <_printf_i+0x28>
 800405a:	a001      	add	r0, pc, #4	; (adr r0, 8004060 <_printf_i+0x40>)
 800405c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004060:	080040b9 	.word	0x080040b9
 8004064:	080040cd 	.word	0x080040cd
 8004068:	08004049 	.word	0x08004049
 800406c:	08004049 	.word	0x08004049
 8004070:	08004049 	.word	0x08004049
 8004074:	08004049 	.word	0x08004049
 8004078:	080040cd 	.word	0x080040cd
 800407c:	08004049 	.word	0x08004049
 8004080:	08004049 	.word	0x08004049
 8004084:	08004049 	.word	0x08004049
 8004088:	08004049 	.word	0x08004049
 800408c:	080041db 	.word	0x080041db
 8004090:	080040fd 	.word	0x080040fd
 8004094:	080041bd 	.word	0x080041bd
 8004098:	08004049 	.word	0x08004049
 800409c:	08004049 	.word	0x08004049
 80040a0:	080041fd 	.word	0x080041fd
 80040a4:	08004049 	.word	0x08004049
 80040a8:	080040fd 	.word	0x080040fd
 80040ac:	08004049 	.word	0x08004049
 80040b0:	08004049 	.word	0x08004049
 80040b4:	080041c5 	.word	0x080041c5
 80040b8:	680b      	ldr	r3, [r1, #0]
 80040ba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040be:	1d1a      	adds	r2, r3, #4
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	600a      	str	r2, [r1, #0]
 80040c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0a4      	b.n	8004216 <_printf_i+0x1f6>
 80040cc:	6825      	ldr	r5, [r4, #0]
 80040ce:	6808      	ldr	r0, [r1, #0]
 80040d0:	062e      	lsls	r6, r5, #24
 80040d2:	f100 0304 	add.w	r3, r0, #4
 80040d6:	d50a      	bpl.n	80040ee <_printf_i+0xce>
 80040d8:	6805      	ldr	r5, [r0, #0]
 80040da:	600b      	str	r3, [r1, #0]
 80040dc:	2d00      	cmp	r5, #0
 80040de:	da03      	bge.n	80040e8 <_printf_i+0xc8>
 80040e0:	232d      	movs	r3, #45	; 0x2d
 80040e2:	426d      	negs	r5, r5
 80040e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e8:	230a      	movs	r3, #10
 80040ea:	485e      	ldr	r0, [pc, #376]	; (8004264 <_printf_i+0x244>)
 80040ec:	e019      	b.n	8004122 <_printf_i+0x102>
 80040ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80040f2:	6805      	ldr	r5, [r0, #0]
 80040f4:	600b      	str	r3, [r1, #0]
 80040f6:	bf18      	it	ne
 80040f8:	b22d      	sxthne	r5, r5
 80040fa:	e7ef      	b.n	80040dc <_printf_i+0xbc>
 80040fc:	680b      	ldr	r3, [r1, #0]
 80040fe:	6825      	ldr	r5, [r4, #0]
 8004100:	1d18      	adds	r0, r3, #4
 8004102:	6008      	str	r0, [r1, #0]
 8004104:	0628      	lsls	r0, r5, #24
 8004106:	d501      	bpl.n	800410c <_printf_i+0xec>
 8004108:	681d      	ldr	r5, [r3, #0]
 800410a:	e002      	b.n	8004112 <_printf_i+0xf2>
 800410c:	0669      	lsls	r1, r5, #25
 800410e:	d5fb      	bpl.n	8004108 <_printf_i+0xe8>
 8004110:	881d      	ldrh	r5, [r3, #0]
 8004112:	2f6f      	cmp	r7, #111	; 0x6f
 8004114:	bf0c      	ite	eq
 8004116:	2308      	moveq	r3, #8
 8004118:	230a      	movne	r3, #10
 800411a:	4852      	ldr	r0, [pc, #328]	; (8004264 <_printf_i+0x244>)
 800411c:	2100      	movs	r1, #0
 800411e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004122:	6866      	ldr	r6, [r4, #4]
 8004124:	2e00      	cmp	r6, #0
 8004126:	bfa8      	it	ge
 8004128:	6821      	ldrge	r1, [r4, #0]
 800412a:	60a6      	str	r6, [r4, #8]
 800412c:	bfa4      	itt	ge
 800412e:	f021 0104 	bicge.w	r1, r1, #4
 8004132:	6021      	strge	r1, [r4, #0]
 8004134:	b90d      	cbnz	r5, 800413a <_printf_i+0x11a>
 8004136:	2e00      	cmp	r6, #0
 8004138:	d04d      	beq.n	80041d6 <_printf_i+0x1b6>
 800413a:	4616      	mov	r6, r2
 800413c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004140:	fb03 5711 	mls	r7, r3, r1, r5
 8004144:	5dc7      	ldrb	r7, [r0, r7]
 8004146:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800414a:	462f      	mov	r7, r5
 800414c:	42bb      	cmp	r3, r7
 800414e:	460d      	mov	r5, r1
 8004150:	d9f4      	bls.n	800413c <_printf_i+0x11c>
 8004152:	2b08      	cmp	r3, #8
 8004154:	d10b      	bne.n	800416e <_printf_i+0x14e>
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	07df      	lsls	r7, r3, #31
 800415a:	d508      	bpl.n	800416e <_printf_i+0x14e>
 800415c:	6923      	ldr	r3, [r4, #16]
 800415e:	6861      	ldr	r1, [r4, #4]
 8004160:	4299      	cmp	r1, r3
 8004162:	bfde      	ittt	le
 8004164:	2330      	movle	r3, #48	; 0x30
 8004166:	f806 3c01 	strble.w	r3, [r6, #-1]
 800416a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800416e:	1b92      	subs	r2, r2, r6
 8004170:	6122      	str	r2, [r4, #16]
 8004172:	464b      	mov	r3, r9
 8004174:	4621      	mov	r1, r4
 8004176:	4640      	mov	r0, r8
 8004178:	f8cd a000 	str.w	sl, [sp]
 800417c:	aa03      	add	r2, sp, #12
 800417e:	f7ff fedf 	bl	8003f40 <_printf_common>
 8004182:	3001      	adds	r0, #1
 8004184:	d14c      	bne.n	8004220 <_printf_i+0x200>
 8004186:	f04f 30ff 	mov.w	r0, #4294967295
 800418a:	b004      	add	sp, #16
 800418c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004190:	4834      	ldr	r0, [pc, #208]	; (8004264 <_printf_i+0x244>)
 8004192:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004196:	680e      	ldr	r6, [r1, #0]
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	f856 5b04 	ldr.w	r5, [r6], #4
 800419e:	061f      	lsls	r7, r3, #24
 80041a0:	600e      	str	r6, [r1, #0]
 80041a2:	d514      	bpl.n	80041ce <_printf_i+0x1ae>
 80041a4:	07d9      	lsls	r1, r3, #31
 80041a6:	bf44      	itt	mi
 80041a8:	f043 0320 	orrmi.w	r3, r3, #32
 80041ac:	6023      	strmi	r3, [r4, #0]
 80041ae:	b91d      	cbnz	r5, 80041b8 <_printf_i+0x198>
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	f023 0320 	bic.w	r3, r3, #32
 80041b6:	6023      	str	r3, [r4, #0]
 80041b8:	2310      	movs	r3, #16
 80041ba:	e7af      	b.n	800411c <_printf_i+0xfc>
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	f043 0320 	orr.w	r3, r3, #32
 80041c2:	6023      	str	r3, [r4, #0]
 80041c4:	2378      	movs	r3, #120	; 0x78
 80041c6:	4828      	ldr	r0, [pc, #160]	; (8004268 <_printf_i+0x248>)
 80041c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041cc:	e7e3      	b.n	8004196 <_printf_i+0x176>
 80041ce:	065e      	lsls	r6, r3, #25
 80041d0:	bf48      	it	mi
 80041d2:	b2ad      	uxthmi	r5, r5
 80041d4:	e7e6      	b.n	80041a4 <_printf_i+0x184>
 80041d6:	4616      	mov	r6, r2
 80041d8:	e7bb      	b.n	8004152 <_printf_i+0x132>
 80041da:	680b      	ldr	r3, [r1, #0]
 80041dc:	6826      	ldr	r6, [r4, #0]
 80041de:	1d1d      	adds	r5, r3, #4
 80041e0:	6960      	ldr	r0, [r4, #20]
 80041e2:	600d      	str	r5, [r1, #0]
 80041e4:	0635      	lsls	r5, r6, #24
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	d501      	bpl.n	80041ee <_printf_i+0x1ce>
 80041ea:	6018      	str	r0, [r3, #0]
 80041ec:	e002      	b.n	80041f4 <_printf_i+0x1d4>
 80041ee:	0671      	lsls	r1, r6, #25
 80041f0:	d5fb      	bpl.n	80041ea <_printf_i+0x1ca>
 80041f2:	8018      	strh	r0, [r3, #0]
 80041f4:	2300      	movs	r3, #0
 80041f6:	4616      	mov	r6, r2
 80041f8:	6123      	str	r3, [r4, #16]
 80041fa:	e7ba      	b.n	8004172 <_printf_i+0x152>
 80041fc:	680b      	ldr	r3, [r1, #0]
 80041fe:	1d1a      	adds	r2, r3, #4
 8004200:	600a      	str	r2, [r1, #0]
 8004202:	681e      	ldr	r6, [r3, #0]
 8004204:	2100      	movs	r1, #0
 8004206:	4630      	mov	r0, r6
 8004208:	6862      	ldr	r2, [r4, #4]
 800420a:	f000 f831 	bl	8004270 <memchr>
 800420e:	b108      	cbz	r0, 8004214 <_printf_i+0x1f4>
 8004210:	1b80      	subs	r0, r0, r6
 8004212:	6060      	str	r0, [r4, #4]
 8004214:	6863      	ldr	r3, [r4, #4]
 8004216:	6123      	str	r3, [r4, #16]
 8004218:	2300      	movs	r3, #0
 800421a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800421e:	e7a8      	b.n	8004172 <_printf_i+0x152>
 8004220:	4632      	mov	r2, r6
 8004222:	4649      	mov	r1, r9
 8004224:	4640      	mov	r0, r8
 8004226:	6923      	ldr	r3, [r4, #16]
 8004228:	47d0      	blx	sl
 800422a:	3001      	adds	r0, #1
 800422c:	d0ab      	beq.n	8004186 <_printf_i+0x166>
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	079b      	lsls	r3, r3, #30
 8004232:	d413      	bmi.n	800425c <_printf_i+0x23c>
 8004234:	68e0      	ldr	r0, [r4, #12]
 8004236:	9b03      	ldr	r3, [sp, #12]
 8004238:	4298      	cmp	r0, r3
 800423a:	bfb8      	it	lt
 800423c:	4618      	movlt	r0, r3
 800423e:	e7a4      	b.n	800418a <_printf_i+0x16a>
 8004240:	2301      	movs	r3, #1
 8004242:	4632      	mov	r2, r6
 8004244:	4649      	mov	r1, r9
 8004246:	4640      	mov	r0, r8
 8004248:	47d0      	blx	sl
 800424a:	3001      	adds	r0, #1
 800424c:	d09b      	beq.n	8004186 <_printf_i+0x166>
 800424e:	3501      	adds	r5, #1
 8004250:	68e3      	ldr	r3, [r4, #12]
 8004252:	9903      	ldr	r1, [sp, #12]
 8004254:	1a5b      	subs	r3, r3, r1
 8004256:	42ab      	cmp	r3, r5
 8004258:	dcf2      	bgt.n	8004240 <_printf_i+0x220>
 800425a:	e7eb      	b.n	8004234 <_printf_i+0x214>
 800425c:	2500      	movs	r5, #0
 800425e:	f104 0619 	add.w	r6, r4, #25
 8004262:	e7f5      	b.n	8004250 <_printf_i+0x230>
 8004264:	08004647 	.word	0x08004647
 8004268:	08004658 	.word	0x08004658

0800426c <__retarget_lock_acquire_recursive>:
 800426c:	4770      	bx	lr

0800426e <__retarget_lock_release_recursive>:
 800426e:	4770      	bx	lr

08004270 <memchr>:
 8004270:	4603      	mov	r3, r0
 8004272:	b510      	push	{r4, lr}
 8004274:	b2c9      	uxtb	r1, r1
 8004276:	4402      	add	r2, r0
 8004278:	4293      	cmp	r3, r2
 800427a:	4618      	mov	r0, r3
 800427c:	d101      	bne.n	8004282 <memchr+0x12>
 800427e:	2000      	movs	r0, #0
 8004280:	e003      	b.n	800428a <memchr+0x1a>
 8004282:	7804      	ldrb	r4, [r0, #0]
 8004284:	3301      	adds	r3, #1
 8004286:	428c      	cmp	r4, r1
 8004288:	d1f6      	bne.n	8004278 <memchr+0x8>
 800428a:	bd10      	pop	{r4, pc}

0800428c <memcpy>:
 800428c:	440a      	add	r2, r1
 800428e:	4291      	cmp	r1, r2
 8004290:	f100 33ff 	add.w	r3, r0, #4294967295
 8004294:	d100      	bne.n	8004298 <memcpy+0xc>
 8004296:	4770      	bx	lr
 8004298:	b510      	push	{r4, lr}
 800429a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800429e:	4291      	cmp	r1, r2
 80042a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042a4:	d1f9      	bne.n	800429a <memcpy+0xe>
 80042a6:	bd10      	pop	{r4, pc}

080042a8 <memmove>:
 80042a8:	4288      	cmp	r0, r1
 80042aa:	b510      	push	{r4, lr}
 80042ac:	eb01 0402 	add.w	r4, r1, r2
 80042b0:	d902      	bls.n	80042b8 <memmove+0x10>
 80042b2:	4284      	cmp	r4, r0
 80042b4:	4623      	mov	r3, r4
 80042b6:	d807      	bhi.n	80042c8 <memmove+0x20>
 80042b8:	1e43      	subs	r3, r0, #1
 80042ba:	42a1      	cmp	r1, r4
 80042bc:	d008      	beq.n	80042d0 <memmove+0x28>
 80042be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042c6:	e7f8      	b.n	80042ba <memmove+0x12>
 80042c8:	4601      	mov	r1, r0
 80042ca:	4402      	add	r2, r0
 80042cc:	428a      	cmp	r2, r1
 80042ce:	d100      	bne.n	80042d2 <memmove+0x2a>
 80042d0:	bd10      	pop	{r4, pc}
 80042d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042da:	e7f7      	b.n	80042cc <memmove+0x24>

080042dc <_realloc_r>:
 80042dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042de:	4607      	mov	r7, r0
 80042e0:	4614      	mov	r4, r2
 80042e2:	460e      	mov	r6, r1
 80042e4:	b921      	cbnz	r1, 80042f0 <_realloc_r+0x14>
 80042e6:	4611      	mov	r1, r2
 80042e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80042ec:	f7ff bc36 	b.w	8003b5c <_malloc_r>
 80042f0:	b922      	cbnz	r2, 80042fc <_realloc_r+0x20>
 80042f2:	f7ff fbe7 	bl	8003ac4 <_free_r>
 80042f6:	4625      	mov	r5, r4
 80042f8:	4628      	mov	r0, r5
 80042fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042fc:	f000 f814 	bl	8004328 <_malloc_usable_size_r>
 8004300:	42a0      	cmp	r0, r4
 8004302:	d20f      	bcs.n	8004324 <_realloc_r+0x48>
 8004304:	4621      	mov	r1, r4
 8004306:	4638      	mov	r0, r7
 8004308:	f7ff fc28 	bl	8003b5c <_malloc_r>
 800430c:	4605      	mov	r5, r0
 800430e:	2800      	cmp	r0, #0
 8004310:	d0f2      	beq.n	80042f8 <_realloc_r+0x1c>
 8004312:	4631      	mov	r1, r6
 8004314:	4622      	mov	r2, r4
 8004316:	f7ff ffb9 	bl	800428c <memcpy>
 800431a:	4631      	mov	r1, r6
 800431c:	4638      	mov	r0, r7
 800431e:	f7ff fbd1 	bl	8003ac4 <_free_r>
 8004322:	e7e9      	b.n	80042f8 <_realloc_r+0x1c>
 8004324:	4635      	mov	r5, r6
 8004326:	e7e7      	b.n	80042f8 <_realloc_r+0x1c>

08004328 <_malloc_usable_size_r>:
 8004328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800432c:	1f18      	subs	r0, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	bfbc      	itt	lt
 8004332:	580b      	ldrlt	r3, [r1, r0]
 8004334:	18c0      	addlt	r0, r0, r3
 8004336:	4770      	bx	lr

08004338 <_init>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	bf00      	nop
 800433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433e:	bc08      	pop	{r3}
 8004340:	469e      	mov	lr, r3
 8004342:	4770      	bx	lr

08004344 <_fini>:
 8004344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004346:	bf00      	nop
 8004348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434a:	bc08      	pop	{r3}
 800434c:	469e      	mov	lr, r3
 800434e:	4770      	bx	lr
