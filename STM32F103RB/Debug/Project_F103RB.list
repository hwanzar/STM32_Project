
Project_F103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  08004dbc  08004dbc  00014dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050d8  080050d8  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  080050d8  080050d8  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050d8  080050d8  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050d8  080050d8  000150d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050dc  080050dc  000150dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  080050e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000010c  080051ec  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  080051ec  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b9a  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bbc  00000000  00000000  00034ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00037890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00038660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018eaa  00000000  00000000  00039308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011047  00000000  00000000  000521b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b411  00000000  00000000  000631f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee60a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003afc  00000000  00000000  000ee660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000010c 	.word	0x2000010c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004da4 	.word	0x08004da4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000110 	.word	0x20000110
 8000148:	08004da4 	.word	0x08004da4

0800014c <isButtonPressed>:

int TimeOutForKeyPress[4] = { 200, 200, 200, 200 };
int button_flag[4] = {0,0,0,0};


int isButtonPressed(int num){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[num] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[num] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000128 	.word	0x20000128

08000180 <subKeyProcess>:
void subKeyProcess(int num){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	//TODO
	button_flag[num]=1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000128 	.word	0x20000128

080001a0 <getKeyInput>:


void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e06d      	b.n	8000288 <getKeyInput+0xe8>
		KeyReg2[i] = KeyReg1[i];
 80001ac:	4a3a      	ldr	r2, [pc, #232]	; (8000298 <getKeyInput+0xf8>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4939      	ldr	r1, [pc, #228]	; (800029c <getKeyInput+0xfc>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001bc:	4a38      	ldr	r2, [pc, #224]	; (80002a0 <getKeyInput+0x100>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4934      	ldr	r1, [pc, #208]	; (8000298 <getKeyInput+0xf8>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Add your button here
		KeyReg0[i] = HAL_GPIO_ReadPin(port[i], mode[i]);
 80001cc:	4a35      	ldr	r2, [pc, #212]	; (80002a4 <getKeyInput+0x104>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4934      	ldr	r1, [pc, #208]	; (80002a8 <getKeyInput+0x108>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001dc:	4619      	mov	r1, r3
 80001de:	4610      	mov	r0, r2
 80001e0:	f001 ff9c 	bl	800211c <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a2d      	ldr	r2, [pc, #180]	; (80002a0 <getKeyInput+0x100>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001f0:	4a29      	ldr	r2, [pc, #164]	; (8000298 <getKeyInput+0xf8>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4929      	ldr	r1, [pc, #164]	; (80002a0 <getKeyInput+0x100>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d13e      	bne.n	8000282 <getKeyInput+0xe2>
 8000204:	4a24      	ldr	r2, [pc, #144]	; (8000298 <getKeyInput+0xf8>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4923      	ldr	r1, [pc, #140]	; (800029c <getKeyInput+0xfc>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d134      	bne.n	8000282 <getKeyInput+0xe2>
			if (KeyReg2[i] != KeyReg3[i]){
 8000218:	4a20      	ldr	r2, [pc, #128]	; (800029c <getKeyInput+0xfc>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4922      	ldr	r1, [pc, #136]	; (80002ac <getKeyInput+0x10c>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d016      	beq.n	800025a <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 800022c:	4a1b      	ldr	r2, [pc, #108]	; (800029c <getKeyInput+0xfc>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	491d      	ldr	r1, [pc, #116]	; (80002ac <getKeyInput+0x10c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 800023c:	4a1b      	ldr	r2, [pc, #108]	; (80002ac <getKeyInput+0x10c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d11c      	bne.n	8000282 <getKeyInput+0xe2>
					TimeOutForKeyPress[i] = 200;
 8000248:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <getKeyInput+0x110>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	21c8      	movs	r1, #200	; 0xc8
 800024e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f7ff ff94 	bl	8000180 <subKeyProcess>
 8000258:	e013      	b.n	8000282 <getKeyInput+0xe2>
				}
			}

			else{ //press without release
				TimeOutForKeyPress[i]--;
 800025a:	4a15      	ldr	r2, [pc, #84]	; (80002b0 <getKeyInput+0x110>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	1e5a      	subs	r2, r3, #1
 8000264:	4912      	ldr	r1, [pc, #72]	; (80002b0 <getKeyInput+0x110>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 800026c:	4a10      	ldr	r2, [pc, #64]	; (80002b0 <getKeyInput+0x110>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d104      	bne.n	8000282 <getKeyInput+0xe2>
					KeyReg3[i] = NORMAL_STATE;
 8000278:	4a0c      	ldr	r2, [pc, #48]	; (80002ac <getKeyInput+0x10c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2101      	movs	r1, #1
 800027e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 4; i++){
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	3301      	adds	r3, #1
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b03      	cmp	r3, #3
 800028c:	dd8e      	ble.n	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000028 	.word	0x20000028
 800029c:	20000038 	.word	0x20000038
 80002a0:	20000018 	.word	0x20000018
 80002a4:	20000008 	.word	0x20000008
 80002a8:	20000000 	.word	0x20000000
 80002ac:	20000048 	.word	0x20000048
 80002b0:	20000058 	.word	0x20000058

080002b4 <auto_man>:
#include "stdlib.h"

char str[40];

void auto_man()
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1)
 80002b8:	2000      	movs	r0, #0
 80002ba:	f7ff ff47 	bl	800014c <isButtonPressed>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d113      	bne.n	80002ec <auto_man+0x38>
	{
		resetLED();
 80002c4:	f000 fd46 	bl	8000d54 <resetLED>
		//		reset7SEG();
		state = MAN_RG;
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <auto_man+0x3c>)
 80002ca:	2205      	movs	r2, #5
 80002cc:	701a      	strb	r2, [r3, #0]
		onRed1();
 80002ce:	f000 fd5f 	bl	8000d90 <onRed1>
		onGreen2();
 80002d2:	f000 fdb9 	bl	8000e48 <onGreen2>
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Manual: Road 1: Red\r\nRoad 2: Green\r\n"), 200);
 80002d6:	4907      	ldr	r1, [pc, #28]	; (80002f4 <auto_man+0x40>)
 80002d8:	4807      	ldr	r0, [pc, #28]	; (80002f8 <auto_man+0x44>)
 80002da:	f004 f9df 	bl	800469c <siprintf>
 80002de:	4603      	mov	r3, r0
 80002e0:	b29a      	uxth	r2, r3
 80002e2:	23c8      	movs	r3, #200	; 0xc8
 80002e4:	4904      	ldr	r1, [pc, #16]	; (80002f8 <auto_man+0x44>)
 80002e6:	4805      	ldr	r0, [pc, #20]	; (80002fc <auto_man+0x48>)
 80002e8:	f003 fb0c 	bl	8003904 <HAL_UART_Transmit>
	}
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000138 	.word	0x20000138
 80002f4:	08004dbc 	.word	0x08004dbc
 80002f8:	2000028c 	.word	0x2000028c
 80002fc:	20000240 	.word	0x20000240

08000300 <man_tuning>:
void man_tuning()
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1)
 8000304:	2000      	movs	r0, #0
 8000306:	f7ff ff21 	bl	800014c <isButtonPressed>
 800030a:	4603      	mov	r3, r0
 800030c:	2b01      	cmp	r3, #1
 800030e:	d116      	bne.n	800033e <man_tuning+0x3e>
	{
		resetLED();
 8000310:	f000 fd20 	bl	8000d54 <resetLED>
		//		reset7SEG();
		state = MOD_RED;
 8000314:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <man_tuning+0x44>)
 8000316:	2207      	movs	r2, #7
 8000318:	701a      	strb	r2, [r3, #0]
		onRed1();
 800031a:	f000 fd39 	bl	8000d90 <onRed1>
		onRed2();
 800031e:	f000 fd73 	bl	8000e08 <onRed2>
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Tuning: Red\r\nTime: %d\r\n", timeRed), 200);
 8000322:	4b09      	ldr	r3, [pc, #36]	; (8000348 <man_tuning+0x48>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	461a      	mov	r2, r3
 8000328:	4908      	ldr	r1, [pc, #32]	; (800034c <man_tuning+0x4c>)
 800032a:	4809      	ldr	r0, [pc, #36]	; (8000350 <man_tuning+0x50>)
 800032c:	f004 f9b6 	bl	800469c <siprintf>
 8000330:	4603      	mov	r3, r0
 8000332:	b29a      	uxth	r2, r3
 8000334:	23c8      	movs	r3, #200	; 0xc8
 8000336:	4906      	ldr	r1, [pc, #24]	; (8000350 <man_tuning+0x50>)
 8000338:	4806      	ldr	r0, [pc, #24]	; (8000354 <man_tuning+0x54>)
 800033a:	f003 fae3 	bl	8003904 <HAL_UART_Transmit>
	}
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000138 	.word	0x20000138
 8000348:	20000068 	.word	0x20000068
 800034c:	08004de4 	.word	0x08004de4
 8000350:	2000028c 	.word	0x2000028c
 8000354:	20000240 	.word	0x20000240

08000358 <fsm_auto>:

void fsm_auto()
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	switch (state)
 800035c:	4b7b      	ldr	r3, [pc, #492]	; (800054c <fsm_auto+0x1f4>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b04      	cmp	r3, #4
 8000362:	f200 81d8 	bhi.w	8000716 <fsm_auto+0x3be>
 8000366:	a201      	add	r2, pc, #4	; (adr r2, 800036c <fsm_auto+0x14>)
 8000368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036c:	08000381 	.word	0x08000381
 8000370:	080003c1 	.word	0x080003c1
 8000374:	08000473 	.word	0x08000473
 8000378:	08000585 	.word	0x08000585
 800037c:	0800063d 	.word	0x0800063d
	{
	case INIT:
		resetLED();
 8000380:	f000 fce8 	bl	8000d54 <resetLED>
		timeWay1 = timeRed / timeCycle;
 8000384:	4b72      	ldr	r3, [pc, #456]	; (8000550 <fsm_auto+0x1f8>)
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	4b72      	ldr	r3, [pc, #456]	; (8000554 <fsm_auto+0x1fc>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000390:	4a71      	ldr	r2, [pc, #452]	; (8000558 <fsm_auto+0x200>)
 8000392:	6013      	str	r3, [r2, #0]
		timeWay2 = timeGreen / timeCycle;
 8000394:	4b71      	ldr	r3, [pc, #452]	; (800055c <fsm_auto+0x204>)
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	4b6e      	ldr	r3, [pc, #440]	; (8000554 <fsm_auto+0x1fc>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	fb92 f3f3 	sdiv	r3, r2, r3
 80003a0:	4a6f      	ldr	r2, [pc, #444]	; (8000560 <fsm_auto+0x208>)
 80003a2:	6013      	str	r3, [r2, #0]
		state = RED1_GREEN2;
 80003a4:	4b69      	ldr	r3, [pc, #420]	; (800054c <fsm_auto+0x1f4>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	701a      	strb	r2, [r3, #0]
		setTimer(0, timeGreen);
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <fsm_auto+0x204>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4619      	mov	r1, r3
 80003b0:	2000      	movs	r0, #0
 80003b2:	f001 f933 	bl	800161c <setTimer>
		setTimer(1, 100);
 80003b6:	2164      	movs	r1, #100	; 0x64
 80003b8:	2001      	movs	r0, #1
 80003ba:	f001 f92f 	bl	800161c <setTimer>
		break;
 80003be:	e1ab      	b.n	8000718 <fsm_auto+0x3c0>
	case RED1_GREEN2:
		onRed1();
 80003c0:	f000 fce6 	bl	8000d90 <onRed1>
		onGreen2();
 80003c4:	f000 fd40 	bl	8000e48 <onGreen2>
		if (timer_flag[1])
 80003c8:	4b66      	ldr	r3, [pc, #408]	; (8000564 <fsm_auto+0x20c>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d037      	beq.n	8000440 <fsm_auto+0xe8>
		{
			setTimer(1, 100);
 80003d0:	2164      	movs	r1, #100	; 0x64
 80003d2:	2001      	movs	r0, #1
 80003d4:	f001 f922 	bl	800161c <setTimer>
			clearScreen();
 80003d8:	f000 fca4 	bl	8000d24 <clearScreen>
			timeWay1--;
 80003dc:	4b5e      	ldr	r3, [pc, #376]	; (8000558 <fsm_auto+0x200>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	3b01      	subs	r3, #1
 80003e2:	4a5d      	ldr	r2, [pc, #372]	; (8000558 <fsm_auto+0x200>)
 80003e4:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Road 1: Red\r\nTime:%d\r\n", timeWay1), 200);
 80003e6:	4b5c      	ldr	r3, [pc, #368]	; (8000558 <fsm_auto+0x200>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	461a      	mov	r2, r3
 80003ec:	495e      	ldr	r1, [pc, #376]	; (8000568 <fsm_auto+0x210>)
 80003ee:	485f      	ldr	r0, [pc, #380]	; (800056c <fsm_auto+0x214>)
 80003f0:	f004 f954 	bl	800469c <siprintf>
 80003f4:	4603      	mov	r3, r0
 80003f6:	b29a      	uxth	r2, r3
 80003f8:	23c8      	movs	r3, #200	; 0xc8
 80003fa:	495c      	ldr	r1, [pc, #368]	; (800056c <fsm_auto+0x214>)
 80003fc:	485c      	ldr	r0, [pc, #368]	; (8000570 <fsm_auto+0x218>)
 80003fe:	f003 fa81 	bl	8003904 <HAL_UART_Transmit>
			timeWay2--;
 8000402:	4b57      	ldr	r3, [pc, #348]	; (8000560 <fsm_auto+0x208>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	3b01      	subs	r3, #1
 8000408:	4a55      	ldr	r2, [pc, #340]	; (8000560 <fsm_auto+0x208>)
 800040a:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Road 2: Green\r\nTime:%d\r\n", timeWay2), 200);
 800040c:	4b54      	ldr	r3, [pc, #336]	; (8000560 <fsm_auto+0x208>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	461a      	mov	r2, r3
 8000412:	4958      	ldr	r1, [pc, #352]	; (8000574 <fsm_auto+0x21c>)
 8000414:	4855      	ldr	r0, [pc, #340]	; (800056c <fsm_auto+0x214>)
 8000416:	f004 f941 	bl	800469c <siprintf>
 800041a:	4603      	mov	r3, r0
 800041c:	b29a      	uxth	r2, r3
 800041e:	23c8      	movs	r3, #200	; 0xc8
 8000420:	4952      	ldr	r1, [pc, #328]	; (800056c <fsm_auto+0x214>)
 8000422:	4853      	ldr	r0, [pc, #332]	; (8000570 <fsm_auto+0x218>)
 8000424:	f003 fa6e 	bl	8003904 <HAL_UART_Transmit>
			if (timeWay2 <= 0)
 8000428:	4b4d      	ldr	r3, [pc, #308]	; (8000560 <fsm_auto+0x208>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2b00      	cmp	r3, #0
 800042e:	dc07      	bgt.n	8000440 <fsm_auto+0xe8>
				timeWay2 = timeYellow / timeCycle;
 8000430:	4b51      	ldr	r3, [pc, #324]	; (8000578 <fsm_auto+0x220>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	4b47      	ldr	r3, [pc, #284]	; (8000554 <fsm_auto+0x1fc>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	fb92 f3f3 	sdiv	r3, r2, r3
 800043c:	4a48      	ldr	r2, [pc, #288]	; (8000560 <fsm_auto+0x208>)
 800043e:	6013      	str	r3, [r2, #0]
		}
		if (timer_flag[0])
 8000440:	4b48      	ldr	r3, [pc, #288]	; (8000564 <fsm_auto+0x20c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d008      	beq.n	800045a <fsm_auto+0x102>
		{
			state = RED1_YELLOW2;
 8000448:	4b40      	ldr	r3, [pc, #256]	; (800054c <fsm_auto+0x1f4>)
 800044a:	2202      	movs	r2, #2
 800044c:	701a      	strb	r2, [r3, #0]
			setTimer(0, timeYellow);
 800044e:	4b4a      	ldr	r3, [pc, #296]	; (8000578 <fsm_auto+0x220>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4619      	mov	r1, r3
 8000454:	2000      	movs	r0, #0
 8000456:	f001 f8e1 	bl	800161c <setTimer>
		}
		if (isButtonPressed(3))
 800045a:	2003      	movs	r0, #3
 800045c:	f7ff fe76 	bl	800014c <isButtonPressed>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d002      	beq.n	800046c <fsm_auto+0x114>
		{
			ped_flag = 1;
 8000466:	4b45      	ldr	r3, [pc, #276]	; (800057c <fsm_auto+0x224>)
 8000468:	2201      	movs	r2, #1
 800046a:	601a      	str	r2, [r3, #0]
		}
		auto_man();
 800046c:	f7ff ff22 	bl	80002b4 <auto_man>
		break;
 8000470:	e152      	b.n	8000718 <fsm_auto+0x3c0>
	case RED1_YELLOW2:
		onRed1();
 8000472:	f000 fc8d 	bl	8000d90 <onRed1>
		onYellow2();
 8000476:	f000 fcd7 	bl	8000e28 <onYellow2>
		if (timer_flag[1])
 800047a:	4b3a      	ldr	r3, [pc, #232]	; (8000564 <fsm_auto+0x20c>)
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d04b      	beq.n	800051a <fsm_auto+0x1c2>
		{
			setTimer(1, 100);
 8000482:	2164      	movs	r1, #100	; 0x64
 8000484:	2001      	movs	r0, #1
 8000486:	f001 f8c9 	bl	800161c <setTimer>
			clearScreen();
 800048a:	f000 fc4b 	bl	8000d24 <clearScreen>
			timeWay1--;
 800048e:	4b32      	ldr	r3, [pc, #200]	; (8000558 <fsm_auto+0x200>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	3b01      	subs	r3, #1
 8000494:	4a30      	ldr	r2, [pc, #192]	; (8000558 <fsm_auto+0x200>)
 8000496:	6013      	str	r3, [r2, #0]
			if (timeWay1 <= 0)
 8000498:	4b2f      	ldr	r3, [pc, #188]	; (8000558 <fsm_auto+0x200>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	dc07      	bgt.n	80004b0 <fsm_auto+0x158>
				timeWay1 = timeGreen / timeCycle;
 80004a0:	4b2e      	ldr	r3, [pc, #184]	; (800055c <fsm_auto+0x204>)
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	4b2b      	ldr	r3, [pc, #172]	; (8000554 <fsm_auto+0x1fc>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80004ac:	4a2a      	ldr	r2, [pc, #168]	; (8000558 <fsm_auto+0x200>)
 80004ae:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Road 1: Red\r\nTime:%d\r\n", timeWay1), 200);
 80004b0:	4b29      	ldr	r3, [pc, #164]	; (8000558 <fsm_auto+0x200>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	461a      	mov	r2, r3
 80004b6:	492c      	ldr	r1, [pc, #176]	; (8000568 <fsm_auto+0x210>)
 80004b8:	482c      	ldr	r0, [pc, #176]	; (800056c <fsm_auto+0x214>)
 80004ba:	f004 f8ef 	bl	800469c <siprintf>
 80004be:	4603      	mov	r3, r0
 80004c0:	b29a      	uxth	r2, r3
 80004c2:	23c8      	movs	r3, #200	; 0xc8
 80004c4:	4929      	ldr	r1, [pc, #164]	; (800056c <fsm_auto+0x214>)
 80004c6:	482a      	ldr	r0, [pc, #168]	; (8000570 <fsm_auto+0x218>)
 80004c8:	f003 fa1c 	bl	8003904 <HAL_UART_Transmit>
			timeWay2--;
 80004cc:	4b24      	ldr	r3, [pc, #144]	; (8000560 <fsm_auto+0x208>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	3b01      	subs	r3, #1
 80004d2:	4a23      	ldr	r2, [pc, #140]	; (8000560 <fsm_auto+0x208>)
 80004d4:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Road 2: Yellow\r\nTime:%d\r\n", timeWay2), 200);
 80004d6:	4b22      	ldr	r3, [pc, #136]	; (8000560 <fsm_auto+0x208>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	461a      	mov	r2, r3
 80004dc:	4928      	ldr	r1, [pc, #160]	; (8000580 <fsm_auto+0x228>)
 80004de:	4823      	ldr	r0, [pc, #140]	; (800056c <fsm_auto+0x214>)
 80004e0:	f004 f8dc 	bl	800469c <siprintf>
 80004e4:	4603      	mov	r3, r0
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	23c8      	movs	r3, #200	; 0xc8
 80004ea:	4920      	ldr	r1, [pc, #128]	; (800056c <fsm_auto+0x214>)
 80004ec:	4820      	ldr	r0, [pc, #128]	; (8000570 <fsm_auto+0x218>)
 80004ee:	f003 fa09 	bl	8003904 <HAL_UART_Transmit>
			if (timeWay2 <= 0)
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <fsm_auto+0x208>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	dc0f      	bgt.n	800051a <fsm_auto+0x1c2>
			{
				timeWay1 = timeGreen / timeCycle;
 80004fa:	4b18      	ldr	r3, [pc, #96]	; (800055c <fsm_auto+0x204>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <fsm_auto+0x1fc>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	fb92 f3f3 	sdiv	r3, r2, r3
 8000506:	4a14      	ldr	r2, [pc, #80]	; (8000558 <fsm_auto+0x200>)
 8000508:	6013      	str	r3, [r2, #0]
				timeWay2 = timeRed / timeCycle;
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <fsm_auto+0x1f8>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <fsm_auto+0x1fc>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	fb92 f3f3 	sdiv	r3, r2, r3
 8000516:	4a12      	ldr	r2, [pc, #72]	; (8000560 <fsm_auto+0x208>)
 8000518:	6013      	str	r3, [r2, #0]
			}
		}
		if (timer_flag[0])
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <fsm_auto+0x20c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d008      	beq.n	8000534 <fsm_auto+0x1dc>
		{
			state = GREEN1_RED2;
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <fsm_auto+0x1f4>)
 8000524:	2203      	movs	r2, #3
 8000526:	701a      	strb	r2, [r3, #0]
			setTimer(0, timeGreen);
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <fsm_auto+0x204>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	2000      	movs	r0, #0
 8000530:	f001 f874 	bl	800161c <setTimer>
		}
		if (isButtonPressed(3))
 8000534:	2003      	movs	r0, #3
 8000536:	f7ff fe09 	bl	800014c <isButtonPressed>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d002      	beq.n	8000546 <fsm_auto+0x1ee>
		{
			ped_flag = 1;
 8000540:	4b0e      	ldr	r3, [pc, #56]	; (800057c <fsm_auto+0x224>)
 8000542:	2201      	movs	r2, #1
 8000544:	601a      	str	r2, [r3, #0]
		}
		auto_man();
 8000546:	f7ff feb5 	bl	80002b4 <auto_man>
		break;
 800054a:	e0e5      	b.n	8000718 <fsm_auto+0x3c0>
 800054c:	20000138 	.word	0x20000138
 8000550:	20000068 	.word	0x20000068
 8000554:	08005074 	.word	0x08005074
 8000558:	2000013c 	.word	0x2000013c
 800055c:	2000006c 	.word	0x2000006c
 8000560:	20000140 	.word	0x20000140
 8000564:	20000150 	.word	0x20000150
 8000568:	08004dfc 	.word	0x08004dfc
 800056c:	2000028c 	.word	0x2000028c
 8000570:	20000240 	.word	0x20000240
 8000574:	08004e14 	.word	0x08004e14
 8000578:	20000070 	.word	0x20000070
 800057c:	20000148 	.word	0x20000148
 8000580:	08004e30 	.word	0x08004e30
	case GREEN1_RED2:
		onGreen1();
 8000584:	f000 fc2c 	bl	8000de0 <onGreen1>
		onRed2();
 8000588:	f000 fc3e 	bl	8000e08 <onRed2>
		if (timer_flag[1])
 800058c:	4b63      	ldr	r3, [pc, #396]	; (800071c <fsm_auto+0x3c4>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d037      	beq.n	8000604 <fsm_auto+0x2ac>
		{
			setTimer(1, 100);
 8000594:	2164      	movs	r1, #100	; 0x64
 8000596:	2001      	movs	r0, #1
 8000598:	f001 f840 	bl	800161c <setTimer>
			clearScreen();
 800059c:	f000 fbc2 	bl	8000d24 <clearScreen>
			timeWay1--;
 80005a0:	4b5f      	ldr	r3, [pc, #380]	; (8000720 <fsm_auto+0x3c8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3b01      	subs	r3, #1
 80005a6:	4a5e      	ldr	r2, [pc, #376]	; (8000720 <fsm_auto+0x3c8>)
 80005a8:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Road 1: Green\r\nTime:%d\r\n", timeWay1), 200);
 80005aa:	4b5d      	ldr	r3, [pc, #372]	; (8000720 <fsm_auto+0x3c8>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	461a      	mov	r2, r3
 80005b0:	495c      	ldr	r1, [pc, #368]	; (8000724 <fsm_auto+0x3cc>)
 80005b2:	485d      	ldr	r0, [pc, #372]	; (8000728 <fsm_auto+0x3d0>)
 80005b4:	f004 f872 	bl	800469c <siprintf>
 80005b8:	4603      	mov	r3, r0
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	23c8      	movs	r3, #200	; 0xc8
 80005be:	495a      	ldr	r1, [pc, #360]	; (8000728 <fsm_auto+0x3d0>)
 80005c0:	485a      	ldr	r0, [pc, #360]	; (800072c <fsm_auto+0x3d4>)
 80005c2:	f003 f99f 	bl	8003904 <HAL_UART_Transmit>
			timeWay2--;
 80005c6:	4b5a      	ldr	r3, [pc, #360]	; (8000730 <fsm_auto+0x3d8>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	4a58      	ldr	r2, [pc, #352]	; (8000730 <fsm_auto+0x3d8>)
 80005ce:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Road 2: Red\r\nTime:%d\r\n", timeWay2), 200);
 80005d0:	4b57      	ldr	r3, [pc, #348]	; (8000730 <fsm_auto+0x3d8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4957      	ldr	r1, [pc, #348]	; (8000734 <fsm_auto+0x3dc>)
 80005d8:	4853      	ldr	r0, [pc, #332]	; (8000728 <fsm_auto+0x3d0>)
 80005da:	f004 f85f 	bl	800469c <siprintf>
 80005de:	4603      	mov	r3, r0
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	23c8      	movs	r3, #200	; 0xc8
 80005e4:	4950      	ldr	r1, [pc, #320]	; (8000728 <fsm_auto+0x3d0>)
 80005e6:	4851      	ldr	r0, [pc, #324]	; (800072c <fsm_auto+0x3d4>)
 80005e8:	f003 f98c 	bl	8003904 <HAL_UART_Transmit>
			if (timeWay1 <= 0)
 80005ec:	4b4c      	ldr	r3, [pc, #304]	; (8000720 <fsm_auto+0x3c8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	dc07      	bgt.n	8000604 <fsm_auto+0x2ac>
				timeWay1 = timeYellow / timeCycle;
 80005f4:	4b50      	ldr	r3, [pc, #320]	; (8000738 <fsm_auto+0x3e0>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b50      	ldr	r3, [pc, #320]	; (800073c <fsm_auto+0x3e4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000600:	4a47      	ldr	r2, [pc, #284]	; (8000720 <fsm_auto+0x3c8>)
 8000602:	6013      	str	r3, [r2, #0]
		}
		if (timer_flag[0])
 8000604:	4b45      	ldr	r3, [pc, #276]	; (800071c <fsm_auto+0x3c4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d00b      	beq.n	8000624 <fsm_auto+0x2cc>
		{
			i = 50;
 800060c:	4b4c      	ldr	r3, [pc, #304]	; (8000740 <fsm_auto+0x3e8>)
 800060e:	2232      	movs	r2, #50	; 0x32
 8000610:	601a      	str	r2, [r3, #0]
			state = YELLOW1_RED2;
 8000612:	4b4c      	ldr	r3, [pc, #304]	; (8000744 <fsm_auto+0x3ec>)
 8000614:	2204      	movs	r2, #4
 8000616:	701a      	strb	r2, [r3, #0]
			setTimer(0, timeYellow);
 8000618:	4b47      	ldr	r3, [pc, #284]	; (8000738 <fsm_auto+0x3e0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	2000      	movs	r0, #0
 8000620:	f000 fffc 	bl	800161c <setTimer>
		}
		if (isButtonPressed(3))
 8000624:	2003      	movs	r0, #3
 8000626:	f7ff fd91 	bl	800014c <isButtonPressed>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d002      	beq.n	8000636 <fsm_auto+0x2de>
		{
			ped_flag = 1;
 8000630:	4b45      	ldr	r3, [pc, #276]	; (8000748 <fsm_auto+0x3f0>)
 8000632:	2201      	movs	r2, #1
 8000634:	601a      	str	r2, [r3, #0]
		}
		auto_man();
 8000636:	f7ff fe3d 	bl	80002b4 <auto_man>
		break;
 800063a:	e06d      	b.n	8000718 <fsm_auto+0x3c0>
	case YELLOW1_RED2:
		onYellow1();
 800063c:	f000 fbbc 	bl	8000db8 <onYellow1>
		onRed2();
 8000640:	f000 fbe2 	bl	8000e08 <onRed2>
		if (timer_flag[1])
 8000644:	4b35      	ldr	r3, [pc, #212]	; (800071c <fsm_auto+0x3c4>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d04b      	beq.n	80006e4 <fsm_auto+0x38c>
		{
			setTimer(1, 100);
 800064c:	2164      	movs	r1, #100	; 0x64
 800064e:	2001      	movs	r0, #1
 8000650:	f000 ffe4 	bl	800161c <setTimer>
			clearScreen();
 8000654:	f000 fb66 	bl	8000d24 <clearScreen>
			timeWay1--;
 8000658:	4b31      	ldr	r3, [pc, #196]	; (8000720 <fsm_auto+0x3c8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	3b01      	subs	r3, #1
 800065e:	4a30      	ldr	r2, [pc, #192]	; (8000720 <fsm_auto+0x3c8>)
 8000660:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Road 1: Yellow\r\nTime:%d\r\n", timeWay1), 200);
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <fsm_auto+0x3c8>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	461a      	mov	r2, r3
 8000668:	4938      	ldr	r1, [pc, #224]	; (800074c <fsm_auto+0x3f4>)
 800066a:	482f      	ldr	r0, [pc, #188]	; (8000728 <fsm_auto+0x3d0>)
 800066c:	f004 f816 	bl	800469c <siprintf>
 8000670:	4603      	mov	r3, r0
 8000672:	b29a      	uxth	r2, r3
 8000674:	23c8      	movs	r3, #200	; 0xc8
 8000676:	492c      	ldr	r1, [pc, #176]	; (8000728 <fsm_auto+0x3d0>)
 8000678:	482c      	ldr	r0, [pc, #176]	; (800072c <fsm_auto+0x3d4>)
 800067a:	f003 f943 	bl	8003904 <HAL_UART_Transmit>
			if (timeWay1 <= 0)
 800067e:	4b28      	ldr	r3, [pc, #160]	; (8000720 <fsm_auto+0x3c8>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	dc07      	bgt.n	8000696 <fsm_auto+0x33e>
				timeWay1 = timeRed / timeCycle;
 8000686:	4b32      	ldr	r3, [pc, #200]	; (8000750 <fsm_auto+0x3f8>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	4b2c      	ldr	r3, [pc, #176]	; (800073c <fsm_auto+0x3e4>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000692:	4a23      	ldr	r2, [pc, #140]	; (8000720 <fsm_auto+0x3c8>)
 8000694:	6013      	str	r3, [r2, #0]
			timeWay2--;
 8000696:	4b26      	ldr	r3, [pc, #152]	; (8000730 <fsm_auto+0x3d8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	3b01      	subs	r3, #1
 800069c:	4a24      	ldr	r2, [pc, #144]	; (8000730 <fsm_auto+0x3d8>)
 800069e:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Road 2: Red\r\nTime:%d\r\n", timeWay2), 200);
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <fsm_auto+0x3d8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4923      	ldr	r1, [pc, #140]	; (8000734 <fsm_auto+0x3dc>)
 80006a8:	481f      	ldr	r0, [pc, #124]	; (8000728 <fsm_auto+0x3d0>)
 80006aa:	f003 fff7 	bl	800469c <siprintf>
 80006ae:	4603      	mov	r3, r0
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	23c8      	movs	r3, #200	; 0xc8
 80006b4:	491c      	ldr	r1, [pc, #112]	; (8000728 <fsm_auto+0x3d0>)
 80006b6:	481d      	ldr	r0, [pc, #116]	; (800072c <fsm_auto+0x3d4>)
 80006b8:	f003 f924 	bl	8003904 <HAL_UART_Transmit>
			if (timeWay2 <= 0)
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <fsm_auto+0x3d8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	dc0f      	bgt.n	80006e4 <fsm_auto+0x38c>
			{
				timeWay1 = timeRed / timeCycle;
 80006c4:	4b22      	ldr	r3, [pc, #136]	; (8000750 <fsm_auto+0x3f8>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <fsm_auto+0x3e4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80006d0:	4a13      	ldr	r2, [pc, #76]	; (8000720 <fsm_auto+0x3c8>)
 80006d2:	6013      	str	r3, [r2, #0]
				timeWay2 = timeGreen / timeCycle;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <fsm_auto+0x3fc>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b18      	ldr	r3, [pc, #96]	; (800073c <fsm_auto+0x3e4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80006e0:	4a13      	ldr	r2, [pc, #76]	; (8000730 <fsm_auto+0x3d8>)
 80006e2:	6013      	str	r3, [r2, #0]
			}
		}
		if (timer_flag[0])
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <fsm_auto+0x3c4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d008      	beq.n	80006fe <fsm_auto+0x3a6>
		{

			state = RED1_GREEN2;
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <fsm_auto+0x3ec>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
			setTimer(0, timeGreen);
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <fsm_auto+0x3fc>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4619      	mov	r1, r3
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 ff8f 	bl	800161c <setTimer>
		}
		if (isButtonPressed(3))
 80006fe:	2003      	movs	r0, #3
 8000700:	f7ff fd24 	bl	800014c <isButtonPressed>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d002      	beq.n	8000710 <fsm_auto+0x3b8>
		{
			ped_flag = 1;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <fsm_auto+0x3f0>)
 800070c:	2201      	movs	r2, #1
 800070e:	601a      	str	r2, [r3, #0]
		//							i = 1;
		//						}
		//					}
		//				}
		//			}
		auto_man();
 8000710:	f7ff fdd0 	bl	80002b4 <auto_man>
		break;
 8000714:	e000      	b.n	8000718 <fsm_auto+0x3c0>
	default:
		break;
 8000716:	bf00      	nop
	}
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000150 	.word	0x20000150
 8000720:	2000013c 	.word	0x2000013c
 8000724:	08004e4c 	.word	0x08004e4c
 8000728:	2000028c 	.word	0x2000028c
 800072c:	20000240 	.word	0x20000240
 8000730:	20000140 	.word	0x20000140
 8000734:	08004e68 	.word	0x08004e68
 8000738:	20000070 	.word	0x20000070
 800073c:	08005074 	.word	0x08005074
 8000740:	20000088 	.word	0x20000088
 8000744:	20000138 	.word	0x20000138
 8000748:	20000148 	.word	0x20000148
 800074c:	08004e80 	.word	0x08004e80
 8000750:	20000068 	.word	0x20000068
 8000754:	2000006c 	.word	0x2000006c

08000758 <fsm_manual>:
void fsm_manual()
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	switch (state)
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <fsm_manual+0x84>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b05      	cmp	r3, #5
 8000762:	d002      	beq.n	800076a <fsm_manual+0x12>
 8000764:	2b06      	cmp	r3, #6
 8000766:	d01b      	beq.n	80007a0 <fsm_manual+0x48>
		}
		man_tuning();

		break;
	default:
		break;
 8000768:	e035      	b.n	80007d6 <fsm_manual+0x7e>
		if (isButtonPressed(1))
 800076a:	2001      	movs	r0, #1
 800076c:	f7ff fcee 	bl	800014c <isButtonPressed>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d011      	beq.n	800079a <fsm_manual+0x42>
			state = MAN_GR;
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <fsm_manual+0x84>)
 8000778:	2206      	movs	r2, #6
 800077a:	701a      	strb	r2, [r3, #0]
			onRed2();
 800077c:	f000 fb44 	bl	8000e08 <onRed2>
			onGreen1();
 8000780:	f000 fb2e 	bl	8000de0 <onGreen1>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Manual: Road 1: Green\r\nRoad 2: Red\r\n"), 200);
 8000784:	4916      	ldr	r1, [pc, #88]	; (80007e0 <fsm_manual+0x88>)
 8000786:	4817      	ldr	r0, [pc, #92]	; (80007e4 <fsm_manual+0x8c>)
 8000788:	f003 ff88 	bl	800469c <siprintf>
 800078c:	4603      	mov	r3, r0
 800078e:	b29a      	uxth	r2, r3
 8000790:	23c8      	movs	r3, #200	; 0xc8
 8000792:	4914      	ldr	r1, [pc, #80]	; (80007e4 <fsm_manual+0x8c>)
 8000794:	4814      	ldr	r0, [pc, #80]	; (80007e8 <fsm_manual+0x90>)
 8000796:	f003 f8b5 	bl	8003904 <HAL_UART_Transmit>
		man_tuning();
 800079a:	f7ff fdb1 	bl	8000300 <man_tuning>
		break;
 800079e:	e01a      	b.n	80007d6 <fsm_manual+0x7e>
		if (isButtonPressed(1))
 80007a0:	2001      	movs	r0, #1
 80007a2:	f7ff fcd3 	bl	800014c <isButtonPressed>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d011      	beq.n	80007d0 <fsm_manual+0x78>
			state = MAN_RG;
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <fsm_manual+0x84>)
 80007ae:	2205      	movs	r2, #5
 80007b0:	701a      	strb	r2, [r3, #0]
			onRed1();
 80007b2:	f000 faed 	bl	8000d90 <onRed1>
			onGreen2();
 80007b6:	f000 fb47 	bl	8000e48 <onGreen2>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Manual: Road 1: Red\r\nRoad 2: Green\r\n"), 200);
 80007ba:	490c      	ldr	r1, [pc, #48]	; (80007ec <fsm_manual+0x94>)
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <fsm_manual+0x8c>)
 80007be:	f003 ff6d 	bl	800469c <siprintf>
 80007c2:	4603      	mov	r3, r0
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	23c8      	movs	r3, #200	; 0xc8
 80007c8:	4906      	ldr	r1, [pc, #24]	; (80007e4 <fsm_manual+0x8c>)
 80007ca:	4807      	ldr	r0, [pc, #28]	; (80007e8 <fsm_manual+0x90>)
 80007cc:	f003 f89a 	bl	8003904 <HAL_UART_Transmit>
		man_tuning();
 80007d0:	f7ff fd96 	bl	8000300 <man_tuning>
		break;
 80007d4:	bf00      	nop
	}
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000138 	.word	0x20000138
 80007e0:	08004e9c 	.word	0x08004e9c
 80007e4:	2000028c 	.word	0x2000028c
 80007e8:	20000240 	.word	0x20000240
 80007ec:	08004dbc 	.word	0x08004dbc

080007f0 <syncLED>:
#include "fsm_pedestrian.h"

int change;

void syncLED()
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	if (state == RED1_GREEN2 || state == RED1_YELLOW2)
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <syncLED+0x84>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d003      	beq.n	8000804 <syncLED+0x14>
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <syncLED+0x84>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b02      	cmp	r3, #2
 8000802:	d106      	bne.n	8000812 <syncLED+0x22>
	{
		pedRed();
 8000804:	f000 fb30 	bl	8000e68 <pedRed>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <syncLED+0x88>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2200      	movs	r2, #0
 800080e:	635a      	str	r2, [r3, #52]	; 0x34
				change -= 1;
				setTimer(9, 15);
			}
		}
	}
}
 8000810:	e02d      	b.n	800086e <syncLED+0x7e>
	else if (state == GREEN1_RED2 || state == YELLOW1_RED2)
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <syncLED+0x84>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b03      	cmp	r3, #3
 8000818:	d003      	beq.n	8000822 <syncLED+0x32>
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <syncLED+0x84>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b04      	cmp	r3, #4
 8000820:	d125      	bne.n	800086e <syncLED+0x7e>
		pedGreen();
 8000822:	f000 fb35 	bl	8000e90 <pedGreen>
		if (timeWay2 <= 3)
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <syncLED+0x8c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b03      	cmp	r3, #3
 800082c:	dc1f      	bgt.n	800086e <syncLED+0x7e>
			if (timer_flag[3] == 1)
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <syncLED+0x90>)
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d10e      	bne.n	8000854 <syncLED+0x64>
				buzzer(volume[timeWay2 - 1]);
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <syncLED+0x8c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3b01      	subs	r3, #1
 800083c:	4a11      	ldr	r2, [pc, #68]	; (8000884 <syncLED+0x94>)
 800083e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f868 	bl	8000918 <buzzer>
				setTimer(3, change);
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <syncLED+0x98>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4619      	mov	r1, r3
 800084e:	2003      	movs	r0, #3
 8000850:	f000 fee4 	bl	800161c <setTimer>
			if (timer_flag[9])
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <syncLED+0x90>)
 8000856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000858:	2b00      	cmp	r3, #0
 800085a:	d008      	beq.n	800086e <syncLED+0x7e>
				change -= 1;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <syncLED+0x98>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	3b01      	subs	r3, #1
 8000862:	4a09      	ldr	r2, [pc, #36]	; (8000888 <syncLED+0x98>)
 8000864:	6013      	str	r3, [r2, #0]
				setTimer(9, 15);
 8000866:	210f      	movs	r1, #15
 8000868:	2009      	movs	r0, #9
 800086a:	f000 fed7 	bl	800161c <setTimer>
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000138 	.word	0x20000138
 8000878:	200001ac 	.word	0x200001ac
 800087c:	20000140 	.word	0x20000140
 8000880:	20000150 	.word	0x20000150
 8000884:	2000008c 	.word	0x2000008c
 8000888:	200001f4 	.word	0x200001f4

0800088c <fsm_pedestrian>:
void fsm_pedestrian()
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	switch (ped_state)
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <fsm_pedestrian+0x7c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b0c      	cmp	r3, #12
 8000896:	d006      	beq.n	80008a6 <fsm_pedestrian+0x1a>
 8000898:	2b0c      	cmp	r3, #12
 800089a:	dc2d      	bgt.n	80008f8 <fsm_pedestrian+0x6c>
 800089c:	2b0a      	cmp	r3, #10
 800089e:	d00e      	beq.n	80008be <fsm_pedestrian+0x32>
 80008a0:	2b0b      	cmp	r3, #11
 80008a2:	d01c      	beq.n	80008de <fsm_pedestrian+0x52>
			ped_state = PED_OFF;
			ped_flag = 0;
		}
		break;
	default:
		break;
 80008a4:	e028      	b.n	80008f8 <fsm_pedestrian+0x6c>
		pedReset();
 80008a6:	f000 fb07 	bl	8000eb8 <pedReset>
		buzzer_off();
 80008aa:	f000 f859 	bl	8000960 <buzzer_off>
		if (ped_flag)
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <fsm_pedestrian+0x80>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d022      	beq.n	80008fc <fsm_pedestrian+0x70>
			ped_state = PED_INIT;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <fsm_pedestrian+0x7c>)
 80008b8:	220a      	movs	r2, #10
 80008ba:	601a      	str	r2, [r3, #0]
		break;
 80008bc:	e01e      	b.n	80008fc <fsm_pedestrian+0x70>
		setTimer(2, 1000);
 80008be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008c2:	2002      	movs	r0, #2
 80008c4:	f000 feaa 	bl	800161c <setTimer>
		ped_state = PED_ACTIVE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <fsm_pedestrian+0x7c>)
 80008ca:	220b      	movs	r2, #11
 80008cc:	601a      	str	r2, [r3, #0]
		change = 20;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <fsm_pedestrian+0x84>)
 80008d0:	2214      	movs	r2, #20
 80008d2:	601a      	str	r2, [r3, #0]
		setTimer(9, 1);
 80008d4:	2101      	movs	r1, #1
 80008d6:	2009      	movs	r0, #9
 80008d8:	f000 fea0 	bl	800161c <setTimer>
		break;
 80008dc:	e011      	b.n	8000902 <fsm_pedestrian+0x76>
		syncLED();
 80008de:	f7ff ff87 	bl	80007f0 <syncLED>
		if (timer_flag[2])
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <fsm_pedestrian+0x88>)
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d00a      	beq.n	8000900 <fsm_pedestrian+0x74>
			ped_state = PED_OFF;
 80008ea:	4b07      	ldr	r3, [pc, #28]	; (8000908 <fsm_pedestrian+0x7c>)
 80008ec:	220c      	movs	r2, #12
 80008ee:	601a      	str	r2, [r3, #0]
			ped_flag = 0;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <fsm_pedestrian+0x80>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
		break;
 80008f6:	e003      	b.n	8000900 <fsm_pedestrian+0x74>
		break;
 80008f8:	bf00      	nop
 80008fa:	e002      	b.n	8000902 <fsm_pedestrian+0x76>
		break;
 80008fc:	bf00      	nop
 80008fe:	e000      	b.n	8000902 <fsm_pedestrian+0x76>
		break;
 8000900:	bf00      	nop
	}
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000080 	.word	0x20000080
 800090c:	20000148 	.word	0x20000148
 8000910:	200001f4 	.word	0x200001f4
 8000914:	20000150 	.word	0x20000150

08000918 <buzzer>:
void buzzer(int vol)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	if (buzzer_flag == 1)
 8000920:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <buzzer+0x40>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d104      	bne.n	8000932 <buzzer+0x1a>
	{
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, vol);
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <buzzer+0x44>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	635a      	str	r2, [r3, #52]	; 0x34
 8000930:	e007      	b.n	8000942 <buzzer+0x2a>
	}
	else if (buzzer_flag == 0)
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <buzzer+0x40>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d103      	bne.n	8000942 <buzzer+0x2a>
	{
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <buzzer+0x44>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2200      	movs	r2, #0
 8000940:	635a      	str	r2, [r3, #52]	; 0x34
	}
	buzzer_flag = 1 - buzzer_flag;
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <buzzer+0x40>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f1c3 0301 	rsb	r3, r3, #1
 800094a:	4a03      	ldr	r2, [pc, #12]	; (8000958 <buzzer+0x40>)
 800094c:	6013      	str	r3, [r2, #0]
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	20000084 	.word	0x20000084
 800095c:	200001ac 	.word	0x200001ac

08000960 <buzzer_off>:
void buzzer_off()
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <buzzer_off+0x14>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2200      	movs	r2, #0
 800096a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	200001ac 	.word	0x200001ac

08000978 <tuning_auto>:
#include "stdio.h"
#include "stdlib.h"

char str[40];

void tuning_auto(){
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	if(isButtonPressed(0) == 1){
 800097c:	2000      	movs	r0, #0
 800097e:	f7ff fbe5 	bl	800014c <isButtonPressed>
 8000982:	4603      	mov	r3, r0
 8000984:	2b01      	cmp	r3, #1
 8000986:	d10f      	bne.n	80009a8 <tuning_auto+0x30>
		resetLED();
 8000988:	f000 f9e4 	bl	8000d54 <resetLED>
//		reset7SEG();
		timeYellow = timeRed - timeGreen;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <tuning_auto+0x34>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <tuning_auto+0x38>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <tuning_auto+0x3c>)
 8000998:	6013      	str	r3, [r2, #0]
		state = RED1_GREEN2;
 800099a:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <tuning_auto+0x40>)
 800099c:	2201      	movs	r2, #1
 800099e:	701a      	strb	r2, [r3, #0]
		onRed1();
 80009a0:	f000 f9f6 	bl	8000d90 <onRed1>
		onGreen2();
 80009a4:	f000 fa50 	bl	8000e48 <onGreen2>
	}
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000068 	.word	0x20000068
 80009b0:	2000006c 	.word	0x2000006c
 80009b4:	20000070 	.word	0x20000070
 80009b8:	20000138 	.word	0x20000138

080009bc <fsm_tuning>:

void fsm_tuning(){
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	switch(state){
 80009c0:	4b87      	ldr	r3, [pc, #540]	; (8000be0 <fsm_tuning+0x224>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b09      	cmp	r3, #9
 80009c6:	f000 80f6 	beq.w	8000bb6 <fsm_tuning+0x1fa>
 80009ca:	2b09      	cmp	r3, #9
 80009cc:	f300 818f 	bgt.w	8000cee <fsm_tuning+0x332>
 80009d0:	2b07      	cmp	r3, #7
 80009d2:	d002      	beq.n	80009da <fsm_tuning+0x1e>
 80009d4:	2b08      	cmp	r3, #8
 80009d6:	d077      	beq.n	8000ac8 <fsm_tuning+0x10c>
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Green\r\nTime set to: %d\r\n",time_green), 200);
			}
			tuning_auto();
			break;
	}
}
 80009d8:	e189      	b.n	8000cee <fsm_tuning+0x332>
			if(timer_flag[4] == 1){
 80009da:	4b82      	ldr	r3, [pc, #520]	; (8000be4 <fsm_tuning+0x228>)
 80009dc:	691b      	ldr	r3, [r3, #16]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d114      	bne.n	8000a0c <fsm_tuning+0x50>
				setTimer(4,25);
 80009e2:	2119      	movs	r1, #25
 80009e4:	2004      	movs	r0, #4
 80009e6:	f000 fe19 	bl	800161c <setTimer>
				if(blink == 0){
 80009ea:	4b7f      	ldr	r3, [pc, #508]	; (8000be8 <fsm_tuning+0x22c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d107      	bne.n	8000a02 <fsm_tuning+0x46>
					onRed1(); // MOD_RED
 80009f2:	f000 f9cd 	bl	8000d90 <onRed1>
					onRed2();
 80009f6:	f000 fa07 	bl	8000e08 <onRed2>
					blink = 1;
 80009fa:	4b7b      	ldr	r3, [pc, #492]	; (8000be8 <fsm_tuning+0x22c>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	e004      	b.n	8000a0c <fsm_tuning+0x50>
					resetLED();
 8000a02:	f000 f9a7 	bl	8000d54 <resetLED>
					blink = 0;
 8000a06:	4b78      	ldr	r3, [pc, #480]	; (8000be8 <fsm_tuning+0x22c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(1)){
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f7ff fb9d 	bl	800014c <isButtonPressed>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d014      	beq.n	8000a42 <fsm_tuning+0x86>
				state = MOD_YELLOW;
 8000a18:	4b71      	ldr	r3, [pc, #452]	; (8000be0 <fsm_tuning+0x224>)
 8000a1a:	2208      	movs	r2, #8
 8000a1c:	701a      	strb	r2, [r3, #0]
				setTimer(4,25);
 8000a1e:	2119      	movs	r1, #25
 8000a20:	2004      	movs	r0, #4
 8000a22:	f000 fdfb 	bl	800161c <setTimer>
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Yellow\r\nTime: %d\r\n",timeYellow), 200);
 8000a26:	4b71      	ldr	r3, [pc, #452]	; (8000bec <fsm_tuning+0x230>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4970      	ldr	r1, [pc, #448]	; (8000bf0 <fsm_tuning+0x234>)
 8000a2e:	4871      	ldr	r0, [pc, #452]	; (8000bf4 <fsm_tuning+0x238>)
 8000a30:	f003 fe34 	bl	800469c <siprintf>
 8000a34:	4603      	mov	r3, r0
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	23c8      	movs	r3, #200	; 0xc8
 8000a3a:	496e      	ldr	r1, [pc, #440]	; (8000bf4 <fsm_tuning+0x238>)
 8000a3c:	486e      	ldr	r0, [pc, #440]	; (8000bf8 <fsm_tuning+0x23c>)
 8000a3e:	f002 ff61 	bl	8003904 <HAL_UART_Transmit>
			if(isButtonPressed(2) == 1){
 8000a42:	2002      	movs	r0, #2
 8000a44:	f7ff fb82 	bl	800014c <isButtonPressed>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d11d      	bne.n	8000a8a <fsm_tuning+0xce>
				time_red++;
 8000a4e:	4b6b      	ldr	r3, [pc, #428]	; (8000bfc <fsm_tuning+0x240>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	4a69      	ldr	r2, [pc, #420]	; (8000bfc <fsm_tuning+0x240>)
 8000a56:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Red\r\nIncrease time to: %d\r\n",time_red), 200);
 8000a58:	4b68      	ldr	r3, [pc, #416]	; (8000bfc <fsm_tuning+0x240>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4968      	ldr	r1, [pc, #416]	; (8000c00 <fsm_tuning+0x244>)
 8000a60:	4864      	ldr	r0, [pc, #400]	; (8000bf4 <fsm_tuning+0x238>)
 8000a62:	f003 fe1b 	bl	800469c <siprintf>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	23c8      	movs	r3, #200	; 0xc8
 8000a6c:	4961      	ldr	r1, [pc, #388]	; (8000bf4 <fsm_tuning+0x238>)
 8000a6e:	4862      	ldr	r0, [pc, #392]	; (8000bf8 <fsm_tuning+0x23c>)
 8000a70:	f002 ff48 	bl	8003904 <HAL_UART_Transmit>
				if(time_red >= 10) time_red =  5;
 8000a74:	4b61      	ldr	r3, [pc, #388]	; (8000bfc <fsm_tuning+0x240>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b09      	cmp	r3, #9
 8000a7a:	dd02      	ble.n	8000a82 <fsm_tuning+0xc6>
 8000a7c:	4b5f      	ldr	r3, [pc, #380]	; (8000bfc <fsm_tuning+0x240>)
 8000a7e:	2205      	movs	r2, #5
 8000a80:	601a      	str	r2, [r3, #0]
				timeWay1 = time_red;
 8000a82:	4b5e      	ldr	r3, [pc, #376]	; (8000bfc <fsm_tuning+0x240>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a5f      	ldr	r2, [pc, #380]	; (8000c04 <fsm_tuning+0x248>)
 8000a88:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3)){
 8000a8a:	2003      	movs	r0, #3
 8000a8c:	f7ff fb5e 	bl	800014c <isButtonPressed>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d015      	beq.n	8000ac2 <fsm_tuning+0x106>
				timeRed = time_red*timeCycle;
 8000a96:	4b59      	ldr	r3, [pc, #356]	; (8000bfc <fsm_tuning+0x240>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a5b      	ldr	r2, [pc, #364]	; (8000c08 <fsm_tuning+0x24c>)
 8000a9c:	6812      	ldr	r2, [r2, #0]
 8000a9e:	fb02 f303 	mul.w	r3, r2, r3
 8000aa2:	4a5a      	ldr	r2, [pc, #360]	; (8000c0c <fsm_tuning+0x250>)
 8000aa4:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Red\r\nTime set to: %d\r\n",time_red), 200);
 8000aa6:	4b55      	ldr	r3, [pc, #340]	; (8000bfc <fsm_tuning+0x240>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4958      	ldr	r1, [pc, #352]	; (8000c10 <fsm_tuning+0x254>)
 8000aae:	4851      	ldr	r0, [pc, #324]	; (8000bf4 <fsm_tuning+0x238>)
 8000ab0:	f003 fdf4 	bl	800469c <siprintf>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	23c8      	movs	r3, #200	; 0xc8
 8000aba:	494e      	ldr	r1, [pc, #312]	; (8000bf4 <fsm_tuning+0x238>)
 8000abc:	484e      	ldr	r0, [pc, #312]	; (8000bf8 <fsm_tuning+0x23c>)
 8000abe:	f002 ff21 	bl	8003904 <HAL_UART_Transmit>
			tuning_auto();
 8000ac2:	f7ff ff59 	bl	8000978 <tuning_auto>
			break;
 8000ac6:	e112      	b.n	8000cee <fsm_tuning+0x332>
			if(timer_flag[4] == 1){
 8000ac8:	4b46      	ldr	r3, [pc, #280]	; (8000be4 <fsm_tuning+0x228>)
 8000aca:	691b      	ldr	r3, [r3, #16]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d114      	bne.n	8000afa <fsm_tuning+0x13e>
				setTimer(4,25);
 8000ad0:	2119      	movs	r1, #25
 8000ad2:	2004      	movs	r0, #4
 8000ad4:	f000 fda2 	bl	800161c <setTimer>
				if(blink == 0){
 8000ad8:	4b43      	ldr	r3, [pc, #268]	; (8000be8 <fsm_tuning+0x22c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d107      	bne.n	8000af0 <fsm_tuning+0x134>
					onYellow1(); // MOD_YELLOW
 8000ae0:	f000 f96a 	bl	8000db8 <onYellow1>
					onYellow2();
 8000ae4:	f000 f9a0 	bl	8000e28 <onYellow2>
					blink = 1;
 8000ae8:	4b3f      	ldr	r3, [pc, #252]	; (8000be8 <fsm_tuning+0x22c>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	e004      	b.n	8000afa <fsm_tuning+0x13e>
					resetLED();
 8000af0:	f000 f930 	bl	8000d54 <resetLED>
					blink = 0;
 8000af4:	4b3c      	ldr	r3, [pc, #240]	; (8000be8 <fsm_tuning+0x22c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(1)){
 8000afa:	2001      	movs	r0, #1
 8000afc:	f7ff fb26 	bl	800014c <isButtonPressed>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d014      	beq.n	8000b30 <fsm_tuning+0x174>
				state = MOD_GREEN;
 8000b06:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <fsm_tuning+0x224>)
 8000b08:	2209      	movs	r2, #9
 8000b0a:	701a      	strb	r2, [r3, #0]
				setTimer(4,25);
 8000b0c:	2119      	movs	r1, #25
 8000b0e:	2004      	movs	r0, #4
 8000b10:	f000 fd84 	bl	800161c <setTimer>
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Green\r\nTime: %d\r\n",timeGreen), 200);
 8000b14:	4b3f      	ldr	r3, [pc, #252]	; (8000c14 <fsm_tuning+0x258>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	493f      	ldr	r1, [pc, #252]	; (8000c18 <fsm_tuning+0x25c>)
 8000b1c:	4835      	ldr	r0, [pc, #212]	; (8000bf4 <fsm_tuning+0x238>)
 8000b1e:	f003 fdbd 	bl	800469c <siprintf>
 8000b22:	4603      	mov	r3, r0
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	23c8      	movs	r3, #200	; 0xc8
 8000b28:	4932      	ldr	r1, [pc, #200]	; (8000bf4 <fsm_tuning+0x238>)
 8000b2a:	4833      	ldr	r0, [pc, #204]	; (8000bf8 <fsm_tuning+0x23c>)
 8000b2c:	f002 feea 	bl	8003904 <HAL_UART_Transmit>
			if(isButtonPressed(2) == 1){
 8000b30:	2002      	movs	r0, #2
 8000b32:	f7ff fb0b 	bl	800014c <isButtonPressed>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d11d      	bne.n	8000b78 <fsm_tuning+0x1bc>
				time_yellow++;
 8000b3c:	4b37      	ldr	r3, [pc, #220]	; (8000c1c <fsm_tuning+0x260>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3301      	adds	r3, #1
 8000b42:	4a36      	ldr	r2, [pc, #216]	; (8000c1c <fsm_tuning+0x260>)
 8000b44:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Yellow\r\nIncrease time to: %d\r\n",time_yellow), 200);
 8000b46:	4b35      	ldr	r3, [pc, #212]	; (8000c1c <fsm_tuning+0x260>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	4934      	ldr	r1, [pc, #208]	; (8000c20 <fsm_tuning+0x264>)
 8000b4e:	4829      	ldr	r0, [pc, #164]	; (8000bf4 <fsm_tuning+0x238>)
 8000b50:	f003 fda4 	bl	800469c <siprintf>
 8000b54:	4603      	mov	r3, r0
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	23c8      	movs	r3, #200	; 0xc8
 8000b5a:	4926      	ldr	r1, [pc, #152]	; (8000bf4 <fsm_tuning+0x238>)
 8000b5c:	4826      	ldr	r0, [pc, #152]	; (8000bf8 <fsm_tuning+0x23c>)
 8000b5e:	f002 fed1 	bl	8003904 <HAL_UART_Transmit>
				if(time_yellow >= 10) time_yellow =  2;
 8000b62:	4b2e      	ldr	r3, [pc, #184]	; (8000c1c <fsm_tuning+0x260>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b09      	cmp	r3, #9
 8000b68:	dd02      	ble.n	8000b70 <fsm_tuning+0x1b4>
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <fsm_tuning+0x260>)
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	601a      	str	r2, [r3, #0]
				timeWay1 = time_yellow;
 8000b70:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <fsm_tuning+0x260>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a23      	ldr	r2, [pc, #140]	; (8000c04 <fsm_tuning+0x248>)
 8000b76:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3)){
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f7ff fae7 	bl	800014c <isButtonPressed>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d015      	beq.n	8000bb0 <fsm_tuning+0x1f4>
				timeYellow = time_yellow*timeCycle;
 8000b84:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <fsm_tuning+0x260>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a1f      	ldr	r2, [pc, #124]	; (8000c08 <fsm_tuning+0x24c>)
 8000b8a:	6812      	ldr	r2, [r2, #0]
 8000b8c:	fb02 f303 	mul.w	r3, r2, r3
 8000b90:	4a16      	ldr	r2, [pc, #88]	; (8000bec <fsm_tuning+0x230>)
 8000b92:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Yellow\r\nTime set to: %d\r\n",time_yellow), 200);
 8000b94:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <fsm_tuning+0x260>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4922      	ldr	r1, [pc, #136]	; (8000c24 <fsm_tuning+0x268>)
 8000b9c:	4815      	ldr	r0, [pc, #84]	; (8000bf4 <fsm_tuning+0x238>)
 8000b9e:	f003 fd7d 	bl	800469c <siprintf>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	23c8      	movs	r3, #200	; 0xc8
 8000ba8:	4912      	ldr	r1, [pc, #72]	; (8000bf4 <fsm_tuning+0x238>)
 8000baa:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <fsm_tuning+0x23c>)
 8000bac:	f002 feaa 	bl	8003904 <HAL_UART_Transmit>
			tuning_auto();
 8000bb0:	f7ff fee2 	bl	8000978 <tuning_auto>
			break;
 8000bb4:	e09b      	b.n	8000cee <fsm_tuning+0x332>
			if(timer_flag[4] == 1){
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <fsm_tuning+0x228>)
 8000bb8:	691b      	ldr	r3, [r3, #16]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d139      	bne.n	8000c32 <fsm_tuning+0x276>
				setTimer(4,25);
 8000bbe:	2119      	movs	r1, #25
 8000bc0:	2004      	movs	r0, #4
 8000bc2:	f000 fd2b 	bl	800161c <setTimer>
				if(blink == 0){
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <fsm_tuning+0x22c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d12c      	bne.n	8000c28 <fsm_tuning+0x26c>
					onGreen1(); // MOD_GREEN
 8000bce:	f000 f907 	bl	8000de0 <onGreen1>
					onGreen2();
 8000bd2:	f000 f939 	bl	8000e48 <onGreen2>
					blink = 1;
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <fsm_tuning+0x22c>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	e029      	b.n	8000c32 <fsm_tuning+0x276>
 8000bde:	bf00      	nop
 8000be0:	20000138 	.word	0x20000138
 8000be4:	20000150 	.word	0x20000150
 8000be8:	20000144 	.word	0x20000144
 8000bec:	20000070 	.word	0x20000070
 8000bf0:	08004ec4 	.word	0x08004ec4
 8000bf4:	2000028c 	.word	0x2000028c
 8000bf8:	20000240 	.word	0x20000240
 8000bfc:	20000074 	.word	0x20000074
 8000c00:	08004ee0 	.word	0x08004ee0
 8000c04:	2000013c 	.word	0x2000013c
 8000c08:	08005074 	.word	0x08005074
 8000c0c:	20000068 	.word	0x20000068
 8000c10:	08004f04 	.word	0x08004f04
 8000c14:	2000006c 	.word	0x2000006c
 8000c18:	08004f24 	.word	0x08004f24
 8000c1c:	2000007c 	.word	0x2000007c
 8000c20:	08004f40 	.word	0x08004f40
 8000c24:	08004f68 	.word	0x08004f68
					resetLED();
 8000c28:	f000 f894 	bl	8000d54 <resetLED>
					blink = 0;
 8000c2c:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <fsm_tuning+0x338>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(1)){
 8000c32:	2001      	movs	r0, #1
 8000c34:	f7ff fa8a 	bl	800014c <isButtonPressed>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d014      	beq.n	8000c68 <fsm_tuning+0x2ac>
				state = MOD_RED;
 8000c3e:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <fsm_tuning+0x33c>)
 8000c40:	2207      	movs	r2, #7
 8000c42:	701a      	strb	r2, [r3, #0]
				setTimer(4,25);
 8000c44:	2119      	movs	r1, #25
 8000c46:	2004      	movs	r0, #4
 8000c48:	f000 fce8 	bl	800161c <setTimer>
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Red\r\nTime: %d\r\n",timeRed), 200);
 8000c4c:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <fsm_tuning+0x340>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	492b      	ldr	r1, [pc, #172]	; (8000d00 <fsm_tuning+0x344>)
 8000c54:	482b      	ldr	r0, [pc, #172]	; (8000d04 <fsm_tuning+0x348>)
 8000c56:	f003 fd21 	bl	800469c <siprintf>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	23c8      	movs	r3, #200	; 0xc8
 8000c60:	4928      	ldr	r1, [pc, #160]	; (8000d04 <fsm_tuning+0x348>)
 8000c62:	4829      	ldr	r0, [pc, #164]	; (8000d08 <fsm_tuning+0x34c>)
 8000c64:	f002 fe4e 	bl	8003904 <HAL_UART_Transmit>
			if(isButtonPressed(2) == 1){
 8000c68:	2002      	movs	r0, #2
 8000c6a:	f7ff fa6f 	bl	800014c <isButtonPressed>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d11d      	bne.n	8000cb0 <fsm_tuning+0x2f4>
				time_green++;
 8000c74:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <fsm_tuning+0x350>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	4a24      	ldr	r2, [pc, #144]	; (8000d0c <fsm_tuning+0x350>)
 8000c7c:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Green\r\nIncrease time to: %d\r\n",time_green), 200);
 8000c7e:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <fsm_tuning+0x350>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	4922      	ldr	r1, [pc, #136]	; (8000d10 <fsm_tuning+0x354>)
 8000c86:	481f      	ldr	r0, [pc, #124]	; (8000d04 <fsm_tuning+0x348>)
 8000c88:	f003 fd08 	bl	800469c <siprintf>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	23c8      	movs	r3, #200	; 0xc8
 8000c92:	491c      	ldr	r1, [pc, #112]	; (8000d04 <fsm_tuning+0x348>)
 8000c94:	481c      	ldr	r0, [pc, #112]	; (8000d08 <fsm_tuning+0x34c>)
 8000c96:	f002 fe35 	bl	8003904 <HAL_UART_Transmit>
				if(time_green >= 10) time_green =  3;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <fsm_tuning+0x350>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b09      	cmp	r3, #9
 8000ca0:	dd02      	ble.n	8000ca8 <fsm_tuning+0x2ec>
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <fsm_tuning+0x350>)
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	601a      	str	r2, [r3, #0]
				timeWay1 = time_green;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <fsm_tuning+0x350>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <fsm_tuning+0x358>)
 8000cae:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(3)){
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f7ff fa4b 	bl	800014c <isButtonPressed>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d015      	beq.n	8000ce8 <fsm_tuning+0x32c>
				timeGreen = time_green*timeCycle;
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <fsm_tuning+0x350>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a15      	ldr	r2, [pc, #84]	; (8000d18 <fsm_tuning+0x35c>)
 8000cc2:	6812      	ldr	r2, [r2, #0]
 8000cc4:	fb02 f303 	mul.w	r3, r2, r3
 8000cc8:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <fsm_tuning+0x360>)
 8000cca:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tuning: Green\r\nTime set to: %d\r\n",time_green), 200);
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <fsm_tuning+0x350>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4913      	ldr	r1, [pc, #76]	; (8000d20 <fsm_tuning+0x364>)
 8000cd4:	480b      	ldr	r0, [pc, #44]	; (8000d04 <fsm_tuning+0x348>)
 8000cd6:	f003 fce1 	bl	800469c <siprintf>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	23c8      	movs	r3, #200	; 0xc8
 8000ce0:	4908      	ldr	r1, [pc, #32]	; (8000d04 <fsm_tuning+0x348>)
 8000ce2:	4809      	ldr	r0, [pc, #36]	; (8000d08 <fsm_tuning+0x34c>)
 8000ce4:	f002 fe0e 	bl	8003904 <HAL_UART_Transmit>
			tuning_auto();
 8000ce8:	f7ff fe46 	bl	8000978 <tuning_auto>
			break;
 8000cec:	bf00      	nop
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000144 	.word	0x20000144
 8000cf8:	20000138 	.word	0x20000138
 8000cfc:	20000068 	.word	0x20000068
 8000d00:	08004f8c 	.word	0x08004f8c
 8000d04:	2000028c 	.word	0x2000028c
 8000d08:	20000240 	.word	0x20000240
 8000d0c:	20000078 	.word	0x20000078
 8000d10:	08004fa4 	.word	0x08004fa4
 8000d14:	2000013c 	.word	0x2000013c
 8000d18:	08005074 	.word	0x08005074
 8000d1c:	2000006c 	.word	0x2000006c
 8000d20:	08004fcc 	.word	0x08004fcc

08000d24 <clearScreen>:
	buffer7SEG[1] = a%10;
	buffer7SEG[2] = b/10;
	buffer7SEG[3] = b%10;
}

void clearScreen() {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
    // ANSI escape code for clearing the screen
    HAL_UART_Transmit(&huart2, (uint8_t*)"\033[2J", 4, HAL_MAX_DELAY);
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	4906      	ldr	r1, [pc, #24]	; (8000d48 <clearScreen+0x24>)
 8000d30:	4806      	ldr	r0, [pc, #24]	; (8000d4c <clearScreen+0x28>)
 8000d32:	f002 fde7 	bl	8003904 <HAL_UART_Transmit>
    // Move the cursor to the top-left corner
    HAL_UART_Transmit(&huart2, (uint8_t*)"\033[H", 3, HAL_MAX_DELAY);
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	4904      	ldr	r1, [pc, #16]	; (8000d50 <clearScreen+0x2c>)
 8000d3e:	4803      	ldr	r0, [pc, #12]	; (8000d4c <clearScreen+0x28>)
 8000d40:	f002 fde0 	bl	8003904 <HAL_UART_Transmit>
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	08004ff0 	.word	0x08004ff0
 8000d4c:	20000240 	.word	0x20000240
 8000d50:	08004ff8 	.word	0x08004ff8

08000d54 <resetLED>:
 *  Created on: Nov 28, 2023
 *      Author: Lenovo
 */

#include "led_control.h"
void resetLED(){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5e:	480a      	ldr	r0, [pc, #40]	; (8000d88 <resetLED+0x34>)
 8000d60:	f001 f9f3 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2108      	movs	r1, #8
 8000d68:	4808      	ldr	r0, [pc, #32]	; (8000d8c <resetLED+0x38>)
 8000d6a:	f001 f9ee 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2120      	movs	r1, #32
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <resetLED+0x38>)
 8000d74:	f001 f9e9 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2110      	movs	r1, #16
 8000d7c:	4803      	ldr	r0, [pc, #12]	; (8000d8c <resetLED+0x38>)
 8000d7e:	f001 f9e4 	bl	800214a <HAL_GPIO_WritePin>
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40010800 	.word	0x40010800
 8000d8c:	40010c00 	.word	0x40010c00

08000d90 <onRed1>:
void onRed1(){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, 1);
 8000d94:	2201      	movs	r2, #1
 8000d96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <onRed1+0x20>)
 8000d9c:	f001 f9d5 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, 0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2108      	movs	r1, #8
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <onRed1+0x24>)
 8000da6:	f001 f9d0 	bl	800214a <HAL_GPIO_WritePin>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40010800 	.word	0x40010800
 8000db4:	40010c00 	.word	0x40010c00

08000db8 <onYellow1>:
void onYellow1(){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, 1);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <onYellow1+0x20>)
 8000dc4:	f001 f9c1 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, 1);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2108      	movs	r1, #8
 8000dcc:	4803      	ldr	r0, [pc, #12]	; (8000ddc <onYellow1+0x24>)
 8000dce:	f001 f9bc 	bl	800214a <HAL_GPIO_WritePin>
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40010800 	.word	0x40010800
 8000ddc:	40010c00 	.word	0x40010c00

08000de0 <onGreen1>:
void onGreen1(){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, 0);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <onGreen1+0x20>)
 8000dec:	f001 f9ad 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, 1);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2108      	movs	r1, #8
 8000df4:	4803      	ldr	r0, [pc, #12]	; (8000e04 <onGreen1+0x24>)
 8000df6:	f001 f9a8 	bl	800214a <HAL_GPIO_WritePin>
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40010800 	.word	0x40010800
 8000e04:	40010c00 	.word	0x40010c00

08000e08 <onRed2>:

void onRed2(){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, 1);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2120      	movs	r1, #32
 8000e10:	4804      	ldr	r0, [pc, #16]	; (8000e24 <onRed2+0x1c>)
 8000e12:	f001 f99a 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2110      	movs	r1, #16
 8000e1a:	4802      	ldr	r0, [pc, #8]	; (8000e24 <onRed2+0x1c>)
 8000e1c:	f001 f995 	bl	800214a <HAL_GPIO_WritePin>
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40010c00 	.word	0x40010c00

08000e28 <onYellow2>:
void onYellow2(){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, 1);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2120      	movs	r1, #32
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <onYellow2+0x1c>)
 8000e32:	f001 f98a 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, 1);
 8000e36:	2201      	movs	r2, #1
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4802      	ldr	r0, [pc, #8]	; (8000e44 <onYellow2+0x1c>)
 8000e3c:	f001 f985 	bl	800214a <HAL_GPIO_WritePin>
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40010c00 	.word	0x40010c00

08000e48 <onGreen2>:
void onGreen2(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2120      	movs	r1, #32
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <onGreen2+0x1c>)
 8000e52:	f001 f97a 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2110      	movs	r1, #16
 8000e5a:	4802      	ldr	r0, [pc, #8]	; (8000e64 <onGreen2+0x1c>)
 8000e5c:	f001 f975 	bl	800214a <HAL_GPIO_WritePin>
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40010c00 	.word	0x40010c00

08000e68 <pedRed>:
void pedRed() {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_0_GPIO_Port, PED_0_Pin, 1);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <pedRed+0x20>)
 8000e74:	f001 f969 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_1_GPIO_Port, PED_1_Pin, 0);		
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7e:	4803      	ldr	r0, [pc, #12]	; (8000e8c <pedRed+0x24>)
 8000e80:	f001 f963 	bl	800214a <HAL_GPIO_WritePin>
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40010c00 	.word	0x40010c00
 8000e8c:	40010800 	.word	0x40010800

08000e90 <pedGreen>:
void pedGreen() {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_0_GPIO_Port, PED_0_Pin, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <pedGreen+0x20>)
 8000e9c:	f001 f955 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_1_GPIO_Port, PED_1_Pin, 1);	
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea6:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <pedGreen+0x24>)
 8000ea8:	f001 f94f 	bl	800214a <HAL_GPIO_WritePin>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40010c00 	.word	0x40010c00
 8000eb4:	40010800 	.word	0x40010800

08000eb8 <pedReset>:
void pedReset() {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PED_0_GPIO_Port, PED_0_Pin, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <pedReset+0x20>)
 8000ec4:	f001 f941 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PED_1_GPIO_Port, PED_1_Pin, 0);	
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ece:	4803      	ldr	r0, [pc, #12]	; (8000edc <pedReset+0x24>)
 8000ed0:	f001 f93b 	bl	800214a <HAL_GPIO_WritePin>
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40010c00 	.word	0x40010c00
 8000edc:	40010800 	.word	0x40010800

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee4:	f000 fd74 	bl	80019d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee8:	f000 f83a 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eec:	f000 f966 	bl	80011bc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ef0:	f000 f878 	bl	8000fe4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ef4:	f000 f8c2 	bl	800107c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000ef8:	f000 f936 	bl	8001168 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000efc:	4812      	ldr	r0, [pc, #72]	; (8000f48 <main+0x68>)
 8000efe:	f001 fd9b 	bl	8002a38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f02:	2100      	movs	r1, #0
 8000f04:	4811      	ldr	r0, [pc, #68]	; (8000f4c <main+0x6c>)
 8000f06:	f001 fe41 	bl	8002b8c <HAL_TIM_PWM_Start>
  setTimer(0, 23);
 8000f0a:	2117      	movs	r1, #23
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f000 fb85 	bl	800161c <setTimer>
  setTimer(3, 10);
 8000f12:	210a      	movs	r1, #10
 8000f14:	2003      	movs	r0, #3
 8000f16:	f000 fb81 	bl	800161c <setTimer>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(&fsm_auto, 20, 50);
 8000f1a:	2232      	movs	r2, #50	; 0x32
 8000f1c:	2114      	movs	r1, #20
 8000f1e:	480c      	ldr	r0, [pc, #48]	; (8000f50 <main+0x70>)
 8000f20:	f000 fa2a 	bl	8001378 <SCH_Add_Task>
  SCH_Add_Task(&fsm_pedestrian, 20, 50);
 8000f24:	2232      	movs	r2, #50	; 0x32
 8000f26:	2114      	movs	r1, #20
 8000f28:	480a      	ldr	r0, [pc, #40]	; (8000f54 <main+0x74>)
 8000f2a:	f000 fa25 	bl	8001378 <SCH_Add_Task>
  SCH_Add_Task(&fsm_manual, 20, 50);
 8000f2e:	2232      	movs	r2, #50	; 0x32
 8000f30:	2114      	movs	r1, #20
 8000f32:	4809      	ldr	r0, [pc, #36]	; (8000f58 <main+0x78>)
 8000f34:	f000 fa20 	bl	8001378 <SCH_Add_Task>
  SCH_Add_Task(&fsm_tuning, 20, 50);
 8000f38:	2232      	movs	r2, #50	; 0x32
 8000f3a:	2114      	movs	r1, #20
 8000f3c:	4807      	ldr	r0, [pc, #28]	; (8000f5c <main+0x7c>)
 8000f3e:	f000 fa1b 	bl	8001378 <SCH_Add_Task>

//  int i = 50;
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000f42:	f000 fae9 	bl	8001518 <SCH_Dispatch_Tasks>
 8000f46:	e7fc      	b.n	8000f42 <main+0x62>
 8000f48:	200001f8 	.word	0x200001f8
 8000f4c:	200001ac 	.word	0x200001ac
 8000f50:	08000359 	.word	0x08000359
 8000f54:	0800088d 	.word	0x0800088d
 8000f58:	08000759 	.word	0x08000759
 8000f5c:	080009bd 	.word	0x080009bd

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b090      	sub	sp, #64	; 0x40
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0318 	add.w	r3, r7, #24
 8000f6a:	2228      	movs	r2, #40	; 0x28
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 fad6 	bl	8004520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f82:	2302      	movs	r3, #2
 8000f84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f86:	2301      	movs	r3, #1
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8a:	2310      	movs	r3, #16
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f92:	2300      	movs	r3, #0
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f96:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9c:	f107 0318 	add.w	r3, r7, #24
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f001 f8eb 	bl	800217c <HAL_RCC_OscConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000fac:	f000 f982 	bl	80012b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2102      	movs	r1, #2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 fb56 	bl	800267c <HAL_RCC_ClockConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000fd6:	f000 f96d 	bl	80012b4 <Error_Handler>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3740      	adds	r7, #64	; 0x40
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_TIM2_Init+0x94>)
 8001002:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001006:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <MX_TIM2_Init+0x94>)
 800100a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800100e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <MX_TIM2_Init+0x94>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <MX_TIM2_Init+0x94>)
 8001018:	224f      	movs	r2, #79	; 0x4f
 800101a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <MX_TIM2_Init+0x94>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <MX_TIM2_Init+0x94>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001028:	4813      	ldr	r0, [pc, #76]	; (8001078 <MX_TIM2_Init+0x94>)
 800102a:	f001 fcb5 	bl	8002998 <HAL_TIM_Base_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001034:	f000 f93e 	bl	80012b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	4619      	mov	r1, r3
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <MX_TIM2_Init+0x94>)
 8001046:	f002 f80d 	bl	8003064 <HAL_TIM_ConfigClockSource>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001050:	f000 f930 	bl	80012b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800105c:	463b      	mov	r3, r7
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_TIM2_Init+0x94>)
 8001062:	f002 fb8f 	bl	8003784 <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800106c:	f000 f922 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200001f8 	.word	0x200001f8

0800107c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08e      	sub	sp, #56	; 0x38
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	f107 0320 	add.w	r3, r7, #32
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
 80010a8:	615a      	str	r2, [r3, #20]
 80010aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ac:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <MX_TIM3_Init+0xe4>)
 80010ae:	4a2d      	ldr	r2, [pc, #180]	; (8001164 <MX_TIM3_Init+0xe8>)
 80010b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80010b2:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <MX_TIM3_Init+0xe4>)
 80010b4:	224f      	movs	r2, #79	; 0x4f
 80010b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b8:	4b29      	ldr	r3, [pc, #164]	; (8001160 <MX_TIM3_Init+0xe4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 80010be:	4b28      	ldr	r3, [pc, #160]	; (8001160 <MX_TIM3_Init+0xe4>)
 80010c0:	224f      	movs	r2, #79	; 0x4f
 80010c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c4:	4b26      	ldr	r3, [pc, #152]	; (8001160 <MX_TIM3_Init+0xe4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <MX_TIM3_Init+0xe4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010d0:	4823      	ldr	r0, [pc, #140]	; (8001160 <MX_TIM3_Init+0xe4>)
 80010d2:	f001 fc61 	bl	8002998 <HAL_TIM_Base_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80010dc:	f000 f8ea 	bl	80012b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ea:	4619      	mov	r1, r3
 80010ec:	481c      	ldr	r0, [pc, #112]	; (8001160 <MX_TIM3_Init+0xe4>)
 80010ee:	f001 ffb9 	bl	8003064 <HAL_TIM_ConfigClockSource>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80010f8:	f000 f8dc 	bl	80012b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010fc:	4818      	ldr	r0, [pc, #96]	; (8001160 <MX_TIM3_Init+0xe4>)
 80010fe:	f001 fced 	bl	8002adc <HAL_TIM_PWM_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001108:	f000 f8d4 	bl	80012b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001114:	f107 0320 	add.w	r3, r7, #32
 8001118:	4619      	mov	r1, r3
 800111a:	4811      	ldr	r0, [pc, #68]	; (8001160 <MX_TIM3_Init+0xe4>)
 800111c:	f002 fb32 	bl	8003784 <HAL_TIMEx_MasterConfigSynchronization>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001126:	f000 f8c5 	bl	80012b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112a:	2360      	movs	r3, #96	; 0x60
 800112c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	4619      	mov	r1, r3
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <MX_TIM3_Init+0xe4>)
 8001142:	f001 fecd 	bl	8002ee0 <HAL_TIM_PWM_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800114c:	f000 f8b2 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001150:	4803      	ldr	r0, [pc, #12]	; (8001160 <MX_TIM3_Init+0xe4>)
 8001152:	f000 fb23 	bl	800179c <HAL_TIM_MspPostInit>

}
 8001156:	bf00      	nop
 8001158:	3738      	adds	r7, #56	; 0x38
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200001ac 	.word	0x200001ac
 8001164:	40000400 	.word	0x40000400

08001168 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_USART2_UART_Init+0x50>)
 8001170:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001178:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 80011a0:	f002 fb60 	bl	8003864 <HAL_UART_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011aa:	f000 f883 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000240 	.word	0x20000240
 80011b8:	40004400 	.word	0x40004400

080011bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b2e      	ldr	r3, [pc, #184]	; (800128c <MX_GPIO_Init+0xd0>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a2d      	ldr	r2, [pc, #180]	; (800128c <MX_GPIO_Init+0xd0>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b2b      	ldr	r3, [pc, #172]	; (800128c <MX_GPIO_Init+0xd0>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e8:	4b28      	ldr	r3, [pc, #160]	; (800128c <MX_GPIO_Init+0xd0>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a27      	ldr	r2, [pc, #156]	; (800128c <MX_GPIO_Init+0xd0>)
 80011ee:	f043 0308 	orr.w	r3, r3, #8
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b25      	ldr	r3, [pc, #148]	; (800128c <MX_GPIO_Init+0xd0>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PED_0_Pin|LED_01_Pin|LED_11_Pin|LED_10_Pin, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001206:	4822      	ldr	r0, [pc, #136]	; (8001290 <MX_GPIO_Init+0xd4>)
 8001208:	f000 ff9f 	bl	800214a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PED_1_Pin|LED_00_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001212:	4820      	ldr	r0, [pc, #128]	; (8001294 <MX_GPIO_Init+0xd8>)
 8001214:	f000 ff99 	bl	800214a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN3_Pin BTN0_Pin BTN1_Pin */
  GPIO_InitStruct.Pin = BTN3_Pin|BTN0_Pin|BTN1_Pin;
 8001218:	2313      	movs	r3, #19
 800121a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001220:	2301      	movs	r3, #1
 8001222:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f107 0308 	add.w	r3, r7, #8
 8001228:	4619      	mov	r1, r3
 800122a:	481a      	ldr	r0, [pc, #104]	; (8001294 <MX_GPIO_Init+0xd8>)
 800122c:	f000 fdf2 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8001230:	2301      	movs	r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001238:	2301      	movs	r3, #1
 800123a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	4619      	mov	r1, r3
 8001242:	4813      	ldr	r0, [pc, #76]	; (8001290 <MX_GPIO_Init+0xd4>)
 8001244:	f000 fde6 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PED_0_Pin LED_01_Pin LED_11_Pin LED_10_Pin */
  GPIO_InitStruct.Pin = PED_0_Pin|LED_01_Pin|LED_11_Pin|LED_10_Pin;
 8001248:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800124c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2302      	movs	r3, #2
 8001258:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	4619      	mov	r1, r3
 8001260:	480b      	ldr	r0, [pc, #44]	; (8001290 <MX_GPIO_Init+0xd4>)
 8001262:	f000 fdd7 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PED_1_Pin LED_00_Pin */
  GPIO_InitStruct.Pin = PED_1_Pin|LED_00_Pin;
 8001266:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800126a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2302      	movs	r3, #2
 8001276:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	4619      	mov	r1, r3
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_GPIO_Init+0xd8>)
 8001280:	f000 fdc8 	bl	8001e14 <HAL_GPIO_Init>

}
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000
 8001290:	40010c00 	.word	0x40010c00
 8001294:	40010800 	.word	0x40010800

08001298 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80012a0:	f000 f90e 	bl	80014c0 <SCH_Update>
	timerRun();
 80012a4:	f000 f9fa 	bl	800169c <timerRun>
	getKeyInput();
 80012a8:	f7fe ff7a 	bl	80001a0 <getKeyInput>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b8:	b672      	cpsid	i
}
 80012ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012bc:	e7fe      	b.n	80012bc <Error_Handler+0x8>
	...

080012c0 <SCH_Find_Position>:
}*sTaskList = 0;

char str[100];
uint8_t tracker[MAX_SCHEDULER_TASKS], mutex_lock;

void SCH_Find_Position(struct sTask *index){
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	if(index == sTaskList){
 80012c8:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <SCH_Find_Position+0xb4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d04b      	beq.n	800136a <SCH_Find_Position+0xaa>
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "FIND POSITION: only 1 task\r\n"), 200);
		return;
	}
	struct sTask *iterator = sTaskList;
 80012d2:	4b28      	ldr	r3, [pc, #160]	; (8001374 <SCH_Find_Position+0xb4>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	60fb      	str	r3, [r7, #12]
	//Not yet found position
	uint8_t check = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	72fb      	strb	r3, [r7, #11]
	while(iterator->delay <= index->delay){
 80012dc:	e014      	b.n	8001308 <SCH_Find_Position+0x48>
		if(iterator == sTaskList) check += 1;
 80012de:	4b25      	ldr	r3, [pc, #148]	; (8001374 <SCH_Find_Position+0xb4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d102      	bne.n	80012ee <SCH_Find_Position+0x2e>
 80012e8:	7afb      	ldrb	r3, [r7, #11]
 80012ea:	3301      	adds	r3, #1
 80012ec:	72fb      	strb	r3, [r7, #11]
		if(check == 2) break;
 80012ee:	7afb      	ldrb	r3, [r7, #11]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d010      	beq.n	8001316 <SCH_Find_Position+0x56>
		index->delay -= iterator->delay;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	1ad2      	subs	r2, r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	60da      	str	r2, [r3, #12]
		iterator = iterator->right;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	60fb      	str	r3, [r7, #12]
	while(iterator->delay <= index->delay){
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	429a      	cmp	r2, r3
 8001312:	d9e4      	bls.n	80012de <SCH_Find_Position+0x1e>
 8001314:	e000      	b.n	8001318 <SCH_Find_Position+0x58>
		if(check == 2) break;
 8001316:	bf00      	nop
	}
	//Found position
	if(index->delay == 0) index->run_flag = 1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <SCH_Find_Position+0x66>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	761a      	strb	r2, [r3, #24]
	index->right = iterator;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	605a      	str	r2, [r3, #4]
	index->left = iterator->left;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	601a      	str	r2, [r3, #0]
	iterator->left->right = index;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	605a      	str	r2, [r3, #4]
	iterator->left = index;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	601a      	str	r2, [r3, #0]
	//Update the immediately after
	if(iterator != sTaskList){
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <SCH_Find_Position+0xb4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	429a      	cmp	r2, r3
 800134a:	d00f      	beq.n	800136c <SCH_Find_Position+0xac>
		iterator->delay -= index->delay;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	1ad2      	subs	r2, r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	60da      	str	r2, [r3, #12]
		if(iterator->delay == 0) iterator->run_flag = 1;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d104      	bne.n	800136c <SCH_Find_Position+0xac>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2201      	movs	r2, #1
 8001366:	761a      	strb	r2, [r3, #24]
 8001368:	e000      	b.n	800136c <SCH_Find_Position+0xac>
		return;
 800136a:	bf00      	nop
	}
	//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "FIND POSITION: %lu %lu\r\n", index->taskID, index->delay), 200);
	//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "FIND POSITION: Before %lu %lu\r\n", index->left->taskID, index->left->delay), 200);
	//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "FIND POSITION: After %lu %lu\r\n", index->right->taskID, index->right->delay), 200);
}
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	2000014c 	.word	0x2000014c

08001378 <SCH_Add_Task>:

int SCH_Add_Task(void (*funcPointer)(), uint32_t delay, uint32_t period){
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
	if(!funcPointer){
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10d      	bne.n	80013a6 <SCH_Add_Task+0x2e>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Function pointer invalid\r\n"), 200);
 800138a:	4943      	ldr	r1, [pc, #268]	; (8001498 <SCH_Add_Task+0x120>)
 800138c:	4843      	ldr	r0, [pc, #268]	; (800149c <SCH_Add_Task+0x124>)
 800138e:	f003 f985 	bl	800469c <siprintf>
 8001392:	4603      	mov	r3, r0
 8001394:	b29a      	uxth	r2, r3
 8001396:	23c8      	movs	r3, #200	; 0xc8
 8001398:	4940      	ldr	r1, [pc, #256]	; (800149c <SCH_Add_Task+0x124>)
 800139a:	4841      	ldr	r0, [pc, #260]	; (80014a0 <SCH_Add_Task+0x128>)
 800139c:	f002 fab2 	bl	8003904 <HAL_UART_Transmit>
		return -1;
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295
 80013a4:	e074      	b.n	8001490 <SCH_Add_Task+0x118>
	}
	uint32_t runnerID = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
	while((runnerID < MAX_SCHEDULER_TASKS) && (tracker[runnerID])){
 80013aa:	e002      	b.n	80013b2 <SCH_Add_Task+0x3a>
		runnerID += 1;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3301      	adds	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
	while((runnerID < MAX_SCHEDULER_TASKS) && (tracker[runnerID])){
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2b27      	cmp	r3, #39	; 0x27
 80013b6:	d805      	bhi.n	80013c4 <SCH_Add_Task+0x4c>
 80013b8:	4a3a      	ldr	r2, [pc, #232]	; (80014a4 <SCH_Add_Task+0x12c>)
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	4413      	add	r3, r2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f3      	bne.n	80013ac <SCH_Add_Task+0x34>
	}
	if(runnerID == MAX_SCHEDULER_TASKS){
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2b28      	cmp	r3, #40	; 0x28
 80013c8:	d10d      	bne.n	80013e6 <SCH_Add_Task+0x6e>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Scheduler full\r\n"), 200);
 80013ca:	4937      	ldr	r1, [pc, #220]	; (80014a8 <SCH_Add_Task+0x130>)
 80013cc:	4833      	ldr	r0, [pc, #204]	; (800149c <SCH_Add_Task+0x124>)
 80013ce:	f003 f965 	bl	800469c <siprintf>
 80013d2:	4603      	mov	r3, r0
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	23c8      	movs	r3, #200	; 0xc8
 80013d8:	4930      	ldr	r1, [pc, #192]	; (800149c <SCH_Add_Task+0x124>)
 80013da:	4831      	ldr	r0, [pc, #196]	; (80014a0 <SCH_Add_Task+0x128>)
 80013dc:	f002 fa92 	bl	8003904 <HAL_UART_Transmit>
		return -1;
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
 80013e4:	e054      	b.n	8001490 <SCH_Add_Task+0x118>
	}else tracker[runnerID] = 1;
 80013e6:	4a2f      	ldr	r2, [pc, #188]	; (80014a4 <SCH_Add_Task+0x12c>)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	4413      	add	r3, r2
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]
	mutex_lock = 1;
 80013f0:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <SCH_Add_Task+0x134>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
	struct sTask *curTask = (struct sTask*)malloc(sizeof(struct sTask));
 80013f6:	201c      	movs	r0, #28
 80013f8:	f003 f882 	bl	8004500 <malloc>
 80013fc:	4603      	mov	r3, r0
 80013fe:	613b      	str	r3, [r7, #16]
	curTask->delay = delay/TIMER_INTERRUPT_PERIOD;
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4a2b      	ldr	r2, [pc, #172]	; (80014b0 <SCH_Add_Task+0x138>)
 8001404:	fba2 2303 	umull	r2, r3, r2, r3
 8001408:	08da      	lsrs	r2, r3, #3
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	60da      	str	r2, [r3, #12]
	curTask->period = period/TIMER_INTERRUPT_PERIOD;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a27      	ldr	r2, [pc, #156]	; (80014b0 <SCH_Add_Task+0x138>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	08da      	lsrs	r2, r3, #3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	611a      	str	r2, [r3, #16]
	curTask->funcPointer = funcPointer;
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	609a      	str	r2, [r3, #8]
	curTask->taskID = runnerID;
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	615a      	str	r2, [r3, #20]
	curTask->run_flag = 0;
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	2200      	movs	r2, #0
 800142c:	761a      	strb	r2, [r3, #24]
	if(sTaskList){
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <SCH_Add_Task+0x13c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d011      	beq.n	800145a <SCH_Add_Task+0xe2>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Added %lu\r\n", curTask->taskID), 200);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	461a      	mov	r2, r3
 800143c:	491e      	ldr	r1, [pc, #120]	; (80014b8 <SCH_Add_Task+0x140>)
 800143e:	4817      	ldr	r0, [pc, #92]	; (800149c <SCH_Add_Task+0x124>)
 8001440:	f003 f92c 	bl	800469c <siprintf>
 8001444:	4603      	mov	r3, r0
 8001446:	b29a      	uxth	r2, r3
 8001448:	23c8      	movs	r3, #200	; 0xc8
 800144a:	4914      	ldr	r1, [pc, #80]	; (800149c <SCH_Add_Task+0x124>)
 800144c:	4814      	ldr	r0, [pc, #80]	; (80014a0 <SCH_Add_Task+0x128>)
 800144e:	f002 fa59 	bl	8003904 <HAL_UART_Transmit>
		SCH_Find_Position(curTask);
 8001452:	6938      	ldr	r0, [r7, #16]
 8001454:	f7ff ff34 	bl	80012c0 <SCH_Find_Position>
 8001458:	e016      	b.n	8001488 <SCH_Add_Task+0x110>
	}else{
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Added first %lu\r\n", curTask->taskID), 200);
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	461a      	mov	r2, r3
 8001460:	4916      	ldr	r1, [pc, #88]	; (80014bc <SCH_Add_Task+0x144>)
 8001462:	480e      	ldr	r0, [pc, #56]	; (800149c <SCH_Add_Task+0x124>)
 8001464:	f003 f91a 	bl	800469c <siprintf>
 8001468:	4603      	mov	r3, r0
 800146a:	b29a      	uxth	r2, r3
 800146c:	23c8      	movs	r3, #200	; 0xc8
 800146e:	490b      	ldr	r1, [pc, #44]	; (800149c <SCH_Add_Task+0x124>)
 8001470:	480b      	ldr	r0, [pc, #44]	; (80014a0 <SCH_Add_Task+0x128>)
 8001472:	f002 fa47 	bl	8003904 <HAL_UART_Transmit>
		curTask->left = curTask;
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	601a      	str	r2, [r3, #0]
		curTask->right = curTask;
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	605a      	str	r2, [r3, #4]
		sTaskList = curTask;
 8001482:	4a0c      	ldr	r2, [pc, #48]	; (80014b4 <SCH_Add_Task+0x13c>)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	6013      	str	r3, [r2, #0]
	}
	mutex_lock = 0;
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <SCH_Add_Task+0x134>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
	return runnerID;
 800148e:	697b      	ldr	r3, [r7, #20]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	08004ffc 	.word	0x08004ffc
 800149c:	2000028c 	.word	0x2000028c
 80014a0:	20000240 	.word	0x20000240
 80014a4:	200002f0 	.word	0x200002f0
 80014a8:	08005024 	.word	0x08005024
 80014ac:	20000288 	.word	0x20000288
 80014b0:	cccccccd 	.word	0xcccccccd
 80014b4:	2000014c 	.word	0x2000014c
 80014b8:	08005040 	.word	0x08005040
 80014bc:	08005058 	.word	0x08005058

080014c0 <SCH_Update>:

void SCH_Update(){
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
	if((sTaskList) && (!sTaskList->run_flag) && (!mutex_lock)){
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <SCH_Update+0x50>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d01d      	beq.n	8001508 <SCH_Update+0x48>
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <SCH_Update+0x50>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	7e1b      	ldrb	r3, [r3, #24]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d118      	bne.n	8001508 <SCH_Update+0x48>
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <SCH_Update+0x54>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d114      	bne.n	8001508 <SCH_Update+0x48>
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "UPDATE: %lu\r\n", sTaskList->taskID), 50);
		if(sTaskList->delay > 0) sTaskList->delay -= 1;
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <SCH_Update+0x50>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d006      	beq.n	80014f6 <SCH_Update+0x36>
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <SCH_Update+0x50>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68da      	ldr	r2, [r3, #12]
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <SCH_Update+0x50>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	3a01      	subs	r2, #1
 80014f4:	60da      	str	r2, [r3, #12]
		if(sTaskList->delay <= 0) sTaskList->run_flag = 1;
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <SCH_Update+0x50>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d103      	bne.n	8001508 <SCH_Update+0x48>
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <SCH_Update+0x50>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2201      	movs	r2, #1
 8001506:	761a      	strb	r2, [r3, #24]
	}
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	2000014c 	.word	0x2000014c
 8001514:	20000288 	.word	0x20000288

08001518 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
	mutex_lock = 1;
 800151e:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <SCH_Dispatch_Tasks+0x9c>)
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
	while((sTaskList) && (sTaskList->run_flag)){
 8001524:	e036      	b.n	8001594 <SCH_Dispatch_Tasks+0x7c>
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "DISPATCH: Task executing %lu\r\n", sTaskList->taskID), 200);
		(*sTaskList->funcPointer)();
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <SCH_Dispatch_Tasks+0xa0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	4798      	blx	r3
		if(sTaskList->period == 0){
 800152e:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <SCH_Dispatch_Tasks+0xa0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d10d      	bne.n	8001554 <SCH_Dispatch_Tasks+0x3c>
			struct sTask *toDelete = sTaskList;
 8001538:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <SCH_Dispatch_Tasks+0xa0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	603b      	str	r3, [r7, #0]
			sTaskList = sTaskList->right;
 800153e:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <SCH_Dispatch_Tasks+0xa0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4a1c      	ldr	r2, [pc, #112]	; (80015b8 <SCH_Dispatch_Tasks+0xa0>)
 8001546:	6013      	str	r3, [r2, #0]
			SCH_Delete_Task(toDelete->taskID);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f835 	bl	80015bc <SCH_Delete_Task>
 8001552:	e01f      	b.n	8001594 <SCH_Dispatch_Tasks+0x7c>
		}else{
			struct sTask *toFind = sTaskList;
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <SCH_Dispatch_Tasks+0xa0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	607b      	str	r3, [r7, #4]
			sTaskList->right->left = sTaskList->left;
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <SCH_Dispatch_Tasks+0xa0>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <SCH_Dispatch_Tasks+0xa0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	601a      	str	r2, [r3, #0]
			sTaskList->left->right = sTaskList->right;
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <SCH_Dispatch_Tasks+0xa0>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <SCH_Dispatch_Tasks+0xa0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6852      	ldr	r2, [r2, #4]
 8001574:	605a      	str	r2, [r3, #4]
			sTaskList = sTaskList->right;
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <SCH_Dispatch_Tasks+0xa0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <SCH_Dispatch_Tasks+0xa0>)
 800157e:	6013      	str	r3, [r2, #0]
			toFind->run_flag = 0;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	761a      	strb	r2, [r3, #24]
			toFind->delay = toFind->period;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	60da      	str	r2, [r3, #12]
			SCH_Find_Position(toFind);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff fe96 	bl	80012c0 <SCH_Find_Position>
	while((sTaskList) && (sTaskList->run_flag)){
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <SCH_Dispatch_Tasks+0xa0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d004      	beq.n	80015a6 <SCH_Dispatch_Tasks+0x8e>
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <SCH_Dispatch_Tasks+0xa0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	7e1b      	ldrb	r3, [r3, #24]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1bf      	bne.n	8001526 <SCH_Dispatch_Tasks+0xe>
		}
	}
	mutex_lock = 0;
 80015a6:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <SCH_Dispatch_Tasks+0x9c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000288 	.word	0x20000288
 80015b8:	2000014c 	.word	0x2000014c

080015bc <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t index){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	if(tracker[index]){
 80015c4:	4a13      	ldr	r2, [pc, #76]	; (8001614 <SCH_Delete_Task+0x58>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d01d      	beq.n	800160c <SCH_Delete_Task+0x50>
		tracker[index] = 0;
 80015d0:	4a10      	ldr	r2, [pc, #64]	; (8001614 <SCH_Delete_Task+0x58>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
		struct sTask *iterator = sTaskList;
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <SCH_Delete_Task+0x5c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	60fb      	str	r3, [r7, #12]
		while(iterator->taskID != index){
 80015e0:	e002      	b.n	80015e8 <SCH_Delete_Task+0x2c>
			iterator = iterator->right;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	60fb      	str	r3, [r7, #12]
		while(iterator->taskID != index){
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d1f7      	bne.n	80015e2 <SCH_Delete_Task+0x26>
		}
		iterator->right->left = iterator->left;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	601a      	str	r2, [r3, #0]
		iterator->left->right = iterator->right;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	6852      	ldr	r2, [r2, #4]
 8001604:	605a      	str	r2, [r3, #4]
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "DELETE: Free %lu\r\n", iterator->taskID), 200);
		free(iterator);
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f002 ff82 	bl	8004510 <free>
	}else{
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "DELETE: Position empty\r\n"), 200);
	}
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200002f0 	.word	0x200002f0
 8001618:	2000014c 	.word	0x2000014c

0800161c <setTimer>:
#include "software_timer.h"

int timer_flag[10] = {0};
int timer_cnt[10] = {0};

void setTimer(int i, int duration){
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
	timer_flag[i] = 0;
 8001626:	4a07      	ldr	r2, [pc, #28]	; (8001644 <setTimer+0x28>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2100      	movs	r1, #0
 800162c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_cnt[i] = duration;
 8001630:	4905      	ldr	r1, [pc, #20]	; (8001648 <setTimer+0x2c>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	20000150 	.word	0x20000150
 8001648:	20000178 	.word	0x20000178

0800164c <timer_run>:

void timer_run(int i){
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	if(timer_cnt[i] > 0){
 8001654:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <timer_run+0x48>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165c:	2b00      	cmp	r3, #0
 800165e:	dd13      	ble.n	8001688 <timer_run+0x3c>
		timer_cnt[i]--;
 8001660:	4a0c      	ldr	r2, [pc, #48]	; (8001694 <timer_run+0x48>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001668:	1e5a      	subs	r2, r3, #1
 800166a:	490a      	ldr	r1, [pc, #40]	; (8001694 <timer_run+0x48>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_cnt[i] <= 0) timer_flag[i] = 1;
 8001672:	4a08      	ldr	r2, [pc, #32]	; (8001694 <timer_run+0x48>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167a:	2b00      	cmp	r3, #0
 800167c:	dc04      	bgt.n	8001688 <timer_run+0x3c>
 800167e:	4a06      	ldr	r2, [pc, #24]	; (8001698 <timer_run+0x4c>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2101      	movs	r1, #1
 8001684:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000178 	.word	0x20000178
 8001698:	20000150 	.word	0x20000150

0800169c <timerRun>:

void timerRun(){
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	timer_run(0);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff ffd3 	bl	800164c <timer_run>
	timer_run(1);
 80016a6:	2001      	movs	r0, #1
 80016a8:	f7ff ffd0 	bl	800164c <timer_run>
	timer_run(2);
 80016ac:	2002      	movs	r0, #2
 80016ae:	f7ff ffcd 	bl	800164c <timer_run>
	timer_run(3);
 80016b2:	2003      	movs	r0, #3
 80016b4:	f7ff ffca 	bl	800164c <timer_run>
	timer_run(4);
 80016b8:	2004      	movs	r0, #4
 80016ba:	f7ff ffc7 	bl	800164c <timer_run>
	timer_run(9);
 80016be:	2009      	movs	r0, #9
 80016c0:	f7ff ffc4 	bl	800164c <timer_run>
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_MspInit+0x5c>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	4a14      	ldr	r2, [pc, #80]	; (8001724 <HAL_MspInit+0x5c>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6193      	str	r3, [r2, #24]
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_MspInit+0x5c>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_MspInit+0x5c>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <HAL_MspInit+0x5c>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	61d3      	str	r3, [r2, #28]
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <HAL_MspInit+0x5c>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <HAL_MspInit+0x60>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_MspInit+0x60>)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	40021000 	.word	0x40021000
 8001728:	40010000 	.word	0x40010000

0800172c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800173c:	d114      	bne.n	8001768 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_TIM_Base_MspInit+0x68>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a14      	ldr	r2, [pc, #80]	; (8001794 <HAL_TIM_Base_MspInit+0x68>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	61d3      	str	r3, [r2, #28]
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_TIM_Base_MspInit+0x68>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	201c      	movs	r0, #28
 800175c:	f000 fa71 	bl	8001c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001760:	201c      	movs	r0, #28
 8001762:	f000 fa8a 	bl	8001c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001766:	e010      	b.n	800178a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <HAL_TIM_Base_MspInit+0x6c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d10b      	bne.n	800178a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <HAL_TIM_Base_MspInit+0x68>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4a07      	ldr	r2, [pc, #28]	; (8001794 <HAL_TIM_Base_MspInit+0x68>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	61d3      	str	r3, [r2, #28]
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_TIM_Base_MspInit+0x68>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	40000400 	.word	0x40000400

0800179c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a0f      	ldr	r2, [pc, #60]	; (80017f4 <HAL_TIM_MspPostInit+0x58>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d117      	bne.n	80017ec <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <HAL_TIM_MspPostInit+0x5c>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <HAL_TIM_MspPostInit+0x5c>)
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_TIM_MspPostInit+0x5c>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017d4:	2340      	movs	r3, #64	; 0x40
 80017d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2302      	movs	r3, #2
 80017de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	4619      	mov	r1, r3
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <HAL_TIM_MspPostInit+0x60>)
 80017e8:	f000 fb14 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017ec:	bf00      	nop
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40000400 	.word	0x40000400
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010800 	.word	0x40010800

08001800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <HAL_UART_MspInit+0x88>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d12f      	bne.n	8001880 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001820:	4b1a      	ldr	r3, [pc, #104]	; (800188c <HAL_UART_MspInit+0x8c>)
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	4a19      	ldr	r2, [pc, #100]	; (800188c <HAL_UART_MspInit+0x8c>)
 8001826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800182a:	61d3      	str	r3, [r2, #28]
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <HAL_UART_MspInit+0x8c>)
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_UART_MspInit+0x8c>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a13      	ldr	r2, [pc, #76]	; (800188c <HAL_UART_MspInit+0x8c>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_UART_MspInit+0x8c>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001850:	2304      	movs	r3, #4
 8001852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001858:	2303      	movs	r3, #3
 800185a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	4619      	mov	r1, r3
 8001862:	480b      	ldr	r0, [pc, #44]	; (8001890 <HAL_UART_MspInit+0x90>)
 8001864:	f000 fad6 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001868:	2308      	movs	r3, #8
 800186a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	f107 0310 	add.w	r3, r7, #16
 8001878:	4619      	mov	r1, r3
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <HAL_UART_MspInit+0x90>)
 800187c:	f000 faca 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001880:	bf00      	nop
 8001882:	3720      	adds	r7, #32
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40004400 	.word	0x40004400
 800188c:	40021000 	.word	0x40021000
 8001890:	40010800 	.word	0x40010800

08001894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <NMI_Handler+0x4>

0800189a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189e:	e7fe      	b.n	800189e <HardFault_Handler+0x4>

080018a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <MemManage_Handler+0x4>

080018a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <BusFault_Handler+0x4>

080018ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <UsageFault_Handler+0x4>

080018b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr

080018ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018da:	f000 f8bf 	bl	8001a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <TIM2_IRQHandler+0x10>)
 80018ea:	f001 f9f1 	bl	8002cd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200001f8 	.word	0x200001f8

080018f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <USART2_IRQHandler+0x10>)
 80018fe:	f002 f885 	bl	8003a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000240 	.word	0x20000240

0800190c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <_sbrk+0x5c>)
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <_sbrk+0x60>)
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <_sbrk+0x64>)
 800192a:	4a12      	ldr	r2, [pc, #72]	; (8001974 <_sbrk+0x68>)
 800192c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <_sbrk+0x64>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	429a      	cmp	r2, r3
 800193a:	d207      	bcs.n	800194c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800193c:	f002 fdb6 	bl	80044ac <__errno>
 8001940:	4603      	mov	r3, r0
 8001942:	220c      	movs	r2, #12
 8001944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
 800194a:	e009      	b.n	8001960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <_sbrk+0x64>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001952:	4b07      	ldr	r3, [pc, #28]	; (8001970 <_sbrk+0x64>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <_sbrk+0x64>)
 800195c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195e:	68fb      	ldr	r3, [r7, #12]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20005000 	.word	0x20005000
 800196c:	00000400 	.word	0x00000400
 8001970:	200001a0 	.word	0x200001a0
 8001974:	20000330 	.word	0x20000330

08001978 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001984:	f7ff fff8 	bl	8001978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800198a:	490c      	ldr	r1, [pc, #48]	; (80019bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800198c:	4a0c      	ldr	r2, [pc, #48]	; (80019c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019a0:	4c09      	ldr	r4, [pc, #36]	; (80019c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ae:	f002 fd83 	bl	80044b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019b2:	f7ff fa95 	bl	8000ee0 <main>
  bx lr
 80019b6:	4770      	bx	lr
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019bc:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80019c0:	080050e0 	.word	0x080050e0
  ldr r2, =_sbss
 80019c4:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80019c8:	2000032c 	.word	0x2000032c

080019cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC1_2_IRQHandler>
	...

080019d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_Init+0x28>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <HAL_Init+0x28>)
 80019da:	f043 0310 	orr.w	r3, r3, #16
 80019de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f000 f923 	bl	8001c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e6:	200f      	movs	r0, #15
 80019e8:	f000 f808 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ec:	f7ff fe6c 	bl	80016c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40022000 	.word	0x40022000

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x54>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0x58>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f93b 	bl	8001c96 <HAL_SYSTICK_Config>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00e      	b.n	8001a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d80a      	bhi.n	8001a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f000 f903 	bl	8001c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a3c:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <HAL_InitTick+0x5c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	2000009c 	.word	0x2000009c
 8001a54:	200000a4 	.word	0x200000a4
 8001a58:	200000a0 	.word	0x200000a0

08001a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_IncTick+0x1c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_IncTick+0x20>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a03      	ldr	r2, [pc, #12]	; (8001a7c <HAL_IncTick+0x20>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	200000a4 	.word	0x200000a4
 8001a7c:	20000318 	.word	0x20000318

08001a80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b02      	ldr	r3, [pc, #8]	; (8001a90 <HAL_GetTick+0x10>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	20000318 	.word	0x20000318

08001a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac6:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	60d3      	str	r3, [r2, #12]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	f003 0307 	and.w	r3, r3, #7
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	db0b      	blt.n	8001b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	f003 021f 	and.w	r2, r3, #31
 8001b10:	4906      	ldr	r1, [pc, #24]	; (8001b2c <__NVIC_EnableIRQ+0x34>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	2001      	movs	r0, #1
 8001b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	e000e100 	.word	0xe000e100

08001b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	db0a      	blt.n	8001b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	490c      	ldr	r1, [pc, #48]	; (8001b7c <__NVIC_SetPriority+0x4c>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	440b      	add	r3, r1
 8001b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b58:	e00a      	b.n	8001b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4908      	ldr	r1, [pc, #32]	; (8001b80 <__NVIC_SetPriority+0x50>)
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	3b04      	subs	r3, #4
 8001b68:	0112      	lsls	r2, r2, #4
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	761a      	strb	r2, [r3, #24]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000e100 	.word	0xe000e100
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f1c3 0307 	rsb	r3, r3, #7
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	bf28      	it	cs
 8001ba2:	2304      	movcs	r3, #4
 8001ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d902      	bls.n	8001bb4 <NVIC_EncodePriority+0x30>
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3b03      	subs	r3, #3
 8001bb2:	e000      	b.n	8001bb6 <NVIC_EncodePriority+0x32>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	43d9      	mvns	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	4313      	orrs	r3, r2
         );
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3724      	adds	r7, #36	; 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf8:	d301      	bcc.n	8001bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00f      	b.n	8001c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <SysTick_Config+0x40>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c06:	210f      	movs	r1, #15
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f7ff ff90 	bl	8001b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <SysTick_Config+0x40>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c16:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <SysTick_Config+0x40>)
 8001c18:	2207      	movs	r2, #7
 8001c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	e000e010 	.word	0xe000e010

08001c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ff2d 	bl	8001a94 <__NVIC_SetPriorityGrouping>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c54:	f7ff ff42 	bl	8001adc <__NVIC_GetPriorityGrouping>
 8001c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	6978      	ldr	r0, [r7, #20]
 8001c60:	f7ff ff90 	bl	8001b84 <NVIC_EncodePriority>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff5f 	bl	8001b30 <__NVIC_SetPriority>
}
 8001c72:	bf00      	nop
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff35 	bl	8001af8 <__NVIC_EnableIRQ>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ffa2 	bl	8001be8 <SysTick_Config>
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b085      	sub	sp, #20
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d008      	beq.n	8001cd8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2204      	movs	r2, #4
 8001cca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e020      	b.n	8001d1a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 020e 	bic.w	r2, r2, #14
 8001ce6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0201 	bic.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d00:	2101      	movs	r1, #1
 8001d02:	fa01 f202 	lsl.w	r2, r1, r2
 8001d06:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d005      	beq.n	8001d48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2204      	movs	r2, #4
 8001d40:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	73fb      	strb	r3, [r7, #15]
 8001d46:	e051      	b.n	8001dec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 020e 	bic.w	r2, r2, #14
 8001d56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a22      	ldr	r2, [pc, #136]	; (8001df8 <HAL_DMA_Abort_IT+0xd4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d029      	beq.n	8001dc6 <HAL_DMA_Abort_IT+0xa2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a21      	ldr	r2, [pc, #132]	; (8001dfc <HAL_DMA_Abort_IT+0xd8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d022      	beq.n	8001dc2 <HAL_DMA_Abort_IT+0x9e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1f      	ldr	r2, [pc, #124]	; (8001e00 <HAL_DMA_Abort_IT+0xdc>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d01a      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x98>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1e      	ldr	r2, [pc, #120]	; (8001e04 <HAL_DMA_Abort_IT+0xe0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d012      	beq.n	8001db6 <HAL_DMA_Abort_IT+0x92>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <HAL_DMA_Abort_IT+0xe4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00a      	beq.n	8001db0 <HAL_DMA_Abort_IT+0x8c>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a1b      	ldr	r2, [pc, #108]	; (8001e0c <HAL_DMA_Abort_IT+0xe8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d102      	bne.n	8001daa <HAL_DMA_Abort_IT+0x86>
 8001da4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001da8:	e00e      	b.n	8001dc8 <HAL_DMA_Abort_IT+0xa4>
 8001daa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dae:	e00b      	b.n	8001dc8 <HAL_DMA_Abort_IT+0xa4>
 8001db0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001db4:	e008      	b.n	8001dc8 <HAL_DMA_Abort_IT+0xa4>
 8001db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dba:	e005      	b.n	8001dc8 <HAL_DMA_Abort_IT+0xa4>
 8001dbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc0:	e002      	b.n	8001dc8 <HAL_DMA_Abort_IT+0xa4>
 8001dc2:	2310      	movs	r3, #16
 8001dc4:	e000      	b.n	8001dc8 <HAL_DMA_Abort_IT+0xa4>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <HAL_DMA_Abort_IT+0xec>)
 8001dca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4798      	blx	r3
    } 
  }
  return status;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40020008 	.word	0x40020008
 8001dfc:	4002001c 	.word	0x4002001c
 8001e00:	40020030 	.word	0x40020030
 8001e04:	40020044 	.word	0x40020044
 8001e08:	40020058 	.word	0x40020058
 8001e0c:	4002006c 	.word	0x4002006c
 8001e10:	40020000 	.word	0x40020000

08001e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b08b      	sub	sp, #44	; 0x2c
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e26:	e169      	b.n	80020fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e28:	2201      	movs	r2, #1
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	69fa      	ldr	r2, [r7, #28]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	f040 8158 	bne.w	80020f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4a9a      	ldr	r2, [pc, #616]	; (80020b4 <HAL_GPIO_Init+0x2a0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d05e      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e50:	4a98      	ldr	r2, [pc, #608]	; (80020b4 <HAL_GPIO_Init+0x2a0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d875      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e56:	4a98      	ldr	r2, [pc, #608]	; (80020b8 <HAL_GPIO_Init+0x2a4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d058      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e5c:	4a96      	ldr	r2, [pc, #600]	; (80020b8 <HAL_GPIO_Init+0x2a4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d86f      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e62:	4a96      	ldr	r2, [pc, #600]	; (80020bc <HAL_GPIO_Init+0x2a8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d052      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e68:	4a94      	ldr	r2, [pc, #592]	; (80020bc <HAL_GPIO_Init+0x2a8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d869      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e6e:	4a94      	ldr	r2, [pc, #592]	; (80020c0 <HAL_GPIO_Init+0x2ac>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d04c      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e74:	4a92      	ldr	r2, [pc, #584]	; (80020c0 <HAL_GPIO_Init+0x2ac>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d863      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e7a:	4a92      	ldr	r2, [pc, #584]	; (80020c4 <HAL_GPIO_Init+0x2b0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d046      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e80:	4a90      	ldr	r2, [pc, #576]	; (80020c4 <HAL_GPIO_Init+0x2b0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d85d      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e86:	2b12      	cmp	r3, #18
 8001e88:	d82a      	bhi.n	8001ee0 <HAL_GPIO_Init+0xcc>
 8001e8a:	2b12      	cmp	r3, #18
 8001e8c:	d859      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e8e:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <HAL_GPIO_Init+0x80>)
 8001e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e94:	08001f0f 	.word	0x08001f0f
 8001e98:	08001ee9 	.word	0x08001ee9
 8001e9c:	08001efb 	.word	0x08001efb
 8001ea0:	08001f3d 	.word	0x08001f3d
 8001ea4:	08001f43 	.word	0x08001f43
 8001ea8:	08001f43 	.word	0x08001f43
 8001eac:	08001f43 	.word	0x08001f43
 8001eb0:	08001f43 	.word	0x08001f43
 8001eb4:	08001f43 	.word	0x08001f43
 8001eb8:	08001f43 	.word	0x08001f43
 8001ebc:	08001f43 	.word	0x08001f43
 8001ec0:	08001f43 	.word	0x08001f43
 8001ec4:	08001f43 	.word	0x08001f43
 8001ec8:	08001f43 	.word	0x08001f43
 8001ecc:	08001f43 	.word	0x08001f43
 8001ed0:	08001f43 	.word	0x08001f43
 8001ed4:	08001f43 	.word	0x08001f43
 8001ed8:	08001ef1 	.word	0x08001ef1
 8001edc:	08001f05 	.word	0x08001f05
 8001ee0:	4a79      	ldr	r2, [pc, #484]	; (80020c8 <HAL_GPIO_Init+0x2b4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ee6:	e02c      	b.n	8001f42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	623b      	str	r3, [r7, #32]
          break;
 8001eee:	e029      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	623b      	str	r3, [r7, #32]
          break;
 8001ef8:	e024      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	3308      	adds	r3, #8
 8001f00:	623b      	str	r3, [r7, #32]
          break;
 8001f02:	e01f      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	330c      	adds	r3, #12
 8001f0a:	623b      	str	r3, [r7, #32]
          break;
 8001f0c:	e01a      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f16:	2304      	movs	r3, #4
 8001f18:	623b      	str	r3, [r7, #32]
          break;
 8001f1a:	e013      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d105      	bne.n	8001f30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f24:	2308      	movs	r3, #8
 8001f26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	611a      	str	r2, [r3, #16]
          break;
 8001f2e:	e009      	b.n	8001f44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f30:	2308      	movs	r3, #8
 8001f32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	615a      	str	r2, [r3, #20]
          break;
 8001f3a:	e003      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
          break;
 8001f40:	e000      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          break;
 8001f42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2bff      	cmp	r3, #255	; 0xff
 8001f48:	d801      	bhi.n	8001f4e <HAL_GPIO_Init+0x13a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	e001      	b.n	8001f52 <HAL_GPIO_Init+0x13e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3304      	adds	r3, #4
 8001f52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2bff      	cmp	r3, #255	; 0xff
 8001f58:	d802      	bhi.n	8001f60 <HAL_GPIO_Init+0x14c>
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	e002      	b.n	8001f66 <HAL_GPIO_Init+0x152>
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	3b08      	subs	r3, #8
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	210f      	movs	r1, #15
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	401a      	ands	r2, r3
 8001f78:	6a39      	ldr	r1, [r7, #32]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	431a      	orrs	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80b1 	beq.w	80020f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f94:	4b4d      	ldr	r3, [pc, #308]	; (80020cc <HAL_GPIO_Init+0x2b8>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4a4c      	ldr	r2, [pc, #304]	; (80020cc <HAL_GPIO_Init+0x2b8>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6193      	str	r3, [r2, #24]
 8001fa0:	4b4a      	ldr	r3, [pc, #296]	; (80020cc <HAL_GPIO_Init+0x2b8>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fac:	4a48      	ldr	r2, [pc, #288]	; (80020d0 <HAL_GPIO_Init+0x2bc>)
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a40      	ldr	r2, [pc, #256]	; (80020d4 <HAL_GPIO_Init+0x2c0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d013      	beq.n	8002000 <HAL_GPIO_Init+0x1ec>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3f      	ldr	r2, [pc, #252]	; (80020d8 <HAL_GPIO_Init+0x2c4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00d      	beq.n	8001ffc <HAL_GPIO_Init+0x1e8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3e      	ldr	r2, [pc, #248]	; (80020dc <HAL_GPIO_Init+0x2c8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d007      	beq.n	8001ff8 <HAL_GPIO_Init+0x1e4>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3d      	ldr	r2, [pc, #244]	; (80020e0 <HAL_GPIO_Init+0x2cc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d101      	bne.n	8001ff4 <HAL_GPIO_Init+0x1e0>
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e006      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	e004      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e002      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8002000:	2300      	movs	r3, #0
 8002002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002004:	f002 0203 	and.w	r2, r2, #3
 8002008:	0092      	lsls	r2, r2, #2
 800200a:	4093      	lsls	r3, r2
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002012:	492f      	ldr	r1, [pc, #188]	; (80020d0 <HAL_GPIO_Init+0x2bc>)
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	3302      	adds	r3, #2
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800202c:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	492c      	ldr	r1, [pc, #176]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800203a:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	43db      	mvns	r3, r3
 8002042:	4928      	ldr	r1, [pc, #160]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002044:	4013      	ands	r3, r2
 8002046:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002054:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	4922      	ldr	r1, [pc, #136]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	60cb      	str	r3, [r1, #12]
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	43db      	mvns	r3, r3
 800206a:	491e      	ldr	r1, [pc, #120]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 800206c:	4013      	ands	r3, r2
 800206e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800207c:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	4918      	ldr	r1, [pc, #96]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800208a:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	43db      	mvns	r3, r3
 8002092:	4914      	ldr	r1, [pc, #80]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002094:	4013      	ands	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d021      	beq.n	80020e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020a4:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	490e      	ldr	r1, [pc, #56]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e021      	b.n	80020f6 <HAL_GPIO_Init+0x2e2>
 80020b2:	bf00      	nop
 80020b4:	10320000 	.word	0x10320000
 80020b8:	10310000 	.word	0x10310000
 80020bc:	10220000 	.word	0x10220000
 80020c0:	10210000 	.word	0x10210000
 80020c4:	10120000 	.word	0x10120000
 80020c8:	10110000 	.word	0x10110000
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40010000 	.word	0x40010000
 80020d4:	40010800 	.word	0x40010800
 80020d8:	40010c00 	.word	0x40010c00
 80020dc:	40011000 	.word	0x40011000
 80020e0:	40011400 	.word	0x40011400
 80020e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_GPIO_Init+0x304>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	4909      	ldr	r1, [pc, #36]	; (8002118 <HAL_GPIO_Init+0x304>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	3301      	adds	r3, #1
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	fa22 f303 	lsr.w	r3, r2, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	f47f ae8e 	bne.w	8001e28 <HAL_GPIO_Init+0x14>
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	372c      	adds	r7, #44	; 0x2c
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	40010400 	.word	0x40010400

0800211c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
 8002138:	e001      	b.n	800213e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800213e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	807b      	strh	r3, [r7, #2]
 8002156:	4613      	mov	r3, r2
 8002158:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800215a:	787b      	ldrb	r3, [r7, #1]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002160:	887a      	ldrh	r2, [r7, #2]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002166:	e003      	b.n	8002170 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002168:	887b      	ldrh	r3, [r7, #2]
 800216a:	041a      	lsls	r2, r3, #16
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	611a      	str	r2, [r3, #16]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
	...

0800217c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e26c      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8087 	beq.w	80022aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800219c:	4b92      	ldr	r3, [pc, #584]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d00c      	beq.n	80021c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021a8:	4b8f      	ldr	r3, [pc, #572]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d112      	bne.n	80021da <HAL_RCC_OscConfig+0x5e>
 80021b4:	4b8c      	ldr	r3, [pc, #560]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c0:	d10b      	bne.n	80021da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c2:	4b89      	ldr	r3, [pc, #548]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d06c      	beq.n	80022a8 <HAL_RCC_OscConfig+0x12c>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d168      	bne.n	80022a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e246      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x76>
 80021e4:	4b80      	ldr	r3, [pc, #512]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a7f      	ldr	r2, [pc, #508]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	e02e      	b.n	8002250 <HAL_RCC_OscConfig+0xd4>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x98>
 80021fa:	4b7b      	ldr	r3, [pc, #492]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a7a      	ldr	r2, [pc, #488]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b78      	ldr	r3, [pc, #480]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a77      	ldr	r2, [pc, #476]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800220c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e01d      	b.n	8002250 <HAL_RCC_OscConfig+0xd4>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0xbc>
 800221e:	4b72      	ldr	r3, [pc, #456]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a71      	ldr	r2, [pc, #452]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b6f      	ldr	r3, [pc, #444]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a6e      	ldr	r2, [pc, #440]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e00b      	b.n	8002250 <HAL_RCC_OscConfig+0xd4>
 8002238:	4b6b      	ldr	r3, [pc, #428]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a6a      	ldr	r2, [pc, #424]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800223e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b68      	ldr	r3, [pc, #416]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a67      	ldr	r2, [pc, #412]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800224a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d013      	beq.n	8002280 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7ff fc12 	bl	8001a80 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002260:	f7ff fc0e 	bl	8001a80 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	; 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1fa      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	4b5d      	ldr	r3, [pc, #372]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0xe4>
 800227e:	e014      	b.n	80022aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7ff fbfe 	bl	8001a80 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002288:	f7ff fbfa 	bl	8001a80 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	; 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e1e6      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229a:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x10c>
 80022a6:	e000      	b.n	80022aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d063      	beq.n	800237e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b6:	4b4c      	ldr	r3, [pc, #304]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022c2:	4b49      	ldr	r3, [pc, #292]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d11c      	bne.n	8002308 <HAL_RCC_OscConfig+0x18c>
 80022ce:	4b46      	ldr	r3, [pc, #280]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d116      	bne.n	8002308 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022da:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_RCC_OscConfig+0x176>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d001      	beq.n	80022f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e1ba      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f2:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4939      	ldr	r1, [pc, #228]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002306:	e03a      	b.n	800237e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002310:	4b36      	ldr	r3, [pc, #216]	; (80023ec <HAL_RCC_OscConfig+0x270>)
 8002312:	2201      	movs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002316:	f7ff fbb3 	bl	8001a80 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231e:	f7ff fbaf 	bl	8001a80 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e19b      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002330:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233c:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4927      	ldr	r1, [pc, #156]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800234c:	4313      	orrs	r3, r2
 800234e:	600b      	str	r3, [r1, #0]
 8002350:	e015      	b.n	800237e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002352:	4b26      	ldr	r3, [pc, #152]	; (80023ec <HAL_RCC_OscConfig+0x270>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7ff fb92 	bl	8001a80 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002360:	f7ff fb8e 	bl	8001a80 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e17a      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002372:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d03a      	beq.n	8002400 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d019      	beq.n	80023c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002398:	f7ff fb72 	bl	8001a80 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a0:	f7ff fb6e 	bl	8001a80 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e15a      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023be:	2001      	movs	r0, #1
 80023c0:	f000 facc 	bl	800295c <RCC_Delay>
 80023c4:	e01c      	b.n	8002400 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023cc:	f7ff fb58 	bl	8001a80 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d2:	e00f      	b.n	80023f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d4:	f7ff fb54 	bl	8001a80 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d908      	bls.n	80023f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e140      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	42420000 	.word	0x42420000
 80023f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f4:	4b9e      	ldr	r3, [pc, #632]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1e9      	bne.n	80023d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80a6 	beq.w	800255a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002412:	4b97      	ldr	r3, [pc, #604]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10d      	bne.n	800243a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	4b94      	ldr	r3, [pc, #592]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	4a93      	ldr	r2, [pc, #588]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002428:	61d3      	str	r3, [r2, #28]
 800242a:	4b91      	ldr	r3, [pc, #580]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002436:	2301      	movs	r3, #1
 8002438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243a:	4b8e      	ldr	r3, [pc, #568]	; (8002674 <HAL_RCC_OscConfig+0x4f8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002442:	2b00      	cmp	r3, #0
 8002444:	d118      	bne.n	8002478 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002446:	4b8b      	ldr	r3, [pc, #556]	; (8002674 <HAL_RCC_OscConfig+0x4f8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a8a      	ldr	r2, [pc, #552]	; (8002674 <HAL_RCC_OscConfig+0x4f8>)
 800244c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002452:	f7ff fb15 	bl	8001a80 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245a:	f7ff fb11 	bl	8001a80 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b64      	cmp	r3, #100	; 0x64
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e0fd      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246c:	4b81      	ldr	r3, [pc, #516]	; (8002674 <HAL_RCC_OscConfig+0x4f8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d106      	bne.n	800248e <HAL_RCC_OscConfig+0x312>
 8002480:	4b7b      	ldr	r3, [pc, #492]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4a7a      	ldr	r2, [pc, #488]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6213      	str	r3, [r2, #32]
 800248c:	e02d      	b.n	80024ea <HAL_RCC_OscConfig+0x36e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x334>
 8002496:	4b76      	ldr	r3, [pc, #472]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4a75      	ldr	r2, [pc, #468]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6213      	str	r3, [r2, #32]
 80024a2:	4b73      	ldr	r3, [pc, #460]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4a72      	ldr	r2, [pc, #456]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	f023 0304 	bic.w	r3, r3, #4
 80024ac:	6213      	str	r3, [r2, #32]
 80024ae:	e01c      	b.n	80024ea <HAL_RCC_OscConfig+0x36e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	d10c      	bne.n	80024d2 <HAL_RCC_OscConfig+0x356>
 80024b8:	4b6d      	ldr	r3, [pc, #436]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4a6c      	ldr	r2, [pc, #432]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024be:	f043 0304 	orr.w	r3, r3, #4
 80024c2:	6213      	str	r3, [r2, #32]
 80024c4:	4b6a      	ldr	r3, [pc, #424]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4a69      	ldr	r2, [pc, #420]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6213      	str	r3, [r2, #32]
 80024d0:	e00b      	b.n	80024ea <HAL_RCC_OscConfig+0x36e>
 80024d2:	4b67      	ldr	r3, [pc, #412]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a66      	ldr	r2, [pc, #408]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	4b64      	ldr	r3, [pc, #400]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a63      	ldr	r2, [pc, #396]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d015      	beq.n	800251e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f2:	f7ff fac5 	bl	8001a80 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fa:	f7ff fac1 	bl	8001a80 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	; 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e0ab      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002510:	4b57      	ldr	r3, [pc, #348]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0ee      	beq.n	80024fa <HAL_RCC_OscConfig+0x37e>
 800251c:	e014      	b.n	8002548 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251e:	f7ff faaf 	bl	8001a80 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f7ff faab 	bl	8001a80 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 3288 	movw	r2, #5000	; 0x1388
 8002534:	4293      	cmp	r3, r2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e095      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253c:	4b4c      	ldr	r3, [pc, #304]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1ee      	bne.n	8002526 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d105      	bne.n	800255a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254e:	4b48      	ldr	r3, [pc, #288]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4a47      	ldr	r2, [pc, #284]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002558:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8081 	beq.w	8002666 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002564:	4b42      	ldr	r3, [pc, #264]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b08      	cmp	r3, #8
 800256e:	d061      	beq.n	8002634 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d146      	bne.n	8002606 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002578:	4b3f      	ldr	r3, [pc, #252]	; (8002678 <HAL_RCC_OscConfig+0x4fc>)
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7ff fa7f 	bl	8001a80 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7ff fa7b 	bl	8001a80 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e067      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002598:	4b35      	ldr	r3, [pc, #212]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f0      	bne.n	8002586 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ac:	d108      	bne.n	80025c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ae:	4b30      	ldr	r3, [pc, #192]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	492d      	ldr	r1, [pc, #180]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c0:	4b2b      	ldr	r3, [pc, #172]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a19      	ldr	r1, [r3, #32]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	430b      	orrs	r3, r1
 80025d2:	4927      	ldr	r1, [pc, #156]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HAL_RCC_OscConfig+0x4fc>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025de:	f7ff fa4f 	bl	8001a80 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e6:	f7ff fa4b 	bl	8001a80 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e037      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f8:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x46a>
 8002604:	e02f      	b.n	8002666 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002606:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <HAL_RCC_OscConfig+0x4fc>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7ff fa38 	bl	8001a80 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7ff fa34 	bl	8001a80 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e020      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002626:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x498>
 8002632:	e018      	b.n	8002666 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e013      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	429a      	cmp	r2, r3
 8002652:	d106      	bne.n	8002662 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265e:	429a      	cmp	r2, r3
 8002660:	d001      	beq.n	8002666 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	40007000 	.word	0x40007000
 8002678:	42420060 	.word	0x42420060

0800267c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0d0      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002690:	4b6a      	ldr	r3, [pc, #424]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d910      	bls.n	80026c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b67      	ldr	r3, [pc, #412]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 0207 	bic.w	r2, r3, #7
 80026a6:	4965      	ldr	r1, [pc, #404]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	4b63      	ldr	r3, [pc, #396]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0b8      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d020      	beq.n	800270e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d8:	4b59      	ldr	r3, [pc, #356]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4a58      	ldr	r2, [pc, #352]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f0:	4b53      	ldr	r3, [pc, #332]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a52      	ldr	r2, [pc, #328]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026fc:	4b50      	ldr	r3, [pc, #320]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	494d      	ldr	r1, [pc, #308]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d040      	beq.n	800279c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	4b47      	ldr	r3, [pc, #284]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d115      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e07f      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	4b41      	ldr	r3, [pc, #260]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e073      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274a:	4b3d      	ldr	r3, [pc, #244]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e06b      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275a:	4b39      	ldr	r3, [pc, #228]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f023 0203 	bic.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4936      	ldr	r1, [pc, #216]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800276c:	f7ff f988 	bl	8001a80 <HAL_GetTick>
 8002770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	e00a      	b.n	800278a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002774:	f7ff f984 	bl	8001a80 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e053      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 020c 	and.w	r2, r3, #12
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	429a      	cmp	r2, r3
 800279a:	d1eb      	bne.n	8002774 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800279c:	4b27      	ldr	r3, [pc, #156]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d210      	bcs.n	80027cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 0207 	bic.w	r2, r3, #7
 80027b2:	4922      	ldr	r1, [pc, #136]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e032      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4916      	ldr	r1, [pc, #88]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027f6:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	490e      	ldr	r1, [pc, #56]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800280a:	f000 f821 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 800280e:	4602      	mov	r2, r0
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	490a      	ldr	r1, [pc, #40]	; (8002844 <HAL_RCC_ClockConfig+0x1c8>)
 800281c:	5ccb      	ldrb	r3, [r1, r3]
 800281e:	fa22 f303 	lsr.w	r3, r2, r3
 8002822:	4a09      	ldr	r2, [pc, #36]	; (8002848 <HAL_RCC_ClockConfig+0x1cc>)
 8002824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_ClockConfig+0x1d0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff f8e6 	bl	80019fc <HAL_InitTick>

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40022000 	.word	0x40022000
 8002840:	40021000 	.word	0x40021000
 8002844:	08005078 	.word	0x08005078
 8002848:	2000009c 	.word	0x2000009c
 800284c:	200000a0 	.word	0x200000a0

08002850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	2300      	movs	r3, #0
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800286a:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b04      	cmp	r3, #4
 8002878:	d002      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x30>
 800287a:	2b08      	cmp	r3, #8
 800287c:	d003      	beq.n	8002886 <HAL_RCC_GetSysClockFreq+0x36>
 800287e:	e027      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002880:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002882:	613b      	str	r3, [r7, #16]
      break;
 8002884:	e027      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	0c9b      	lsrs	r3, r3, #18
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	4a17      	ldr	r2, [pc, #92]	; (80028ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002890:	5cd3      	ldrb	r3, [r2, r3]
 8002892:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d010      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800289e:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	0c5b      	lsrs	r3, r3, #17
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	4a11      	ldr	r2, [pc, #68]	; (80028f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028aa:	5cd3      	ldrb	r3, [r2, r3]
 80028ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80028b2:	fb02 f203 	mul.w	r2, r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e004      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a0c      	ldr	r2, [pc, #48]	; (80028f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028c4:	fb02 f303 	mul.w	r3, r2, r3
 80028c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	613b      	str	r3, [r7, #16]
      break;
 80028ce:	e002      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80028d2:	613b      	str	r3, [r7, #16]
      break;
 80028d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d6:	693b      	ldr	r3, [r7, #16]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
 80028e8:	007a1200 	.word	0x007a1200
 80028ec:	08005090 	.word	0x08005090
 80028f0:	080050a0 	.word	0x080050a0
 80028f4:	003d0900 	.word	0x003d0900

080028f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028fc:	4b02      	ldr	r3, [pc, #8]	; (8002908 <HAL_RCC_GetHCLKFreq+0x10>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	2000009c 	.word	0x2000009c

0800290c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002910:	f7ff fff2 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 8002914:	4602      	mov	r2, r0
 8002916:	4b05      	ldr	r3, [pc, #20]	; (800292c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	0a1b      	lsrs	r3, r3, #8
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	4903      	ldr	r1, [pc, #12]	; (8002930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002922:	5ccb      	ldrb	r3, [r1, r3]
 8002924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002928:	4618      	mov	r0, r3
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40021000 	.word	0x40021000
 8002930:	08005088 	.word	0x08005088

08002934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002938:	f7ff ffde 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 800293c:	4602      	mov	r2, r0
 800293e:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	0adb      	lsrs	r3, r3, #11
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	4903      	ldr	r1, [pc, #12]	; (8002958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800294a:	5ccb      	ldrb	r3, [r1, r3]
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002950:	4618      	mov	r0, r3
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	08005088 	.word	0x08005088

0800295c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <RCC_Delay+0x34>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <RCC_Delay+0x38>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	0a5b      	lsrs	r3, r3, #9
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002978:	bf00      	nop
  }
  while (Delay --);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1e5a      	subs	r2, r3, #1
 800297e:	60fa      	str	r2, [r7, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f9      	bne.n	8002978 <RCC_Delay+0x1c>
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	2000009c 	.word	0x2000009c
 8002994:	10624dd3 	.word	0x10624dd3

08002998 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e041      	b.n	8002a2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fe feb4 	bl	800172c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3304      	adds	r3, #4
 80029d4:	4619      	mov	r1, r3
 80029d6:	4610      	mov	r0, r2
 80029d8:	f000 fc30 	bl	800323c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d001      	beq.n	8002a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e03a      	b.n	8002ac6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <HAL_TIM_Base_Start_IT+0x98>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00e      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x58>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7a:	d009      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x58>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d004      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x58>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a13      	ldr	r2, [pc, #76]	; (8002ad8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d111      	bne.n	8002ab4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b06      	cmp	r3, #6
 8002aa0:	d010      	beq.n	8002ac4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab2:	e007      	b.n	8002ac4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	40012c00 	.word	0x40012c00
 8002ad4:	40000400 	.word	0x40000400
 8002ad8:	40000800 	.word	0x40000800

08002adc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e041      	b.n	8002b72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f839 	bl	8002b7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3304      	adds	r3, #4
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	f000 fb8e 	bl	800323c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <HAL_TIM_PWM_Start+0x24>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	bf14      	ite	ne
 8002ba8:	2301      	movne	r3, #1
 8002baa:	2300      	moveq	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	e022      	b.n	8002bf6 <HAL_TIM_PWM_Start+0x6a>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d109      	bne.n	8002bca <HAL_TIM_PWM_Start+0x3e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	bf14      	ite	ne
 8002bc2:	2301      	movne	r3, #1
 8002bc4:	2300      	moveq	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	e015      	b.n	8002bf6 <HAL_TIM_PWM_Start+0x6a>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d109      	bne.n	8002be4 <HAL_TIM_PWM_Start+0x58>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	bf14      	ite	ne
 8002bdc:	2301      	movne	r3, #1
 8002bde:	2300      	moveq	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	e008      	b.n	8002bf6 <HAL_TIM_PWM_Start+0x6a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	bf14      	ite	ne
 8002bf0:	2301      	movne	r3, #1
 8002bf2:	2300      	moveq	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e05e      	b.n	8002cbc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d104      	bne.n	8002c0e <HAL_TIM_PWM_Start+0x82>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c0c:	e013      	b.n	8002c36 <HAL_TIM_PWM_Start+0xaa>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d104      	bne.n	8002c1e <HAL_TIM_PWM_Start+0x92>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c1c:	e00b      	b.n	8002c36 <HAL_TIM_PWM_Start+0xaa>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d104      	bne.n	8002c2e <HAL_TIM_PWM_Start+0xa2>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c2c:	e003      	b.n	8002c36 <HAL_TIM_PWM_Start+0xaa>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2202      	movs	r2, #2
 8002c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	6839      	ldr	r1, [r7, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fd7c 	bl	800373c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1e      	ldr	r2, [pc, #120]	; (8002cc4 <HAL_TIM_PWM_Start+0x138>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d107      	bne.n	8002c5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a18      	ldr	r2, [pc, #96]	; (8002cc4 <HAL_TIM_PWM_Start+0x138>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00e      	beq.n	8002c86 <HAL_TIM_PWM_Start+0xfa>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c70:	d009      	beq.n	8002c86 <HAL_TIM_PWM_Start+0xfa>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <HAL_TIM_PWM_Start+0x13c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d004      	beq.n	8002c86 <HAL_TIM_PWM_Start+0xfa>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <HAL_TIM_PWM_Start+0x140>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d111      	bne.n	8002caa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b06      	cmp	r3, #6
 8002c96:	d010      	beq.n	8002cba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca8:	e007      	b.n	8002cba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0201 	orr.w	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40012c00 	.word	0x40012c00
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40000800 	.word	0x40000800

08002cd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d122      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d11b      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0202 	mvn.w	r2, #2
 8002cfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fa76 	bl	8003204 <HAL_TIM_IC_CaptureCallback>
 8002d18:	e005      	b.n	8002d26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fa69 	bl	80031f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 fa78 	bl	8003216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d122      	bne.n	8002d80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d11b      	bne.n	8002d80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0204 	mvn.w	r2, #4
 8002d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2202      	movs	r2, #2
 8002d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fa4c 	bl	8003204 <HAL_TIM_IC_CaptureCallback>
 8002d6c:	e005      	b.n	8002d7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fa3f 	bl	80031f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fa4e 	bl	8003216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d122      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d11b      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0208 	mvn.w	r2, #8
 8002da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2204      	movs	r2, #4
 8002daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fa22 	bl	8003204 <HAL_TIM_IC_CaptureCallback>
 8002dc0:	e005      	b.n	8002dce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fa15 	bl	80031f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fa24 	bl	8003216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	2b10      	cmp	r3, #16
 8002de0:	d122      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d11b      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0210 	mvn.w	r2, #16
 8002df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f9f8 	bl	8003204 <HAL_TIM_IC_CaptureCallback>
 8002e14:	e005      	b.n	8002e22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f9eb 	bl	80031f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f9fa 	bl	8003216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d10e      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d107      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0201 	mvn.w	r2, #1
 8002e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fe fa22 	bl	8001298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5e:	2b80      	cmp	r3, #128	; 0x80
 8002e60:	d10e      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6c:	2b80      	cmp	r3, #128	; 0x80
 8002e6e:	d107      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fce9 	bl	8003852 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8a:	2b40      	cmp	r3, #64	; 0x40
 8002e8c:	d10e      	bne.n	8002eac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e98:	2b40      	cmp	r3, #64	; 0x40
 8002e9a:	d107      	bne.n	8002eac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f9be 	bl	8003228 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d10e      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	d107      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0220 	mvn.w	r2, #32
 8002ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fcb4 	bl	8003840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e0ae      	b.n	800305c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b0c      	cmp	r3, #12
 8002f0a:	f200 809f 	bhi.w	800304c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f0e:	a201      	add	r2, pc, #4	; (adr r2, 8002f14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f14:	08002f49 	.word	0x08002f49
 8002f18:	0800304d 	.word	0x0800304d
 8002f1c:	0800304d 	.word	0x0800304d
 8002f20:	0800304d 	.word	0x0800304d
 8002f24:	08002f89 	.word	0x08002f89
 8002f28:	0800304d 	.word	0x0800304d
 8002f2c:	0800304d 	.word	0x0800304d
 8002f30:	0800304d 	.word	0x0800304d
 8002f34:	08002fcb 	.word	0x08002fcb
 8002f38:	0800304d 	.word	0x0800304d
 8002f3c:	0800304d 	.word	0x0800304d
 8002f40:	0800304d 	.word	0x0800304d
 8002f44:	0800300b 	.word	0x0800300b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f9d6 	bl	8003300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0208 	orr.w	r2, r2, #8
 8002f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0204 	bic.w	r2, r2, #4
 8002f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6999      	ldr	r1, [r3, #24]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	691a      	ldr	r2, [r3, #16]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	619a      	str	r2, [r3, #24]
      break;
 8002f86:	e064      	b.n	8003052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 fa1c 	bl	80033cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6999      	ldr	r1, [r3, #24]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	021a      	lsls	r2, r3, #8
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	619a      	str	r2, [r3, #24]
      break;
 8002fc8:	e043      	b.n	8003052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fa65 	bl	80034a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0208 	orr.w	r2, r2, #8
 8002fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69da      	ldr	r2, [r3, #28]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0204 	bic.w	r2, r2, #4
 8002ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69d9      	ldr	r1, [r3, #28]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	61da      	str	r2, [r3, #28]
      break;
 8003008:	e023      	b.n	8003052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	4618      	mov	r0, r3
 8003012:	f000 faaf 	bl	8003574 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69da      	ldr	r2, [r3, #28]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69d9      	ldr	r1, [r3, #28]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	021a      	lsls	r2, r3, #8
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	61da      	str	r2, [r3, #28]
      break;
 800304a:	e002      	b.n	8003052 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	75fb      	strb	r3, [r7, #23]
      break;
 8003050:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800305a:	7dfb      	ldrb	r3, [r7, #23]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_TIM_ConfigClockSource+0x1c>
 800307c:	2302      	movs	r3, #2
 800307e:	e0b4      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x186>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800309e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b8:	d03e      	beq.n	8003138 <HAL_TIM_ConfigClockSource+0xd4>
 80030ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030be:	f200 8087 	bhi.w	80031d0 <HAL_TIM_ConfigClockSource+0x16c>
 80030c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c6:	f000 8086 	beq.w	80031d6 <HAL_TIM_ConfigClockSource+0x172>
 80030ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ce:	d87f      	bhi.n	80031d0 <HAL_TIM_ConfigClockSource+0x16c>
 80030d0:	2b70      	cmp	r3, #112	; 0x70
 80030d2:	d01a      	beq.n	800310a <HAL_TIM_ConfigClockSource+0xa6>
 80030d4:	2b70      	cmp	r3, #112	; 0x70
 80030d6:	d87b      	bhi.n	80031d0 <HAL_TIM_ConfigClockSource+0x16c>
 80030d8:	2b60      	cmp	r3, #96	; 0x60
 80030da:	d050      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x11a>
 80030dc:	2b60      	cmp	r3, #96	; 0x60
 80030de:	d877      	bhi.n	80031d0 <HAL_TIM_ConfigClockSource+0x16c>
 80030e0:	2b50      	cmp	r3, #80	; 0x50
 80030e2:	d03c      	beq.n	800315e <HAL_TIM_ConfigClockSource+0xfa>
 80030e4:	2b50      	cmp	r3, #80	; 0x50
 80030e6:	d873      	bhi.n	80031d0 <HAL_TIM_ConfigClockSource+0x16c>
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	d058      	beq.n	800319e <HAL_TIM_ConfigClockSource+0x13a>
 80030ec:	2b40      	cmp	r3, #64	; 0x40
 80030ee:	d86f      	bhi.n	80031d0 <HAL_TIM_ConfigClockSource+0x16c>
 80030f0:	2b30      	cmp	r3, #48	; 0x30
 80030f2:	d064      	beq.n	80031be <HAL_TIM_ConfigClockSource+0x15a>
 80030f4:	2b30      	cmp	r3, #48	; 0x30
 80030f6:	d86b      	bhi.n	80031d0 <HAL_TIM_ConfigClockSource+0x16c>
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d060      	beq.n	80031be <HAL_TIM_ConfigClockSource+0x15a>
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d867      	bhi.n	80031d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003100:	2b00      	cmp	r3, #0
 8003102:	d05c      	beq.n	80031be <HAL_TIM_ConfigClockSource+0x15a>
 8003104:	2b10      	cmp	r3, #16
 8003106:	d05a      	beq.n	80031be <HAL_TIM_ConfigClockSource+0x15a>
 8003108:	e062      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6899      	ldr	r1, [r3, #8]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f000 faf0 	bl	80036fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800312c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	609a      	str	r2, [r3, #8]
      break;
 8003136:	e04f      	b.n	80031d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6899      	ldr	r1, [r3, #8]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f000 fad9 	bl	80036fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800315a:	609a      	str	r2, [r3, #8]
      break;
 800315c:	e03c      	b.n	80031d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6859      	ldr	r1, [r3, #4]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	461a      	mov	r2, r3
 800316c:	f000 fa50 	bl	8003610 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2150      	movs	r1, #80	; 0x50
 8003176:	4618      	mov	r0, r3
 8003178:	f000 faa7 	bl	80036ca <TIM_ITRx_SetConfig>
      break;
 800317c:	e02c      	b.n	80031d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	6859      	ldr	r1, [r3, #4]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	461a      	mov	r2, r3
 800318c:	f000 fa6e 	bl	800366c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2160      	movs	r1, #96	; 0x60
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fa97 	bl	80036ca <TIM_ITRx_SetConfig>
      break;
 800319c:	e01c      	b.n	80031d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	6859      	ldr	r1, [r3, #4]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	461a      	mov	r2, r3
 80031ac:	f000 fa30 	bl	8003610 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2140      	movs	r1, #64	; 0x40
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fa87 	bl	80036ca <TIM_ITRx_SetConfig>
      break;
 80031bc:	e00c      	b.n	80031d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4619      	mov	r1, r3
 80031c8:	4610      	mov	r0, r2
 80031ca:	f000 fa7e 	bl	80036ca <TIM_ITRx_SetConfig>
      break;
 80031ce:	e003      	b.n	80031d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
      break;
 80031d4:	e000      	b.n	80031d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr

08003204 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr

08003216 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr
	...

0800323c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a29      	ldr	r2, [pc, #164]	; (80032f4 <TIM_Base_SetConfig+0xb8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00b      	beq.n	800326c <TIM_Base_SetConfig+0x30>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325a:	d007      	beq.n	800326c <TIM_Base_SetConfig+0x30>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a26      	ldr	r2, [pc, #152]	; (80032f8 <TIM_Base_SetConfig+0xbc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d003      	beq.n	800326c <TIM_Base_SetConfig+0x30>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a25      	ldr	r2, [pc, #148]	; (80032fc <TIM_Base_SetConfig+0xc0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d108      	bne.n	800327e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a1c      	ldr	r2, [pc, #112]	; (80032f4 <TIM_Base_SetConfig+0xb8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00b      	beq.n	800329e <TIM_Base_SetConfig+0x62>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328c:	d007      	beq.n	800329e <TIM_Base_SetConfig+0x62>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a19      	ldr	r2, [pc, #100]	; (80032f8 <TIM_Base_SetConfig+0xbc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d003      	beq.n	800329e <TIM_Base_SetConfig+0x62>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a18      	ldr	r2, [pc, #96]	; (80032fc <TIM_Base_SetConfig+0xc0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d108      	bne.n	80032b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a07      	ldr	r2, [pc, #28]	; (80032f4 <TIM_Base_SetConfig+0xb8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d103      	bne.n	80032e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	615a      	str	r2, [r3, #20]
}
 80032ea:	bf00      	nop
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr
 80032f4:	40012c00 	.word	0x40012c00
 80032f8:	40000400 	.word	0x40000400
 80032fc:	40000800 	.word	0x40000800

08003300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	f023 0201 	bic.w	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0303 	bic.w	r3, r3, #3
 8003336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f023 0302 	bic.w	r3, r3, #2
 8003348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a1c      	ldr	r2, [pc, #112]	; (80033c8 <TIM_OC1_SetConfig+0xc8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d10c      	bne.n	8003376 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f023 0308 	bic.w	r3, r3, #8
 8003362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f023 0304 	bic.w	r3, r3, #4
 8003374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a13      	ldr	r2, [pc, #76]	; (80033c8 <TIM_OC1_SetConfig+0xc8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d111      	bne.n	80033a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800338c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	621a      	str	r2, [r3, #32]
}
 80033bc:	bf00      	nop
 80033be:	371c      	adds	r7, #28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40012c00 	.word	0x40012c00

080033cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	f023 0210 	bic.w	r2, r3, #16
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	021b      	lsls	r3, r3, #8
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f023 0320 	bic.w	r3, r3, #32
 8003416:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a1d      	ldr	r2, [pc, #116]	; (800349c <TIM_OC2_SetConfig+0xd0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d10d      	bne.n	8003448 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003446:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a14      	ldr	r2, [pc, #80]	; (800349c <TIM_OC2_SetConfig+0xd0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d113      	bne.n	8003478 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003456:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800345e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	621a      	str	r2, [r3, #32]
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	40012c00 	.word	0x40012c00

080034a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a1d      	ldr	r2, [pc, #116]	; (8003570 <TIM_OC3_SetConfig+0xd0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d10d      	bne.n	800351a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003504:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a14      	ldr	r2, [pc, #80]	; (8003570 <TIM_OC3_SetConfig+0xd0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d113      	bne.n	800354a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	621a      	str	r2, [r3, #32]
}
 8003564:	bf00      	nop
 8003566:	371c      	adds	r7, #28
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40012c00 	.word	0x40012c00

08003574 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	021b      	lsls	r3, r3, #8
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	031b      	lsls	r3, r3, #12
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a0f      	ldr	r2, [pc, #60]	; (800360c <TIM_OC4_SetConfig+0x98>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d109      	bne.n	80035e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	019b      	lsls	r3, r3, #6
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	621a      	str	r2, [r3, #32]
}
 8003602:	bf00      	nop
 8003604:	371c      	adds	r7, #28
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	40012c00 	.word	0x40012c00

08003610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	f023 0201 	bic.w	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800363a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f023 030a 	bic.w	r3, r3, #10
 800364c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	621a      	str	r2, [r3, #32]
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	f023 0210 	bic.w	r2, r3, #16
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	031b      	lsls	r3, r3, #12
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	621a      	str	r2, [r3, #32]
}
 80036c0:	bf00      	nop
 80036c2:	371c      	adds	r7, #28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr

080036ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b085      	sub	sp, #20
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f043 0307 	orr.w	r3, r3, #7
 80036ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	609a      	str	r2, [r3, #8]
}
 80036f4:	bf00      	nop
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr

080036fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036fe:	b480      	push	{r7}
 8003700:	b087      	sub	sp, #28
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003718:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	021a      	lsls	r2, r3, #8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	431a      	orrs	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4313      	orrs	r3, r2
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	609a      	str	r2, [r3, #8]
}
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr

0800373c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	2201      	movs	r2, #1
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a1a      	ldr	r2, [r3, #32]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	43db      	mvns	r3, r3
 800375e:	401a      	ands	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a1a      	ldr	r2, [r3, #32]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	fa01 f303 	lsl.w	r3, r1, r3
 8003774:	431a      	orrs	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	621a      	str	r2, [r3, #32]
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003798:	2302      	movs	r3, #2
 800379a:	e046      	b.n	800382a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a16      	ldr	r2, [pc, #88]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00e      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e8:	d009      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a12      	ldr	r2, [pc, #72]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d004      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a10      	ldr	r2, [pc, #64]	; (800383c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d10c      	bne.n	8003818 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	4313      	orrs	r3, r2
 800380e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr
 8003834:	40012c00 	.word	0x40012c00
 8003838:	40000400 	.word	0x40000400
 800383c:	40000800 	.word	0x40000800

08003840 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr

08003852 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr

08003864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e042      	b.n	80038fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fd ffb8 	bl	8001800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2224      	movs	r2, #36	; 0x24
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fd71 	bl	8004390 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	4613      	mov	r3, r2
 8003912:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b20      	cmp	r3, #32
 8003922:	d16d      	bne.n	8003a00 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <HAL_UART_Transmit+0x2c>
 800392a:	88fb      	ldrh	r3, [r7, #6]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e066      	b.n	8003a02 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2221      	movs	r2, #33	; 0x21
 800393e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003942:	f7fe f89d 	bl	8001a80 <HAL_GetTick>
 8003946:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	88fa      	ldrh	r2, [r7, #6]
 800394c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	88fa      	ldrh	r2, [r7, #6]
 8003952:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395c:	d108      	bne.n	8003970 <HAL_UART_Transmit+0x6c>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d104      	bne.n	8003970 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	61bb      	str	r3, [r7, #24]
 800396e:	e003      	b.n	8003978 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003974:	2300      	movs	r3, #0
 8003976:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003978:	e02a      	b.n	80039d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2200      	movs	r2, #0
 8003982:	2180      	movs	r1, #128	; 0x80
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 faf9 	bl	8003f7c <UART_WaitOnFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e036      	b.n	8003a02 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10b      	bne.n	80039b2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	3302      	adds	r3, #2
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	e007      	b.n	80039c2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	781a      	ldrb	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	3301      	adds	r3, #1
 80039c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1cf      	bne.n	800397a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2200      	movs	r2, #0
 80039e2:	2140      	movs	r1, #64	; 0x40
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 fac9 	bl	8003f7c <UART_WaitOnFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e006      	b.n	8003a02 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	e000      	b.n	8003a02 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
  }
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3720      	adds	r7, #32
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b0ba      	sub	sp, #232	; 0xe8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10f      	bne.n	8003a72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <HAL_UART_IRQHandler+0x66>
 8003a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fbd1 	bl	8004212 <UART_Receive_IT>
      return;
 8003a70:	e25b      	b.n	8003f2a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 80de 	beq.w	8003c38 <HAL_UART_IRQHandler+0x22c>
 8003a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d106      	bne.n	8003a96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80d1 	beq.w	8003c38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <HAL_UART_IRQHandler+0xae>
 8003aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	f043 0201 	orr.w	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00b      	beq.n	8003ade <HAL_UART_IRQHandler+0xd2>
 8003ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad6:	f043 0202 	orr.w	r2, r3, #2
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00b      	beq.n	8003b02 <HAL_UART_IRQHandler+0xf6>
 8003aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	f043 0204 	orr.w	r2, r3, #4
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d011      	beq.n	8003b32 <HAL_UART_IRQHandler+0x126>
 8003b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d105      	bne.n	8003b26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	f043 0208 	orr.w	r2, r3, #8
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 81f2 	beq.w	8003f20 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_UART_IRQHandler+0x14e>
 8003b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fb5c 	bl	8004212 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	bf14      	ite	ne
 8003b68:	2301      	movne	r3, #1
 8003b6a:	2300      	moveq	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d103      	bne.n	8003b86 <HAL_UART_IRQHandler+0x17a>
 8003b7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d04f      	beq.n	8003c26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fa66 	bl	8004058 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d041      	beq.n	8003c1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3314      	adds	r3, #20
 8003ba0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3314      	adds	r3, #20
 8003bc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1d9      	bne.n	8003b9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d013      	beq.n	8003c16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	4a7e      	ldr	r2, [pc, #504]	; (8003dec <HAL_UART_IRQHandler+0x3e0>)
 8003bf4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe f892 	bl	8001d24 <HAL_DMA_Abort_IT>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d016      	beq.n	8003c34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c10:	4610      	mov	r0, r2
 8003c12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c14:	e00e      	b.n	8003c34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f99c 	bl	8003f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	e00a      	b.n	8003c34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f998 	bl	8003f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c24:	e006      	b.n	8003c34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f994 	bl	8003f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003c32:	e175      	b.n	8003f20 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c34:	bf00      	nop
    return;
 8003c36:	e173      	b.n	8003f20 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	f040 814f 	bne.w	8003ee0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c46:	f003 0310 	and.w	r3, r3, #16
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 8148 	beq.w	8003ee0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 8141 	beq.w	8003ee0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 80b6 	beq.w	8003df0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8145 	beq.w	8003f24 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	f080 813e 	bcs.w	8003f24 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b20      	cmp	r3, #32
 8003cb8:	f000 8088 	beq.w	8003dcc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	330c      	adds	r3, #12
 8003cc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cca:	e853 3f00 	ldrex	r3, [r3]
 8003cce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ce8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cf4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1d9      	bne.n	8003cbc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3314      	adds	r3, #20
 8003d0e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d12:	e853 3f00 	ldrex	r3, [r3]
 8003d16:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d1a:	f023 0301 	bic.w	r3, r3, #1
 8003d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3314      	adds	r3, #20
 8003d28:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d2c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d30:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d32:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d34:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d38:	e841 2300 	strex	r3, r2, [r1]
 8003d3c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e1      	bne.n	8003d08 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3314      	adds	r3, #20
 8003d4a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d4e:	e853 3f00 	ldrex	r3, [r3]
 8003d52:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3314      	adds	r3, #20
 8003d64:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d68:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e3      	bne.n	8003d44 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d9c:	f023 0310 	bic.w	r3, r3, #16
 8003da0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	330c      	adds	r3, #12
 8003daa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003dae:	65ba      	str	r2, [r7, #88]	; 0x58
 8003db0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003db4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e3      	bne.n	8003d8a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fd ff71 	bl	8001cae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	4619      	mov	r1, r3
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f8bf 	bl	8003f66 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003de8:	e09c      	b.n	8003f24 <HAL_UART_IRQHandler+0x518>
 8003dea:	bf00      	nop
 8003dec:	0800411d 	.word	0x0800411d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 808e 	beq.w	8003f28 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 8089 	beq.w	8003f28 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	330c      	adds	r3, #12
 8003e1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	330c      	adds	r3, #12
 8003e36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e3a:	647a      	str	r2, [r7, #68]	; 0x44
 8003e3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1e3      	bne.n	8003e16 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3314      	adds	r3, #20
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3314      	adds	r3, #20
 8003e6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e72:	633a      	str	r2, [r7, #48]	; 0x30
 8003e74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1e3      	bne.n	8003e4e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	e853 3f00 	ldrex	r3, [r3]
 8003ea2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0310 	bic.w	r3, r3, #16
 8003eaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	330c      	adds	r3, #12
 8003eb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003eb8:	61fa      	str	r2, [r7, #28]
 8003eba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebc:	69b9      	ldr	r1, [r7, #24]
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	e841 2300 	strex	r3, r2, [r1]
 8003ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e3      	bne.n	8003e94 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ed2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f844 	bl	8003f66 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ede:	e023      	b.n	8003f28 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d009      	beq.n	8003f00 <HAL_UART_IRQHandler+0x4f4>
 8003eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f923 	bl	8004144 <UART_Transmit_IT>
    return;
 8003efe:	e014      	b.n	8003f2a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00e      	beq.n	8003f2a <HAL_UART_IRQHandler+0x51e>
 8003f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d008      	beq.n	8003f2a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f962 	bl	80041e2 <UART_EndTransmit_IT>
    return;
 8003f1e:	e004      	b.n	8003f2a <HAL_UART_IRQHandler+0x51e>
    return;
 8003f20:	bf00      	nop
 8003f22:	e002      	b.n	8003f2a <HAL_UART_IRQHandler+0x51e>
      return;
 8003f24:	bf00      	nop
 8003f26:	e000      	b.n	8003f2a <HAL_UART_IRQHandler+0x51e>
      return;
 8003f28:	bf00      	nop
  }
}
 8003f2a:	37e8      	adds	r7, #232	; 0xe8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr

08003f42 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr

08003f54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr

08003f66 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b090      	sub	sp, #64	; 0x40
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f8c:	e050      	b.n	8004030 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f94:	d04c      	beq.n	8004030 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d007      	beq.n	8003fac <UART_WaitOnFlagUntilTimeout+0x30>
 8003f9c:	f7fd fd70 	bl	8001a80 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d241      	bcs.n	8004030 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	330c      	adds	r3, #12
 8003fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	330c      	adds	r3, #12
 8003fca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fcc:	637a      	str	r2, [r7, #52]	; 0x34
 8003fce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1e5      	bne.n	8003fac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3314      	adds	r3, #20
 8003fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f023 0301 	bic.w	r3, r3, #1
 8003ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3314      	adds	r3, #20
 8003ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004000:	623a      	str	r2, [r7, #32]
 8004002:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	69f9      	ldr	r1, [r7, #28]
 8004006:	6a3a      	ldr	r2, [r7, #32]
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	61bb      	str	r3, [r7, #24]
   return(result);
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e5      	bne.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e00f      	b.n	8004050 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4013      	ands	r3, r2
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	429a      	cmp	r2, r3
 800403e:	bf0c      	ite	eq
 8004040:	2301      	moveq	r3, #1
 8004042:	2300      	movne	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	429a      	cmp	r2, r3
 800404c:	d09f      	beq.n	8003f8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3740      	adds	r7, #64	; 0x40
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004058:	b480      	push	{r7}
 800405a:	b095      	sub	sp, #84	; 0x54
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004080:	643a      	str	r2, [r7, #64]	; 0x40
 8004082:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004088:	e841 2300 	strex	r3, r2, [r1]
 800408c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800408e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e5      	bne.n	8004060 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3314      	adds	r3, #20
 800409a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3314      	adds	r3, #20
 80040b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e5      	bne.n	8004094 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d119      	bne.n	8004104 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	330c      	adds	r3, #12
 80040d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	60bb      	str	r3, [r7, #8]
   return(result);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f023 0310 	bic.w	r3, r3, #16
 80040e6:	647b      	str	r3, [r7, #68]	; 0x44
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040f0:	61ba      	str	r2, [r7, #24]
 80040f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f4:	6979      	ldr	r1, [r7, #20]
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	e841 2300 	strex	r3, r2, [r1]
 80040fc:	613b      	str	r3, [r7, #16]
   return(result);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e5      	bne.n	80040d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004112:	bf00      	nop
 8004114:	3754      	adds	r7, #84	; 0x54
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr

0800411c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f7ff ff0c 	bl	8003f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800413c:	bf00      	nop
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b21      	cmp	r3, #33	; 0x21
 8004156:	d13e      	bne.n	80041d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004160:	d114      	bne.n	800418c <UART_Transmit_IT+0x48>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d110      	bne.n	800418c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800417e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	1c9a      	adds	r2, r3, #2
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	621a      	str	r2, [r3, #32]
 800418a:	e008      	b.n	800419e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	1c59      	adds	r1, r3, #1
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6211      	str	r1, [r2, #32]
 8004196:	781a      	ldrb	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	4619      	mov	r1, r3
 80041ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10f      	bne.n	80041d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	e000      	b.n	80041d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041d6:	2302      	movs	r3, #2
  }
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr

080041e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b082      	sub	sp, #8
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff fe94 	bl	8003f30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b08c      	sub	sp, #48	; 0x30
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b22      	cmp	r3, #34	; 0x22
 8004224:	f040 80ae 	bne.w	8004384 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004230:	d117      	bne.n	8004262 <UART_Receive_IT+0x50>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d113      	bne.n	8004262 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800423a:	2300      	movs	r3, #0
 800423c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004242:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	b29b      	uxth	r3, r3
 800424c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004250:	b29a      	uxth	r2, r3
 8004252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004254:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425a:	1c9a      	adds	r2, r3, #2
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	629a      	str	r2, [r3, #40]	; 0x28
 8004260:	e026      	b.n	80042b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004268:	2300      	movs	r3, #0
 800426a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004274:	d007      	beq.n	8004286 <UART_Receive_IT+0x74>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10a      	bne.n	8004294 <UART_Receive_IT+0x82>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	e008      	b.n	80042a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4619      	mov	r1, r3
 80042be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d15d      	bne.n	8004380 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0220 	bic.w	r2, r2, #32
 80042d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695a      	ldr	r2, [r3, #20]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0201 	bic.w	r2, r2, #1
 80042f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	2b01      	cmp	r3, #1
 8004308:	d135      	bne.n	8004376 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	613b      	str	r3, [r7, #16]
   return(result);
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f023 0310 	bic.w	r3, r3, #16
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	330c      	adds	r3, #12
 800432e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004330:	623a      	str	r2, [r7, #32]
 8004332:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	69f9      	ldr	r1, [r7, #28]
 8004336:	6a3a      	ldr	r2, [r7, #32]
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	61bb      	str	r3, [r7, #24]
   return(result);
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e5      	bne.n	8004310 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	2b10      	cmp	r3, #16
 8004350:	d10a      	bne.n	8004368 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800436c:	4619      	mov	r1, r3
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7ff fdf9 	bl	8003f66 <HAL_UARTEx_RxEventCallback>
 8004374:	e002      	b.n	800437c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff fde3 	bl	8003f42 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800437c:	2300      	movs	r3, #0
 800437e:	e002      	b.n	8004386 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	e000      	b.n	8004386 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004384:	2302      	movs	r3, #2
  }
}
 8004386:	4618      	mov	r0, r3
 8004388:	3730      	adds	r7, #48	; 0x30
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043ca:	f023 030c 	bic.w	r3, r3, #12
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	68b9      	ldr	r1, [r7, #8]
 80043d4:	430b      	orrs	r3, r1
 80043d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a2c      	ldr	r2, [pc, #176]	; (80044a4 <UART_SetConfig+0x114>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d103      	bne.n	8004400 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043f8:	f7fe fa9c 	bl	8002934 <HAL_RCC_GetPCLK2Freq>
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	e002      	b.n	8004406 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004400:	f7fe fa84 	bl	800290c <HAL_RCC_GetPCLK1Freq>
 8004404:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	009a      	lsls	r2, r3, #2
 8004410:	441a      	add	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	fbb2 f3f3 	udiv	r3, r2, r3
 800441c:	4a22      	ldr	r2, [pc, #136]	; (80044a8 <UART_SetConfig+0x118>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	0119      	lsls	r1, r3, #4
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	009a      	lsls	r2, r3, #2
 8004430:	441a      	add	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	fbb2 f2f3 	udiv	r2, r2, r3
 800443c:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <UART_SetConfig+0x118>)
 800443e:	fba3 0302 	umull	r0, r3, r3, r2
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	2064      	movs	r0, #100	; 0x64
 8004446:	fb00 f303 	mul.w	r3, r0, r3
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	3332      	adds	r3, #50	; 0x32
 8004450:	4a15      	ldr	r2, [pc, #84]	; (80044a8 <UART_SetConfig+0x118>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800445c:	4419      	add	r1, r3
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	009a      	lsls	r2, r3, #2
 8004468:	441a      	add	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	fbb2 f2f3 	udiv	r2, r2, r3
 8004474:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <UART_SetConfig+0x118>)
 8004476:	fba3 0302 	umull	r0, r3, r3, r2
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	2064      	movs	r0, #100	; 0x64
 800447e:	fb00 f303 	mul.w	r3, r0, r3
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	3332      	adds	r3, #50	; 0x32
 8004488:	4a07      	ldr	r2, [pc, #28]	; (80044a8 <UART_SetConfig+0x118>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	f003 020f 	and.w	r2, r3, #15
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	440a      	add	r2, r1
 800449a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800449c:	bf00      	nop
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40013800 	.word	0x40013800
 80044a8:	51eb851f 	.word	0x51eb851f

080044ac <__errno>:
 80044ac:	4b01      	ldr	r3, [pc, #4]	; (80044b4 <__errno+0x8>)
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	200000a8 	.word	0x200000a8

080044b8 <__libc_init_array>:
 80044b8:	b570      	push	{r4, r5, r6, lr}
 80044ba:	2600      	movs	r6, #0
 80044bc:	4d0c      	ldr	r5, [pc, #48]	; (80044f0 <__libc_init_array+0x38>)
 80044be:	4c0d      	ldr	r4, [pc, #52]	; (80044f4 <__libc_init_array+0x3c>)
 80044c0:	1b64      	subs	r4, r4, r5
 80044c2:	10a4      	asrs	r4, r4, #2
 80044c4:	42a6      	cmp	r6, r4
 80044c6:	d109      	bne.n	80044dc <__libc_init_array+0x24>
 80044c8:	f000 fc6c 	bl	8004da4 <_init>
 80044cc:	2600      	movs	r6, #0
 80044ce:	4d0a      	ldr	r5, [pc, #40]	; (80044f8 <__libc_init_array+0x40>)
 80044d0:	4c0a      	ldr	r4, [pc, #40]	; (80044fc <__libc_init_array+0x44>)
 80044d2:	1b64      	subs	r4, r4, r5
 80044d4:	10a4      	asrs	r4, r4, #2
 80044d6:	42a6      	cmp	r6, r4
 80044d8:	d105      	bne.n	80044e6 <__libc_init_array+0x2e>
 80044da:	bd70      	pop	{r4, r5, r6, pc}
 80044dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e0:	4798      	blx	r3
 80044e2:	3601      	adds	r6, #1
 80044e4:	e7ee      	b.n	80044c4 <__libc_init_array+0xc>
 80044e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ea:	4798      	blx	r3
 80044ec:	3601      	adds	r6, #1
 80044ee:	e7f2      	b.n	80044d6 <__libc_init_array+0x1e>
 80044f0:	080050d8 	.word	0x080050d8
 80044f4:	080050d8 	.word	0x080050d8
 80044f8:	080050d8 	.word	0x080050d8
 80044fc:	080050dc 	.word	0x080050dc

08004500 <malloc>:
 8004500:	4b02      	ldr	r3, [pc, #8]	; (800450c <malloc+0xc>)
 8004502:	4601      	mov	r1, r0
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	f000 b85f 	b.w	80045c8 <_malloc_r>
 800450a:	bf00      	nop
 800450c:	200000a8 	.word	0x200000a8

08004510 <free>:
 8004510:	4b02      	ldr	r3, [pc, #8]	; (800451c <free+0xc>)
 8004512:	4601      	mov	r1, r0
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	f000 b80b 	b.w	8004530 <_free_r>
 800451a:	bf00      	nop
 800451c:	200000a8 	.word	0x200000a8

08004520 <memset>:
 8004520:	4603      	mov	r3, r0
 8004522:	4402      	add	r2, r0
 8004524:	4293      	cmp	r3, r2
 8004526:	d100      	bne.n	800452a <memset+0xa>
 8004528:	4770      	bx	lr
 800452a:	f803 1b01 	strb.w	r1, [r3], #1
 800452e:	e7f9      	b.n	8004524 <memset+0x4>

08004530 <_free_r>:
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	4605      	mov	r5, r0
 8004534:	2900      	cmp	r1, #0
 8004536:	d043      	beq.n	80045c0 <_free_r+0x90>
 8004538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800453c:	1f0c      	subs	r4, r1, #4
 800453e:	2b00      	cmp	r3, #0
 8004540:	bfb8      	it	lt
 8004542:	18e4      	addlt	r4, r4, r3
 8004544:	f000 f8ca 	bl	80046dc <__malloc_lock>
 8004548:	4a1e      	ldr	r2, [pc, #120]	; (80045c4 <_free_r+0x94>)
 800454a:	6813      	ldr	r3, [r2, #0]
 800454c:	4610      	mov	r0, r2
 800454e:	b933      	cbnz	r3, 800455e <_free_r+0x2e>
 8004550:	6063      	str	r3, [r4, #4]
 8004552:	6014      	str	r4, [r2, #0]
 8004554:	4628      	mov	r0, r5
 8004556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800455a:	f000 b8c5 	b.w	80046e8 <__malloc_unlock>
 800455e:	42a3      	cmp	r3, r4
 8004560:	d90a      	bls.n	8004578 <_free_r+0x48>
 8004562:	6821      	ldr	r1, [r4, #0]
 8004564:	1862      	adds	r2, r4, r1
 8004566:	4293      	cmp	r3, r2
 8004568:	bf01      	itttt	eq
 800456a:	681a      	ldreq	r2, [r3, #0]
 800456c:	685b      	ldreq	r3, [r3, #4]
 800456e:	1852      	addeq	r2, r2, r1
 8004570:	6022      	streq	r2, [r4, #0]
 8004572:	6063      	str	r3, [r4, #4]
 8004574:	6004      	str	r4, [r0, #0]
 8004576:	e7ed      	b.n	8004554 <_free_r+0x24>
 8004578:	461a      	mov	r2, r3
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	b10b      	cbz	r3, 8004582 <_free_r+0x52>
 800457e:	42a3      	cmp	r3, r4
 8004580:	d9fa      	bls.n	8004578 <_free_r+0x48>
 8004582:	6811      	ldr	r1, [r2, #0]
 8004584:	1850      	adds	r0, r2, r1
 8004586:	42a0      	cmp	r0, r4
 8004588:	d10b      	bne.n	80045a2 <_free_r+0x72>
 800458a:	6820      	ldr	r0, [r4, #0]
 800458c:	4401      	add	r1, r0
 800458e:	1850      	adds	r0, r2, r1
 8004590:	4283      	cmp	r3, r0
 8004592:	6011      	str	r1, [r2, #0]
 8004594:	d1de      	bne.n	8004554 <_free_r+0x24>
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	4401      	add	r1, r0
 800459c:	6011      	str	r1, [r2, #0]
 800459e:	6053      	str	r3, [r2, #4]
 80045a0:	e7d8      	b.n	8004554 <_free_r+0x24>
 80045a2:	d902      	bls.n	80045aa <_free_r+0x7a>
 80045a4:	230c      	movs	r3, #12
 80045a6:	602b      	str	r3, [r5, #0]
 80045a8:	e7d4      	b.n	8004554 <_free_r+0x24>
 80045aa:	6820      	ldr	r0, [r4, #0]
 80045ac:	1821      	adds	r1, r4, r0
 80045ae:	428b      	cmp	r3, r1
 80045b0:	bf01      	itttt	eq
 80045b2:	6819      	ldreq	r1, [r3, #0]
 80045b4:	685b      	ldreq	r3, [r3, #4]
 80045b6:	1809      	addeq	r1, r1, r0
 80045b8:	6021      	streq	r1, [r4, #0]
 80045ba:	6063      	str	r3, [r4, #4]
 80045bc:	6054      	str	r4, [r2, #4]
 80045be:	e7c9      	b.n	8004554 <_free_r+0x24>
 80045c0:	bd38      	pop	{r3, r4, r5, pc}
 80045c2:	bf00      	nop
 80045c4:	200001a4 	.word	0x200001a4

080045c8 <_malloc_r>:
 80045c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ca:	1ccd      	adds	r5, r1, #3
 80045cc:	f025 0503 	bic.w	r5, r5, #3
 80045d0:	3508      	adds	r5, #8
 80045d2:	2d0c      	cmp	r5, #12
 80045d4:	bf38      	it	cc
 80045d6:	250c      	movcc	r5, #12
 80045d8:	2d00      	cmp	r5, #0
 80045da:	4606      	mov	r6, r0
 80045dc:	db01      	blt.n	80045e2 <_malloc_r+0x1a>
 80045de:	42a9      	cmp	r1, r5
 80045e0:	d903      	bls.n	80045ea <_malloc_r+0x22>
 80045e2:	230c      	movs	r3, #12
 80045e4:	6033      	str	r3, [r6, #0]
 80045e6:	2000      	movs	r0, #0
 80045e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ea:	f000 f877 	bl	80046dc <__malloc_lock>
 80045ee:	4921      	ldr	r1, [pc, #132]	; (8004674 <_malloc_r+0xac>)
 80045f0:	680a      	ldr	r2, [r1, #0]
 80045f2:	4614      	mov	r4, r2
 80045f4:	b99c      	cbnz	r4, 800461e <_malloc_r+0x56>
 80045f6:	4f20      	ldr	r7, [pc, #128]	; (8004678 <_malloc_r+0xb0>)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	b923      	cbnz	r3, 8004606 <_malloc_r+0x3e>
 80045fc:	4621      	mov	r1, r4
 80045fe:	4630      	mov	r0, r6
 8004600:	f000 f83c 	bl	800467c <_sbrk_r>
 8004604:	6038      	str	r0, [r7, #0]
 8004606:	4629      	mov	r1, r5
 8004608:	4630      	mov	r0, r6
 800460a:	f000 f837 	bl	800467c <_sbrk_r>
 800460e:	1c43      	adds	r3, r0, #1
 8004610:	d123      	bne.n	800465a <_malloc_r+0x92>
 8004612:	230c      	movs	r3, #12
 8004614:	4630      	mov	r0, r6
 8004616:	6033      	str	r3, [r6, #0]
 8004618:	f000 f866 	bl	80046e8 <__malloc_unlock>
 800461c:	e7e3      	b.n	80045e6 <_malloc_r+0x1e>
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	1b5b      	subs	r3, r3, r5
 8004622:	d417      	bmi.n	8004654 <_malloc_r+0x8c>
 8004624:	2b0b      	cmp	r3, #11
 8004626:	d903      	bls.n	8004630 <_malloc_r+0x68>
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	441c      	add	r4, r3
 800462c:	6025      	str	r5, [r4, #0]
 800462e:	e004      	b.n	800463a <_malloc_r+0x72>
 8004630:	6863      	ldr	r3, [r4, #4]
 8004632:	42a2      	cmp	r2, r4
 8004634:	bf0c      	ite	eq
 8004636:	600b      	streq	r3, [r1, #0]
 8004638:	6053      	strne	r3, [r2, #4]
 800463a:	4630      	mov	r0, r6
 800463c:	f000 f854 	bl	80046e8 <__malloc_unlock>
 8004640:	f104 000b 	add.w	r0, r4, #11
 8004644:	1d23      	adds	r3, r4, #4
 8004646:	f020 0007 	bic.w	r0, r0, #7
 800464a:	1ac2      	subs	r2, r0, r3
 800464c:	d0cc      	beq.n	80045e8 <_malloc_r+0x20>
 800464e:	1a1b      	subs	r3, r3, r0
 8004650:	50a3      	str	r3, [r4, r2]
 8004652:	e7c9      	b.n	80045e8 <_malloc_r+0x20>
 8004654:	4622      	mov	r2, r4
 8004656:	6864      	ldr	r4, [r4, #4]
 8004658:	e7cc      	b.n	80045f4 <_malloc_r+0x2c>
 800465a:	1cc4      	adds	r4, r0, #3
 800465c:	f024 0403 	bic.w	r4, r4, #3
 8004660:	42a0      	cmp	r0, r4
 8004662:	d0e3      	beq.n	800462c <_malloc_r+0x64>
 8004664:	1a21      	subs	r1, r4, r0
 8004666:	4630      	mov	r0, r6
 8004668:	f000 f808 	bl	800467c <_sbrk_r>
 800466c:	3001      	adds	r0, #1
 800466e:	d1dd      	bne.n	800462c <_malloc_r+0x64>
 8004670:	e7cf      	b.n	8004612 <_malloc_r+0x4a>
 8004672:	bf00      	nop
 8004674:	200001a4 	.word	0x200001a4
 8004678:	200001a8 	.word	0x200001a8

0800467c <_sbrk_r>:
 800467c:	b538      	push	{r3, r4, r5, lr}
 800467e:	2300      	movs	r3, #0
 8004680:	4d05      	ldr	r5, [pc, #20]	; (8004698 <_sbrk_r+0x1c>)
 8004682:	4604      	mov	r4, r0
 8004684:	4608      	mov	r0, r1
 8004686:	602b      	str	r3, [r5, #0]
 8004688:	f7fd f940 	bl	800190c <_sbrk>
 800468c:	1c43      	adds	r3, r0, #1
 800468e:	d102      	bne.n	8004696 <_sbrk_r+0x1a>
 8004690:	682b      	ldr	r3, [r5, #0]
 8004692:	b103      	cbz	r3, 8004696 <_sbrk_r+0x1a>
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	bd38      	pop	{r3, r4, r5, pc}
 8004698:	2000031c 	.word	0x2000031c

0800469c <siprintf>:
 800469c:	b40e      	push	{r1, r2, r3}
 800469e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046a2:	b500      	push	{lr}
 80046a4:	b09c      	sub	sp, #112	; 0x70
 80046a6:	ab1d      	add	r3, sp, #116	; 0x74
 80046a8:	9002      	str	r0, [sp, #8]
 80046aa:	9006      	str	r0, [sp, #24]
 80046ac:	9107      	str	r1, [sp, #28]
 80046ae:	9104      	str	r1, [sp, #16]
 80046b0:	4808      	ldr	r0, [pc, #32]	; (80046d4 <siprintf+0x38>)
 80046b2:	4909      	ldr	r1, [pc, #36]	; (80046d8 <siprintf+0x3c>)
 80046b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80046b8:	9105      	str	r1, [sp, #20]
 80046ba:	6800      	ldr	r0, [r0, #0]
 80046bc:	a902      	add	r1, sp, #8
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	f000 f874 	bl	80047ac <_svfiprintf_r>
 80046c4:	2200      	movs	r2, #0
 80046c6:	9b02      	ldr	r3, [sp, #8]
 80046c8:	701a      	strb	r2, [r3, #0]
 80046ca:	b01c      	add	sp, #112	; 0x70
 80046cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80046d0:	b003      	add	sp, #12
 80046d2:	4770      	bx	lr
 80046d4:	200000a8 	.word	0x200000a8
 80046d8:	ffff0208 	.word	0xffff0208

080046dc <__malloc_lock>:
 80046dc:	4801      	ldr	r0, [pc, #4]	; (80046e4 <__malloc_lock+0x8>)
 80046de:	f000 bafb 	b.w	8004cd8 <__retarget_lock_acquire_recursive>
 80046e2:	bf00      	nop
 80046e4:	20000324 	.word	0x20000324

080046e8 <__malloc_unlock>:
 80046e8:	4801      	ldr	r0, [pc, #4]	; (80046f0 <__malloc_unlock+0x8>)
 80046ea:	f000 baf6 	b.w	8004cda <__retarget_lock_release_recursive>
 80046ee:	bf00      	nop
 80046f0:	20000324 	.word	0x20000324

080046f4 <__ssputs_r>:
 80046f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f8:	688e      	ldr	r6, [r1, #8]
 80046fa:	4682      	mov	sl, r0
 80046fc:	429e      	cmp	r6, r3
 80046fe:	460c      	mov	r4, r1
 8004700:	4690      	mov	r8, r2
 8004702:	461f      	mov	r7, r3
 8004704:	d838      	bhi.n	8004778 <__ssputs_r+0x84>
 8004706:	898a      	ldrh	r2, [r1, #12]
 8004708:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800470c:	d032      	beq.n	8004774 <__ssputs_r+0x80>
 800470e:	6825      	ldr	r5, [r4, #0]
 8004710:	6909      	ldr	r1, [r1, #16]
 8004712:	3301      	adds	r3, #1
 8004714:	eba5 0901 	sub.w	r9, r5, r1
 8004718:	6965      	ldr	r5, [r4, #20]
 800471a:	444b      	add	r3, r9
 800471c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004720:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004724:	106d      	asrs	r5, r5, #1
 8004726:	429d      	cmp	r5, r3
 8004728:	bf38      	it	cc
 800472a:	461d      	movcc	r5, r3
 800472c:	0553      	lsls	r3, r2, #21
 800472e:	d531      	bpl.n	8004794 <__ssputs_r+0xa0>
 8004730:	4629      	mov	r1, r5
 8004732:	f7ff ff49 	bl	80045c8 <_malloc_r>
 8004736:	4606      	mov	r6, r0
 8004738:	b950      	cbnz	r0, 8004750 <__ssputs_r+0x5c>
 800473a:	230c      	movs	r3, #12
 800473c:	f04f 30ff 	mov.w	r0, #4294967295
 8004740:	f8ca 3000 	str.w	r3, [sl]
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800474a:	81a3      	strh	r3, [r4, #12]
 800474c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004750:	464a      	mov	r2, r9
 8004752:	6921      	ldr	r1, [r4, #16]
 8004754:	f000 fad0 	bl	8004cf8 <memcpy>
 8004758:	89a3      	ldrh	r3, [r4, #12]
 800475a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800475e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004762:	81a3      	strh	r3, [r4, #12]
 8004764:	6126      	str	r6, [r4, #16]
 8004766:	444e      	add	r6, r9
 8004768:	6026      	str	r6, [r4, #0]
 800476a:	463e      	mov	r6, r7
 800476c:	6165      	str	r5, [r4, #20]
 800476e:	eba5 0509 	sub.w	r5, r5, r9
 8004772:	60a5      	str	r5, [r4, #8]
 8004774:	42be      	cmp	r6, r7
 8004776:	d900      	bls.n	800477a <__ssputs_r+0x86>
 8004778:	463e      	mov	r6, r7
 800477a:	4632      	mov	r2, r6
 800477c:	4641      	mov	r1, r8
 800477e:	6820      	ldr	r0, [r4, #0]
 8004780:	f000 fac8 	bl	8004d14 <memmove>
 8004784:	68a3      	ldr	r3, [r4, #8]
 8004786:	6822      	ldr	r2, [r4, #0]
 8004788:	1b9b      	subs	r3, r3, r6
 800478a:	4432      	add	r2, r6
 800478c:	2000      	movs	r0, #0
 800478e:	60a3      	str	r3, [r4, #8]
 8004790:	6022      	str	r2, [r4, #0]
 8004792:	e7db      	b.n	800474c <__ssputs_r+0x58>
 8004794:	462a      	mov	r2, r5
 8004796:	f000 fad7 	bl	8004d48 <_realloc_r>
 800479a:	4606      	mov	r6, r0
 800479c:	2800      	cmp	r0, #0
 800479e:	d1e1      	bne.n	8004764 <__ssputs_r+0x70>
 80047a0:	4650      	mov	r0, sl
 80047a2:	6921      	ldr	r1, [r4, #16]
 80047a4:	f7ff fec4 	bl	8004530 <_free_r>
 80047a8:	e7c7      	b.n	800473a <__ssputs_r+0x46>
	...

080047ac <_svfiprintf_r>:
 80047ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b0:	4698      	mov	r8, r3
 80047b2:	898b      	ldrh	r3, [r1, #12]
 80047b4:	4607      	mov	r7, r0
 80047b6:	061b      	lsls	r3, r3, #24
 80047b8:	460d      	mov	r5, r1
 80047ba:	4614      	mov	r4, r2
 80047bc:	b09d      	sub	sp, #116	; 0x74
 80047be:	d50e      	bpl.n	80047de <_svfiprintf_r+0x32>
 80047c0:	690b      	ldr	r3, [r1, #16]
 80047c2:	b963      	cbnz	r3, 80047de <_svfiprintf_r+0x32>
 80047c4:	2140      	movs	r1, #64	; 0x40
 80047c6:	f7ff feff 	bl	80045c8 <_malloc_r>
 80047ca:	6028      	str	r0, [r5, #0]
 80047cc:	6128      	str	r0, [r5, #16]
 80047ce:	b920      	cbnz	r0, 80047da <_svfiprintf_r+0x2e>
 80047d0:	230c      	movs	r3, #12
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	f04f 30ff 	mov.w	r0, #4294967295
 80047d8:	e0d1      	b.n	800497e <_svfiprintf_r+0x1d2>
 80047da:	2340      	movs	r3, #64	; 0x40
 80047dc:	616b      	str	r3, [r5, #20]
 80047de:	2300      	movs	r3, #0
 80047e0:	9309      	str	r3, [sp, #36]	; 0x24
 80047e2:	2320      	movs	r3, #32
 80047e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047e8:	2330      	movs	r3, #48	; 0x30
 80047ea:	f04f 0901 	mov.w	r9, #1
 80047ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80047f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004998 <_svfiprintf_r+0x1ec>
 80047f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047fa:	4623      	mov	r3, r4
 80047fc:	469a      	mov	sl, r3
 80047fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004802:	b10a      	cbz	r2, 8004808 <_svfiprintf_r+0x5c>
 8004804:	2a25      	cmp	r2, #37	; 0x25
 8004806:	d1f9      	bne.n	80047fc <_svfiprintf_r+0x50>
 8004808:	ebba 0b04 	subs.w	fp, sl, r4
 800480c:	d00b      	beq.n	8004826 <_svfiprintf_r+0x7a>
 800480e:	465b      	mov	r3, fp
 8004810:	4622      	mov	r2, r4
 8004812:	4629      	mov	r1, r5
 8004814:	4638      	mov	r0, r7
 8004816:	f7ff ff6d 	bl	80046f4 <__ssputs_r>
 800481a:	3001      	adds	r0, #1
 800481c:	f000 80aa 	beq.w	8004974 <_svfiprintf_r+0x1c8>
 8004820:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004822:	445a      	add	r2, fp
 8004824:	9209      	str	r2, [sp, #36]	; 0x24
 8004826:	f89a 3000 	ldrb.w	r3, [sl]
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 80a2 	beq.w	8004974 <_svfiprintf_r+0x1c8>
 8004830:	2300      	movs	r3, #0
 8004832:	f04f 32ff 	mov.w	r2, #4294967295
 8004836:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800483a:	f10a 0a01 	add.w	sl, sl, #1
 800483e:	9304      	str	r3, [sp, #16]
 8004840:	9307      	str	r3, [sp, #28]
 8004842:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004846:	931a      	str	r3, [sp, #104]	; 0x68
 8004848:	4654      	mov	r4, sl
 800484a:	2205      	movs	r2, #5
 800484c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004850:	4851      	ldr	r0, [pc, #324]	; (8004998 <_svfiprintf_r+0x1ec>)
 8004852:	f000 fa43 	bl	8004cdc <memchr>
 8004856:	9a04      	ldr	r2, [sp, #16]
 8004858:	b9d8      	cbnz	r0, 8004892 <_svfiprintf_r+0xe6>
 800485a:	06d0      	lsls	r0, r2, #27
 800485c:	bf44      	itt	mi
 800485e:	2320      	movmi	r3, #32
 8004860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004864:	0711      	lsls	r1, r2, #28
 8004866:	bf44      	itt	mi
 8004868:	232b      	movmi	r3, #43	; 0x2b
 800486a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800486e:	f89a 3000 	ldrb.w	r3, [sl]
 8004872:	2b2a      	cmp	r3, #42	; 0x2a
 8004874:	d015      	beq.n	80048a2 <_svfiprintf_r+0xf6>
 8004876:	4654      	mov	r4, sl
 8004878:	2000      	movs	r0, #0
 800487a:	f04f 0c0a 	mov.w	ip, #10
 800487e:	9a07      	ldr	r2, [sp, #28]
 8004880:	4621      	mov	r1, r4
 8004882:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004886:	3b30      	subs	r3, #48	; 0x30
 8004888:	2b09      	cmp	r3, #9
 800488a:	d94e      	bls.n	800492a <_svfiprintf_r+0x17e>
 800488c:	b1b0      	cbz	r0, 80048bc <_svfiprintf_r+0x110>
 800488e:	9207      	str	r2, [sp, #28]
 8004890:	e014      	b.n	80048bc <_svfiprintf_r+0x110>
 8004892:	eba0 0308 	sub.w	r3, r0, r8
 8004896:	fa09 f303 	lsl.w	r3, r9, r3
 800489a:	4313      	orrs	r3, r2
 800489c:	46a2      	mov	sl, r4
 800489e:	9304      	str	r3, [sp, #16]
 80048a0:	e7d2      	b.n	8004848 <_svfiprintf_r+0x9c>
 80048a2:	9b03      	ldr	r3, [sp, #12]
 80048a4:	1d19      	adds	r1, r3, #4
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	9103      	str	r1, [sp, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	bfbb      	ittet	lt
 80048ae:	425b      	neglt	r3, r3
 80048b0:	f042 0202 	orrlt.w	r2, r2, #2
 80048b4:	9307      	strge	r3, [sp, #28]
 80048b6:	9307      	strlt	r3, [sp, #28]
 80048b8:	bfb8      	it	lt
 80048ba:	9204      	strlt	r2, [sp, #16]
 80048bc:	7823      	ldrb	r3, [r4, #0]
 80048be:	2b2e      	cmp	r3, #46	; 0x2e
 80048c0:	d10c      	bne.n	80048dc <_svfiprintf_r+0x130>
 80048c2:	7863      	ldrb	r3, [r4, #1]
 80048c4:	2b2a      	cmp	r3, #42	; 0x2a
 80048c6:	d135      	bne.n	8004934 <_svfiprintf_r+0x188>
 80048c8:	9b03      	ldr	r3, [sp, #12]
 80048ca:	3402      	adds	r4, #2
 80048cc:	1d1a      	adds	r2, r3, #4
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	9203      	str	r2, [sp, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bfb8      	it	lt
 80048d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80048da:	9305      	str	r3, [sp, #20]
 80048dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049a8 <_svfiprintf_r+0x1fc>
 80048e0:	2203      	movs	r2, #3
 80048e2:	4650      	mov	r0, sl
 80048e4:	7821      	ldrb	r1, [r4, #0]
 80048e6:	f000 f9f9 	bl	8004cdc <memchr>
 80048ea:	b140      	cbz	r0, 80048fe <_svfiprintf_r+0x152>
 80048ec:	2340      	movs	r3, #64	; 0x40
 80048ee:	eba0 000a 	sub.w	r0, r0, sl
 80048f2:	fa03 f000 	lsl.w	r0, r3, r0
 80048f6:	9b04      	ldr	r3, [sp, #16]
 80048f8:	3401      	adds	r4, #1
 80048fa:	4303      	orrs	r3, r0
 80048fc:	9304      	str	r3, [sp, #16]
 80048fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004902:	2206      	movs	r2, #6
 8004904:	4825      	ldr	r0, [pc, #148]	; (800499c <_svfiprintf_r+0x1f0>)
 8004906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800490a:	f000 f9e7 	bl	8004cdc <memchr>
 800490e:	2800      	cmp	r0, #0
 8004910:	d038      	beq.n	8004984 <_svfiprintf_r+0x1d8>
 8004912:	4b23      	ldr	r3, [pc, #140]	; (80049a0 <_svfiprintf_r+0x1f4>)
 8004914:	bb1b      	cbnz	r3, 800495e <_svfiprintf_r+0x1b2>
 8004916:	9b03      	ldr	r3, [sp, #12]
 8004918:	3307      	adds	r3, #7
 800491a:	f023 0307 	bic.w	r3, r3, #7
 800491e:	3308      	adds	r3, #8
 8004920:	9303      	str	r3, [sp, #12]
 8004922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004924:	4433      	add	r3, r6
 8004926:	9309      	str	r3, [sp, #36]	; 0x24
 8004928:	e767      	b.n	80047fa <_svfiprintf_r+0x4e>
 800492a:	460c      	mov	r4, r1
 800492c:	2001      	movs	r0, #1
 800492e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004932:	e7a5      	b.n	8004880 <_svfiprintf_r+0xd4>
 8004934:	2300      	movs	r3, #0
 8004936:	f04f 0c0a 	mov.w	ip, #10
 800493a:	4619      	mov	r1, r3
 800493c:	3401      	adds	r4, #1
 800493e:	9305      	str	r3, [sp, #20]
 8004940:	4620      	mov	r0, r4
 8004942:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004946:	3a30      	subs	r2, #48	; 0x30
 8004948:	2a09      	cmp	r2, #9
 800494a:	d903      	bls.n	8004954 <_svfiprintf_r+0x1a8>
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0c5      	beq.n	80048dc <_svfiprintf_r+0x130>
 8004950:	9105      	str	r1, [sp, #20]
 8004952:	e7c3      	b.n	80048dc <_svfiprintf_r+0x130>
 8004954:	4604      	mov	r4, r0
 8004956:	2301      	movs	r3, #1
 8004958:	fb0c 2101 	mla	r1, ip, r1, r2
 800495c:	e7f0      	b.n	8004940 <_svfiprintf_r+0x194>
 800495e:	ab03      	add	r3, sp, #12
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	462a      	mov	r2, r5
 8004964:	4638      	mov	r0, r7
 8004966:	4b0f      	ldr	r3, [pc, #60]	; (80049a4 <_svfiprintf_r+0x1f8>)
 8004968:	a904      	add	r1, sp, #16
 800496a:	f3af 8000 	nop.w
 800496e:	1c42      	adds	r2, r0, #1
 8004970:	4606      	mov	r6, r0
 8004972:	d1d6      	bne.n	8004922 <_svfiprintf_r+0x176>
 8004974:	89ab      	ldrh	r3, [r5, #12]
 8004976:	065b      	lsls	r3, r3, #25
 8004978:	f53f af2c 	bmi.w	80047d4 <_svfiprintf_r+0x28>
 800497c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800497e:	b01d      	add	sp, #116	; 0x74
 8004980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004984:	ab03      	add	r3, sp, #12
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	462a      	mov	r2, r5
 800498a:	4638      	mov	r0, r7
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <_svfiprintf_r+0x1f8>)
 800498e:	a904      	add	r1, sp, #16
 8004990:	f000 f87c 	bl	8004a8c <_printf_i>
 8004994:	e7eb      	b.n	800496e <_svfiprintf_r+0x1c2>
 8004996:	bf00      	nop
 8004998:	080050a2 	.word	0x080050a2
 800499c:	080050ac 	.word	0x080050ac
 80049a0:	00000000 	.word	0x00000000
 80049a4:	080046f5 	.word	0x080046f5
 80049a8:	080050a8 	.word	0x080050a8

080049ac <_printf_common>:
 80049ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049b0:	4616      	mov	r6, r2
 80049b2:	4699      	mov	r9, r3
 80049b4:	688a      	ldr	r2, [r1, #8]
 80049b6:	690b      	ldr	r3, [r1, #16]
 80049b8:	4607      	mov	r7, r0
 80049ba:	4293      	cmp	r3, r2
 80049bc:	bfb8      	it	lt
 80049be:	4613      	movlt	r3, r2
 80049c0:	6033      	str	r3, [r6, #0]
 80049c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049c6:	460c      	mov	r4, r1
 80049c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049cc:	b10a      	cbz	r2, 80049d2 <_printf_common+0x26>
 80049ce:	3301      	adds	r3, #1
 80049d0:	6033      	str	r3, [r6, #0]
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	0699      	lsls	r1, r3, #26
 80049d6:	bf42      	ittt	mi
 80049d8:	6833      	ldrmi	r3, [r6, #0]
 80049da:	3302      	addmi	r3, #2
 80049dc:	6033      	strmi	r3, [r6, #0]
 80049de:	6825      	ldr	r5, [r4, #0]
 80049e0:	f015 0506 	ands.w	r5, r5, #6
 80049e4:	d106      	bne.n	80049f4 <_printf_common+0x48>
 80049e6:	f104 0a19 	add.w	sl, r4, #25
 80049ea:	68e3      	ldr	r3, [r4, #12]
 80049ec:	6832      	ldr	r2, [r6, #0]
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	42ab      	cmp	r3, r5
 80049f2:	dc28      	bgt.n	8004a46 <_printf_common+0x9a>
 80049f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049f8:	1e13      	subs	r3, r2, #0
 80049fa:	6822      	ldr	r2, [r4, #0]
 80049fc:	bf18      	it	ne
 80049fe:	2301      	movne	r3, #1
 8004a00:	0692      	lsls	r2, r2, #26
 8004a02:	d42d      	bmi.n	8004a60 <_printf_common+0xb4>
 8004a04:	4649      	mov	r1, r9
 8004a06:	4638      	mov	r0, r7
 8004a08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a0c:	47c0      	blx	r8
 8004a0e:	3001      	adds	r0, #1
 8004a10:	d020      	beq.n	8004a54 <_printf_common+0xa8>
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	68e5      	ldr	r5, [r4, #12]
 8004a16:	f003 0306 	and.w	r3, r3, #6
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	bf18      	it	ne
 8004a1e:	2500      	movne	r5, #0
 8004a20:	6832      	ldr	r2, [r6, #0]
 8004a22:	f04f 0600 	mov.w	r6, #0
 8004a26:	68a3      	ldr	r3, [r4, #8]
 8004a28:	bf08      	it	eq
 8004a2a:	1aad      	subeq	r5, r5, r2
 8004a2c:	6922      	ldr	r2, [r4, #16]
 8004a2e:	bf08      	it	eq
 8004a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a34:	4293      	cmp	r3, r2
 8004a36:	bfc4      	itt	gt
 8004a38:	1a9b      	subgt	r3, r3, r2
 8004a3a:	18ed      	addgt	r5, r5, r3
 8004a3c:	341a      	adds	r4, #26
 8004a3e:	42b5      	cmp	r5, r6
 8004a40:	d11a      	bne.n	8004a78 <_printf_common+0xcc>
 8004a42:	2000      	movs	r0, #0
 8004a44:	e008      	b.n	8004a58 <_printf_common+0xac>
 8004a46:	2301      	movs	r3, #1
 8004a48:	4652      	mov	r2, sl
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	47c0      	blx	r8
 8004a50:	3001      	adds	r0, #1
 8004a52:	d103      	bne.n	8004a5c <_printf_common+0xb0>
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295
 8004a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a5c:	3501      	adds	r5, #1
 8004a5e:	e7c4      	b.n	80049ea <_printf_common+0x3e>
 8004a60:	2030      	movs	r0, #48	; 0x30
 8004a62:	18e1      	adds	r1, r4, r3
 8004a64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a6e:	4422      	add	r2, r4
 8004a70:	3302      	adds	r3, #2
 8004a72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a76:	e7c5      	b.n	8004a04 <_printf_common+0x58>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	4622      	mov	r2, r4
 8004a7c:	4649      	mov	r1, r9
 8004a7e:	4638      	mov	r0, r7
 8004a80:	47c0      	blx	r8
 8004a82:	3001      	adds	r0, #1
 8004a84:	d0e6      	beq.n	8004a54 <_printf_common+0xa8>
 8004a86:	3601      	adds	r6, #1
 8004a88:	e7d9      	b.n	8004a3e <_printf_common+0x92>
	...

08004a8c <_printf_i>:
 8004a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a90:	460c      	mov	r4, r1
 8004a92:	7e27      	ldrb	r7, [r4, #24]
 8004a94:	4691      	mov	r9, r2
 8004a96:	2f78      	cmp	r7, #120	; 0x78
 8004a98:	4680      	mov	r8, r0
 8004a9a:	469a      	mov	sl, r3
 8004a9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aa2:	d807      	bhi.n	8004ab4 <_printf_i+0x28>
 8004aa4:	2f62      	cmp	r7, #98	; 0x62
 8004aa6:	d80a      	bhi.n	8004abe <_printf_i+0x32>
 8004aa8:	2f00      	cmp	r7, #0
 8004aaa:	f000 80d9 	beq.w	8004c60 <_printf_i+0x1d4>
 8004aae:	2f58      	cmp	r7, #88	; 0x58
 8004ab0:	f000 80a4 	beq.w	8004bfc <_printf_i+0x170>
 8004ab4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004abc:	e03a      	b.n	8004b34 <_printf_i+0xa8>
 8004abe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ac2:	2b15      	cmp	r3, #21
 8004ac4:	d8f6      	bhi.n	8004ab4 <_printf_i+0x28>
 8004ac6:	a001      	add	r0, pc, #4	; (adr r0, 8004acc <_printf_i+0x40>)
 8004ac8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004acc:	08004b25 	.word	0x08004b25
 8004ad0:	08004b39 	.word	0x08004b39
 8004ad4:	08004ab5 	.word	0x08004ab5
 8004ad8:	08004ab5 	.word	0x08004ab5
 8004adc:	08004ab5 	.word	0x08004ab5
 8004ae0:	08004ab5 	.word	0x08004ab5
 8004ae4:	08004b39 	.word	0x08004b39
 8004ae8:	08004ab5 	.word	0x08004ab5
 8004aec:	08004ab5 	.word	0x08004ab5
 8004af0:	08004ab5 	.word	0x08004ab5
 8004af4:	08004ab5 	.word	0x08004ab5
 8004af8:	08004c47 	.word	0x08004c47
 8004afc:	08004b69 	.word	0x08004b69
 8004b00:	08004c29 	.word	0x08004c29
 8004b04:	08004ab5 	.word	0x08004ab5
 8004b08:	08004ab5 	.word	0x08004ab5
 8004b0c:	08004c69 	.word	0x08004c69
 8004b10:	08004ab5 	.word	0x08004ab5
 8004b14:	08004b69 	.word	0x08004b69
 8004b18:	08004ab5 	.word	0x08004ab5
 8004b1c:	08004ab5 	.word	0x08004ab5
 8004b20:	08004c31 	.word	0x08004c31
 8004b24:	680b      	ldr	r3, [r1, #0]
 8004b26:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b2a:	1d1a      	adds	r2, r3, #4
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	600a      	str	r2, [r1, #0]
 8004b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0a4      	b.n	8004c82 <_printf_i+0x1f6>
 8004b38:	6825      	ldr	r5, [r4, #0]
 8004b3a:	6808      	ldr	r0, [r1, #0]
 8004b3c:	062e      	lsls	r6, r5, #24
 8004b3e:	f100 0304 	add.w	r3, r0, #4
 8004b42:	d50a      	bpl.n	8004b5a <_printf_i+0xce>
 8004b44:	6805      	ldr	r5, [r0, #0]
 8004b46:	600b      	str	r3, [r1, #0]
 8004b48:	2d00      	cmp	r5, #0
 8004b4a:	da03      	bge.n	8004b54 <_printf_i+0xc8>
 8004b4c:	232d      	movs	r3, #45	; 0x2d
 8004b4e:	426d      	negs	r5, r5
 8004b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b54:	230a      	movs	r3, #10
 8004b56:	485e      	ldr	r0, [pc, #376]	; (8004cd0 <_printf_i+0x244>)
 8004b58:	e019      	b.n	8004b8e <_printf_i+0x102>
 8004b5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b5e:	6805      	ldr	r5, [r0, #0]
 8004b60:	600b      	str	r3, [r1, #0]
 8004b62:	bf18      	it	ne
 8004b64:	b22d      	sxthne	r5, r5
 8004b66:	e7ef      	b.n	8004b48 <_printf_i+0xbc>
 8004b68:	680b      	ldr	r3, [r1, #0]
 8004b6a:	6825      	ldr	r5, [r4, #0]
 8004b6c:	1d18      	adds	r0, r3, #4
 8004b6e:	6008      	str	r0, [r1, #0]
 8004b70:	0628      	lsls	r0, r5, #24
 8004b72:	d501      	bpl.n	8004b78 <_printf_i+0xec>
 8004b74:	681d      	ldr	r5, [r3, #0]
 8004b76:	e002      	b.n	8004b7e <_printf_i+0xf2>
 8004b78:	0669      	lsls	r1, r5, #25
 8004b7a:	d5fb      	bpl.n	8004b74 <_printf_i+0xe8>
 8004b7c:	881d      	ldrh	r5, [r3, #0]
 8004b7e:	2f6f      	cmp	r7, #111	; 0x6f
 8004b80:	bf0c      	ite	eq
 8004b82:	2308      	moveq	r3, #8
 8004b84:	230a      	movne	r3, #10
 8004b86:	4852      	ldr	r0, [pc, #328]	; (8004cd0 <_printf_i+0x244>)
 8004b88:	2100      	movs	r1, #0
 8004b8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b8e:	6866      	ldr	r6, [r4, #4]
 8004b90:	2e00      	cmp	r6, #0
 8004b92:	bfa8      	it	ge
 8004b94:	6821      	ldrge	r1, [r4, #0]
 8004b96:	60a6      	str	r6, [r4, #8]
 8004b98:	bfa4      	itt	ge
 8004b9a:	f021 0104 	bicge.w	r1, r1, #4
 8004b9e:	6021      	strge	r1, [r4, #0]
 8004ba0:	b90d      	cbnz	r5, 8004ba6 <_printf_i+0x11a>
 8004ba2:	2e00      	cmp	r6, #0
 8004ba4:	d04d      	beq.n	8004c42 <_printf_i+0x1b6>
 8004ba6:	4616      	mov	r6, r2
 8004ba8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bac:	fb03 5711 	mls	r7, r3, r1, r5
 8004bb0:	5dc7      	ldrb	r7, [r0, r7]
 8004bb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bb6:	462f      	mov	r7, r5
 8004bb8:	42bb      	cmp	r3, r7
 8004bba:	460d      	mov	r5, r1
 8004bbc:	d9f4      	bls.n	8004ba8 <_printf_i+0x11c>
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d10b      	bne.n	8004bda <_printf_i+0x14e>
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	07df      	lsls	r7, r3, #31
 8004bc6:	d508      	bpl.n	8004bda <_printf_i+0x14e>
 8004bc8:	6923      	ldr	r3, [r4, #16]
 8004bca:	6861      	ldr	r1, [r4, #4]
 8004bcc:	4299      	cmp	r1, r3
 8004bce:	bfde      	ittt	le
 8004bd0:	2330      	movle	r3, #48	; 0x30
 8004bd2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bd6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bda:	1b92      	subs	r2, r2, r6
 8004bdc:	6122      	str	r2, [r4, #16]
 8004bde:	464b      	mov	r3, r9
 8004be0:	4621      	mov	r1, r4
 8004be2:	4640      	mov	r0, r8
 8004be4:	f8cd a000 	str.w	sl, [sp]
 8004be8:	aa03      	add	r2, sp, #12
 8004bea:	f7ff fedf 	bl	80049ac <_printf_common>
 8004bee:	3001      	adds	r0, #1
 8004bf0:	d14c      	bne.n	8004c8c <_printf_i+0x200>
 8004bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf6:	b004      	add	sp, #16
 8004bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bfc:	4834      	ldr	r0, [pc, #208]	; (8004cd0 <_printf_i+0x244>)
 8004bfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c02:	680e      	ldr	r6, [r1, #0]
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c0a:	061f      	lsls	r7, r3, #24
 8004c0c:	600e      	str	r6, [r1, #0]
 8004c0e:	d514      	bpl.n	8004c3a <_printf_i+0x1ae>
 8004c10:	07d9      	lsls	r1, r3, #31
 8004c12:	bf44      	itt	mi
 8004c14:	f043 0320 	orrmi.w	r3, r3, #32
 8004c18:	6023      	strmi	r3, [r4, #0]
 8004c1a:	b91d      	cbnz	r5, 8004c24 <_printf_i+0x198>
 8004c1c:	6823      	ldr	r3, [r4, #0]
 8004c1e:	f023 0320 	bic.w	r3, r3, #32
 8004c22:	6023      	str	r3, [r4, #0]
 8004c24:	2310      	movs	r3, #16
 8004c26:	e7af      	b.n	8004b88 <_printf_i+0xfc>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	f043 0320 	orr.w	r3, r3, #32
 8004c2e:	6023      	str	r3, [r4, #0]
 8004c30:	2378      	movs	r3, #120	; 0x78
 8004c32:	4828      	ldr	r0, [pc, #160]	; (8004cd4 <_printf_i+0x248>)
 8004c34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c38:	e7e3      	b.n	8004c02 <_printf_i+0x176>
 8004c3a:	065e      	lsls	r6, r3, #25
 8004c3c:	bf48      	it	mi
 8004c3e:	b2ad      	uxthmi	r5, r5
 8004c40:	e7e6      	b.n	8004c10 <_printf_i+0x184>
 8004c42:	4616      	mov	r6, r2
 8004c44:	e7bb      	b.n	8004bbe <_printf_i+0x132>
 8004c46:	680b      	ldr	r3, [r1, #0]
 8004c48:	6826      	ldr	r6, [r4, #0]
 8004c4a:	1d1d      	adds	r5, r3, #4
 8004c4c:	6960      	ldr	r0, [r4, #20]
 8004c4e:	600d      	str	r5, [r1, #0]
 8004c50:	0635      	lsls	r5, r6, #24
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	d501      	bpl.n	8004c5a <_printf_i+0x1ce>
 8004c56:	6018      	str	r0, [r3, #0]
 8004c58:	e002      	b.n	8004c60 <_printf_i+0x1d4>
 8004c5a:	0671      	lsls	r1, r6, #25
 8004c5c:	d5fb      	bpl.n	8004c56 <_printf_i+0x1ca>
 8004c5e:	8018      	strh	r0, [r3, #0]
 8004c60:	2300      	movs	r3, #0
 8004c62:	4616      	mov	r6, r2
 8004c64:	6123      	str	r3, [r4, #16]
 8004c66:	e7ba      	b.n	8004bde <_printf_i+0x152>
 8004c68:	680b      	ldr	r3, [r1, #0]
 8004c6a:	1d1a      	adds	r2, r3, #4
 8004c6c:	600a      	str	r2, [r1, #0]
 8004c6e:	681e      	ldr	r6, [r3, #0]
 8004c70:	2100      	movs	r1, #0
 8004c72:	4630      	mov	r0, r6
 8004c74:	6862      	ldr	r2, [r4, #4]
 8004c76:	f000 f831 	bl	8004cdc <memchr>
 8004c7a:	b108      	cbz	r0, 8004c80 <_printf_i+0x1f4>
 8004c7c:	1b80      	subs	r0, r0, r6
 8004c7e:	6060      	str	r0, [r4, #4]
 8004c80:	6863      	ldr	r3, [r4, #4]
 8004c82:	6123      	str	r3, [r4, #16]
 8004c84:	2300      	movs	r3, #0
 8004c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c8a:	e7a8      	b.n	8004bde <_printf_i+0x152>
 8004c8c:	4632      	mov	r2, r6
 8004c8e:	4649      	mov	r1, r9
 8004c90:	4640      	mov	r0, r8
 8004c92:	6923      	ldr	r3, [r4, #16]
 8004c94:	47d0      	blx	sl
 8004c96:	3001      	adds	r0, #1
 8004c98:	d0ab      	beq.n	8004bf2 <_printf_i+0x166>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	079b      	lsls	r3, r3, #30
 8004c9e:	d413      	bmi.n	8004cc8 <_printf_i+0x23c>
 8004ca0:	68e0      	ldr	r0, [r4, #12]
 8004ca2:	9b03      	ldr	r3, [sp, #12]
 8004ca4:	4298      	cmp	r0, r3
 8004ca6:	bfb8      	it	lt
 8004ca8:	4618      	movlt	r0, r3
 8004caa:	e7a4      	b.n	8004bf6 <_printf_i+0x16a>
 8004cac:	2301      	movs	r3, #1
 8004cae:	4632      	mov	r2, r6
 8004cb0:	4649      	mov	r1, r9
 8004cb2:	4640      	mov	r0, r8
 8004cb4:	47d0      	blx	sl
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	d09b      	beq.n	8004bf2 <_printf_i+0x166>
 8004cba:	3501      	adds	r5, #1
 8004cbc:	68e3      	ldr	r3, [r4, #12]
 8004cbe:	9903      	ldr	r1, [sp, #12]
 8004cc0:	1a5b      	subs	r3, r3, r1
 8004cc2:	42ab      	cmp	r3, r5
 8004cc4:	dcf2      	bgt.n	8004cac <_printf_i+0x220>
 8004cc6:	e7eb      	b.n	8004ca0 <_printf_i+0x214>
 8004cc8:	2500      	movs	r5, #0
 8004cca:	f104 0619 	add.w	r6, r4, #25
 8004cce:	e7f5      	b.n	8004cbc <_printf_i+0x230>
 8004cd0:	080050b3 	.word	0x080050b3
 8004cd4:	080050c4 	.word	0x080050c4

08004cd8 <__retarget_lock_acquire_recursive>:
 8004cd8:	4770      	bx	lr

08004cda <__retarget_lock_release_recursive>:
 8004cda:	4770      	bx	lr

08004cdc <memchr>:
 8004cdc:	4603      	mov	r3, r0
 8004cde:	b510      	push	{r4, lr}
 8004ce0:	b2c9      	uxtb	r1, r1
 8004ce2:	4402      	add	r2, r0
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	d101      	bne.n	8004cee <memchr+0x12>
 8004cea:	2000      	movs	r0, #0
 8004cec:	e003      	b.n	8004cf6 <memchr+0x1a>
 8004cee:	7804      	ldrb	r4, [r0, #0]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	428c      	cmp	r4, r1
 8004cf4:	d1f6      	bne.n	8004ce4 <memchr+0x8>
 8004cf6:	bd10      	pop	{r4, pc}

08004cf8 <memcpy>:
 8004cf8:	440a      	add	r2, r1
 8004cfa:	4291      	cmp	r1, r2
 8004cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d00:	d100      	bne.n	8004d04 <memcpy+0xc>
 8004d02:	4770      	bx	lr
 8004d04:	b510      	push	{r4, lr}
 8004d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d0a:	4291      	cmp	r1, r2
 8004d0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d10:	d1f9      	bne.n	8004d06 <memcpy+0xe>
 8004d12:	bd10      	pop	{r4, pc}

08004d14 <memmove>:
 8004d14:	4288      	cmp	r0, r1
 8004d16:	b510      	push	{r4, lr}
 8004d18:	eb01 0402 	add.w	r4, r1, r2
 8004d1c:	d902      	bls.n	8004d24 <memmove+0x10>
 8004d1e:	4284      	cmp	r4, r0
 8004d20:	4623      	mov	r3, r4
 8004d22:	d807      	bhi.n	8004d34 <memmove+0x20>
 8004d24:	1e43      	subs	r3, r0, #1
 8004d26:	42a1      	cmp	r1, r4
 8004d28:	d008      	beq.n	8004d3c <memmove+0x28>
 8004d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d32:	e7f8      	b.n	8004d26 <memmove+0x12>
 8004d34:	4601      	mov	r1, r0
 8004d36:	4402      	add	r2, r0
 8004d38:	428a      	cmp	r2, r1
 8004d3a:	d100      	bne.n	8004d3e <memmove+0x2a>
 8004d3c:	bd10      	pop	{r4, pc}
 8004d3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d46:	e7f7      	b.n	8004d38 <memmove+0x24>

08004d48 <_realloc_r>:
 8004d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4a:	4607      	mov	r7, r0
 8004d4c:	4614      	mov	r4, r2
 8004d4e:	460e      	mov	r6, r1
 8004d50:	b921      	cbnz	r1, 8004d5c <_realloc_r+0x14>
 8004d52:	4611      	mov	r1, r2
 8004d54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d58:	f7ff bc36 	b.w	80045c8 <_malloc_r>
 8004d5c:	b922      	cbnz	r2, 8004d68 <_realloc_r+0x20>
 8004d5e:	f7ff fbe7 	bl	8004530 <_free_r>
 8004d62:	4625      	mov	r5, r4
 8004d64:	4628      	mov	r0, r5
 8004d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d68:	f000 f814 	bl	8004d94 <_malloc_usable_size_r>
 8004d6c:	42a0      	cmp	r0, r4
 8004d6e:	d20f      	bcs.n	8004d90 <_realloc_r+0x48>
 8004d70:	4621      	mov	r1, r4
 8004d72:	4638      	mov	r0, r7
 8004d74:	f7ff fc28 	bl	80045c8 <_malloc_r>
 8004d78:	4605      	mov	r5, r0
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	d0f2      	beq.n	8004d64 <_realloc_r+0x1c>
 8004d7e:	4631      	mov	r1, r6
 8004d80:	4622      	mov	r2, r4
 8004d82:	f7ff ffb9 	bl	8004cf8 <memcpy>
 8004d86:	4631      	mov	r1, r6
 8004d88:	4638      	mov	r0, r7
 8004d8a:	f7ff fbd1 	bl	8004530 <_free_r>
 8004d8e:	e7e9      	b.n	8004d64 <_realloc_r+0x1c>
 8004d90:	4635      	mov	r5, r6
 8004d92:	e7e7      	b.n	8004d64 <_realloc_r+0x1c>

08004d94 <_malloc_usable_size_r>:
 8004d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d98:	1f18      	subs	r0, r3, #4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bfbc      	itt	lt
 8004d9e:	580b      	ldrlt	r3, [r1, r0]
 8004da0:	18c0      	addlt	r0, r0, r3
 8004da2:	4770      	bx	lr

08004da4 <_init>:
 8004da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da6:	bf00      	nop
 8004da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004daa:	bc08      	pop	{r3}
 8004dac:	469e      	mov	lr, r3
 8004dae:	4770      	bx	lr

08004db0 <_fini>:
 8004db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db2:	bf00      	nop
 8004db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db6:	bc08      	pop	{r3}
 8004db8:	469e      	mov	lr, r3
 8004dba:	4770      	bx	lr
